{"version":3,"file":"static/chunks/1445.78c3cb17b581f7fb.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/automation/AutomationAssetSelectionFragment.tsx","webpack://_N_E/../ui-components/src/components/DisclosureTriangleButton.tsx","webpack://_N_E/../ui-core/src/automation/AutomationTargetList.tsx","webpack://_N_E/../ui-core/src/instigation/LiveTickTimeline2.tsx","webpack://_N_E/../ui-core/src/instigation/TickHistory.tsx","webpack://_N_E/../ui-core/src/instigation/util.ts","webpack://_N_E/../ui-core/src/schedules/ScheduleAssetSelectionsQuery.tsx","webpack://_N_E/../ui-core/src/sensors/SensorMonitoredAssets.tsx","webpack://_N_E/../ui-core/src/sensors/SensorResetButton.tsx","webpack://_N_E/../ui-core/src/ticks/DynamicPartitionRequests.tsx","webpack://_N_E/../ui-core/src/ticks/SensorDryRunDialog.tsx","webpack://_N_E/../ui-core/src/sensors/SensorDetails.tsx","webpack://_N_E/../ui-core/src/sensors/SensorFragment.tsx","webpack://_N_E/../ui-core/src/sensors/SensorInfo.tsx","webpack://_N_E/../ui-core/src/sensors/SensorPreviousRuns.tsx","webpack://_N_E/../ui-core/src/sensors/SensorRoot.tsx","webpack://_N_E/../ui-core/src/ticks/DryRunRequestTable.tsx","webpack://_N_E/../ui-core/src/ticks/RunRequestFragment.tsx","webpack://_N_E/../ui-core/src/ticks/TickStatusTag.tsx"],"sourcesContent":["import {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\n\nexport const AUTOMATION_ASSET_SELECTION_FRAGMENT = gql`\n  fragment AutomationAssetSelectionFragment on AssetSelection {\n    assetSelectionString\n    assetsOrError {\n      ... on AssetConnection {\n        nodes {\n          id\n          ...AssetSelectionNodeFragment\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n\n  fragment AssetSelectionNodeFragment on Asset {\n    id\n    key {\n      path\n    }\n    definition {\n      id\n      automationCondition {\n        __typename\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Icon} from './Icon';\nimport {UnstyledButton} from './UnstyledButton';\n\ntype Props = {\n  isOpen: boolean;\n  onToggle: (e: React.MouseEvent<HTMLButtonElement>) => void;\n};\nexport const DisclosureTriangleButton = ({isOpen, onToggle}: Props) => {\n  return (\n    <UnstyledButton\n      onClick={(e) => {\n        onToggle(e);\n      }}\n      style={{cursor: 'pointer', width: 18}}\n    >\n      <Icon\n        name=\"arrow_drop_down\"\n        style={{transform: isOpen ? 'rotate(0deg)' : 'rotate(-90deg)'}}\n      />\n    </UnstyledButton>\n  );\n};\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Caption,\n  Colors,\n  Dialog,\n  DialogFooter,\n  DisclosureTriangleButton,\n  MiddleTruncate,\n  Subtitle2,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  AssetSelectionNodeFragment,\n  AutomationAssetSelectionFragment,\n} from './types/AutomationAssetSelectionFragment.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {displayNameForAssetKey, isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {SensorType} from '../graphql/types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {VirtualizedItemListForDialog} from '../ui/VirtualizedItemListForDialog';\nimport {numberFormatter} from '../ui/formatters';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext/util';\nimport {RepoAddress} from '../workspace/types';\n\ntype AutomationType = 'schedule' | SensorType;\n\nexport const AutomationTargetList = ({\n  assetSelection,\n  automationType,\n  targets,\n  repoAddress,\n}: {\n  automationType: AutomationType;\n  repoAddress: RepoAddress;\n  targets: {pipelineName: string}[] | null;\n  assetSelection: AutomationAssetSelectionFragment | null;\n}) => {\n  const repo = useRepository(repoAddress);\n  if (!targets && !assetSelection) {\n    return <span />;\n  }\n\n  const visibleTargets = targets?.filter((target) => !isHiddenAssetGroupJob(target.pipelineName));\n\n  if (assetSelection) {\n    return <AssetSelectionTag assetSelection={assetSelection} automationType={automationType} />;\n  }\n\n  if (visibleTargets?.length) {\n    return (\n      <Box flex={{direction: 'row', gap: 4}}>\n        {visibleTargets.map((target) =>\n          target.pipelineName ? (\n            <Tag icon=\"job\" tooltipText={target.pipelineName} key={target.pipelineName}>\n              <PipelineReference\n                key={target.pipelineName}\n                pipelineName={target.pipelineName}\n                pipelineHrefContext={repoAddress}\n                isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n              />\n            </Tag>\n          ) : null,\n        )}\n      </Box>\n    );\n  }\n\n  return (\n    <Tag>\n      <div style={{color: Colors.textLight()}}>None</div>\n    </Tag>\n  );\n};\n\nconst ALL_ASSETS_STRING = 'all materializable assets';\n\nconst AssetSelectionTag = ({\n  assetSelection,\n  automationType,\n}: {\n  assetSelection: AutomationAssetSelectionFragment;\n  automationType: AutomationType;\n}) => {\n  const [showAssetSelection, setShowAssetSelection] = useState(false);\n\n  const error =\n    assetSelection.assetsOrError.__typename === 'PythonError' ? assetSelection.assetsOrError : null;\n\n  const sortedAssets = useMemo(() => {\n    if (assetSelection.assetsOrError.__typename === 'PythonError') {\n      return [];\n    }\n    return assetSelection.assetsOrError.nodes\n      .slice()\n      .sort((a, b) =>\n        COMMON_COLLATOR.compare(displayNameForAssetKey(a.key), displayNameForAssetKey(b.key)),\n      );\n  }, [assetSelection.assetsOrError]);\n\n  const assetsWithAMP = useMemo(\n    () => sortedAssets.filter((asset) => !!asset.definition?.automationCondition),\n    [sortedAssets],\n  );\n  const assetsWithoutAMP = useMemo(\n    () => sortedAssets.filter((asset) => !asset.definition?.automationCondition),\n    [sortedAssets],\n  );\n\n  const assetSelectionString = assetSelection.assetSelectionString || '';\n  const isAllAssets = assetSelectionString === ALL_ASSETS_STRING;\n  const firstAsset = sortedAssets[0];\n\n  if (firstAsset && sortedAssets.length === 1) {\n    return (\n      <Tag icon=\"asset\">\n        <Link to={assetDetailsPathForKey(firstAsset.key)}>{assetSelectionString}</Link>\n      </Tag>\n    );\n  }\n\n  return (\n    <>\n      <Dialog\n        isOpen={showAssetSelection}\n        title=\"Targeted assets\"\n        onClose={() => setShowAssetSelection(false)}\n        style={{width: '750px', maxWidth: '80vw', minWidth: '500px'}}\n        canOutsideClickClose\n        canEscapeKeyClose\n      >\n        <Box\n          flex={{direction: 'column'}}\n          style={{height: '50vh', maxHeight: '1000px', minHeight: '400px'}}\n        >\n          {automationType === SensorType.AUTO_MATERIALIZE ||\n          automationType === SensorType.AUTOMATION ? (\n            <>\n              <Section\n                title=\"Assets with a materialization policy\"\n                titleBorder=\"bottom\"\n                assets={assetsWithAMP}\n              />\n              <Section\n                title=\"Assets without a materialization policy\"\n                titleBorder=\"top-and-bottom\"\n                assets={assetsWithoutAMP}\n              />\n            </>\n          ) : (\n            <Section assets={sortedAssets} />\n          )}\n        </Box>\n        <DialogFooter topBorder>\n          <Button\n            intent=\"primary\"\n            onClick={() => {\n              setShowAssetSelection(false);\n            }}\n          >\n            Close\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <Tag\n        icon={sortedAssets.length === 1 ? 'asset' : 'asset_group'}\n        intent={error ? 'danger' : 'none'}\n      >\n        <ButtonLink\n          onClick={() => {\n            if (error) {\n              showCustomAlert({\n                title: 'Python error',\n                body: <PythonErrorInfo error={error} />,\n              });\n            } else {\n              setShowAssetSelection(true);\n            }\n          }}\n          color={error ? Colors.textRed() : Colors.linkDefault()}\n        >\n          {error\n            ? 'Error loading asset selection'\n            : isAllAssets\n              ? 'All materializable assets'\n              : assetSelectionString}\n        </ButtonLink>\n      </Tag>\n    </>\n  );\n};\n\nconst Section = ({\n  assets,\n  title,\n  titleBorder = 'top-and-bottom',\n}: {\n  assets: AssetSelectionNodeFragment[];\n  title?: string;\n  titleBorder?: React.ComponentProps<typeof Box>['border'];\n}) => {\n  const [isOpen, setIsOpen] = useState(true);\n  return (\n    <>\n      {title ? (\n        <Box border={titleBorder} padding={{right: 24, vertical: 12}}>\n          <Box\n            flex={{direction: 'row', gap: 4}}\n            style={{cursor: 'pointer'}}\n            onClick={() => {\n              setIsOpen(!isOpen);\n            }}\n          >\n            <DisclosureTriangleButton onToggle={() => {}} isOpen={isOpen} />\n            <Subtitle2>\n              {title} ({numberFormatter.format(assets.length)})\n            </Subtitle2>\n          </Box>\n        </Box>\n      ) : null}\n      {isOpen ? (\n        assets.length ? (\n          <div style={{height: '100%', overflowY: 'hidden'}}>\n            <VirtualizedItemListForDialog\n              padding={0}\n              items={assets}\n              renderItem={(asset) => <VirtualizedSelectedAssetRow asset={asset} key={asset.id} />}\n              itemBorders\n            />\n          </div>\n        ) : (\n          <Box padding={{horizontal: 24, vertical: 12}}>\n            <Caption color={Colors.textLight()}>0 assets</Caption>\n          </Box>\n        )\n      ) : null}\n    </>\n  );\n};\n\nconst VirtualizedSelectedAssetRow = ({asset}: {asset: AssetSelectionNodeFragment}) => {\n  return (\n    <Box\n      flex={{alignItems: 'center', gap: 4}}\n      style={{cursor: 'pointer'}}\n      padding={{horizontal: 24}}\n    >\n      <Link to={assetDetailsPathForKey(asset.key)} target=\"_blank\">\n        <Box style={{overflow: 'hidden'}}>\n          <MiddleTruncate text={displayNameForAssetKey(asset.key)} />\n        </Box>\n      </Link>\n    </Box>\n  );\n};\n","import {Caption, Colors, Tooltip, ifPlural, useViewport} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport memoize from 'lodash/memoize';\nimport {memo, useContext, useEffect, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {TickResultType} from '../ticks/TickStatusTag';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {isStuckStartedTick} from './util';\nimport {TimeContext} from '../app/time/TimeContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\n\ndayjs.extend(relativeTime);\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreen(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRed(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavender(),\n  [InstigationTickStatus.SKIPPED]: Colors.backgroundDisabled(),\n};\n\nconst HoverColorMap = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreenHover(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRedHover(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavenderHover(),\n  [InstigationTickStatus.SKIPPED]: Colors.accentGrayHover(),\n};\n\nconst REFRESH_INTERVAL = 100;\n\nconst MIN_WIDTH = 8; // At least 8px wide\n\nconst MINUTE = 60000;\n\nconst timestampFormat = memoize((timezone: string) => {\n  return new Intl.DateTimeFormat(navigator.language, {\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hourCycle: 'h23',\n    timeZone: timezone === 'Automatic' ? browserTimezone() : timezone,\n    timeZoneName: 'short',\n  });\n});\nexport const LiveTickTimeline = <T extends HistoryTickFragment | AssetDaemonTickFragment>({\n  ticks,\n  tickResultType,\n  onHoverTick,\n  onSelectTick,\n  exactRange,\n  timeRange = MINUTE * 5, // 5 minutes,\n  tickGrid = MINUTE, // 1 minute\n  timeAfter = MINUTE, // 1 minute\n}: {\n  ticks: T[];\n  tickResultType: TickResultType;\n  onHoverTick: (InstigationTick?: T) => void;\n  onSelectTick: (InstigationTick: T) => void;\n  exactRange?: [number, number];\n  timeRange?: number;\n  tickGrid?: number;\n  timeAfter?: number;\n}) => {\n  const [now, setNow] = useState<number>(Date.now());\n  const [isPaused, setPaused] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!isPaused && !exactRange) {\n      const interval = setInterval(() => {\n        setNow(Date.now());\n      }, REFRESH_INTERVAL);\n      return () => clearInterval(interval);\n    }\n    return () => {};\n  }, [exactRange, isPaused]);\n\n  const maxX = exactRange?.[1] ? exactRange[1] * 1000 : now + timeAfter;\n  const minX = exactRange?.[0] ? exactRange[0] * 1000 : now - timeRange;\n\n  const fullRange = maxX - minX;\n\n  const {viewport, containerProps} = useViewport();\n\n  const ticksReversed = useMemo(() => {\n    // Reverse ticks to make tab order correct\n    return ticks.filter((tick) => !tick.endTimestamp || tick.endTimestamp * 1000 > minX).reverse();\n  }, [ticks, minX]);\n\n  const ticksToDisplay = useMemo(() => {\n    return ticksReversed.map((tick, i) => {\n      const startX = getX(1000 * tick.timestamp!, viewport.width, minX, fullRange);\n      const endTimestamp = isStuckStartedTick(tick, ticksReversed.length - i - 1)\n        ? tick.timestamp\n        : tick.endTimestamp\n          ? tick.endTimestamp * 1000\n          : now;\n      const endX = getX(endTimestamp, viewport.width, minX, fullRange);\n      return {\n        ...tick,\n        width: Math.max(endX - startX, MIN_WIDTH),\n        startX,\n      };\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [minX, now, ticksReversed, fullRange, viewport.width]);\n\n  const timeTickGridDelta = Math.max((maxX - minX) / 25, tickGrid);\n  const tickGridDelta = timeTickGridDelta / 5;\n  const startTickGridX = Math.ceil(minX / tickGridDelta) * tickGridDelta;\n  const gridTicks = useMemo(() => {\n    const ticks = [];\n    for (let i = startTickGridX; i <= maxX; i += tickGridDelta) {\n      ticks.push({\n        time: i,\n        x: getX(i, viewport.width, minX, fullRange),\n        showLabel: i % timeTickGridDelta === 0,\n      });\n    }\n    return ticks;\n  }, [maxX, startTickGridX, tickGridDelta, viewport.width, minX, fullRange, timeTickGridDelta]);\n\n  const {\n    timezone: [timezone],\n  } = useContext(TimeContext);\n\n  return (\n    <div style={{marginRight: '8px'}}>\n      <div {...containerProps}>\n        <TicksWrapper>\n          {gridTicks.map((tick) => (\n            <GridTick\n              key={tick.time}\n              style={{\n                transform: `translateX(${tick.x}px)`,\n              }}\n            >\n              <GridTickLine />\n              {tick.showLabel ? (\n                <GridTickTime>\n                  <Caption>{timestampFormat(timezone).format(new Date(tick.time))}</Caption>\n                </GridTickTime>\n              ) : null}\n            </GridTick>\n          ))}\n          {ticksToDisplay.map((tick) => {\n            const count =\n              (tickResultType === 'materializations' || !('runIds' in tick)\n                ? tick.requestedAssetMaterializationCount\n                : tick.runIds?.length) ?? 0;\n            return (\n              <Tick\n                key={tick.id}\n                style={{\n                  transform: `translateX(${tick.startX}px)`,\n                  width: `${tick.width}px`,\n                }}\n                status={tick.status}\n                onMouseEnter={() => {\n                  onHoverTick(tick);\n                  setPaused(true);\n                }}\n                onMouseLeave={() => {\n                  onHoverTick();\n                  setPaused(false);\n                }}\n                onClick={() => {\n                  onSelectTick(tick);\n                }}\n              >\n                <Tooltip content={<TickTooltip tick={tick} tickResultType={tickResultType} />}>\n                  <div style={{width: tick.width + 'px', height: '80px'}}>\n                    {count > 0 ? count : null}\n                  </div>\n                </Tooltip>\n              </Tick>\n            );\n          })}\n          <NowIndicator\n            style={{\n              transform: `translateX(${getX(now, viewport.width, minX, fullRange)}px)`,\n            }}\n          />\n        </TicksWrapper>\n        <TimeAxisWrapper></TimeAxisWrapper>\n      </div>\n    </div>\n  );\n};\n\nconst TickTooltip = memo(\n  ({\n    tick,\n    tickResultType,\n  }: {\n    tick: HistoryTickFragment | AssetDaemonTickFragment;\n    tickResultType: TickResultType;\n  }) => {\n    const status = useMemo(() => {\n      if (tick.status === InstigationTickStatus.FAILURE) {\n        return 'Evaluation failed';\n      }\n      if (tick.status === InstigationTickStatus.STARTED) {\n        return 'Evaluating…';\n      }\n      if (tickResultType === 'materializations' || !('runs' in tick)) {\n        return `${tick.requestedAssetMaterializationCount} materialization${ifPlural(\n          tick.requestedAssetMaterializationCount,\n          '',\n          's',\n        )} requested`;\n      } else {\n        return `${tick.runs?.length || 0} run${ifPlural(tick.runs?.length, '', 's')} requested`;\n      }\n    }, [tick, tickResultType]);\n    const startTime = dayjs(1000 * tick.timestamp!);\n    const endTime = dayjs(tick.endTimestamp ? 1000 * tick.endTimestamp : Date.now());\n    const elapsedTime = startTime.to(endTime, true);\n    return (\n      <div>\n        <Caption as=\"div\">\n          {status} ({elapsedTime})\n        </Caption>\n        {tick.status === InstigationTickStatus.STARTED ? null : (\n          <Caption color={Colors.textLight()}>Click for details</Caption>\n        )}\n      </div>\n    );\n  },\n);\n\nconst TicksWrapper = styled.div`\n  position: relative;\n  height: 100px;\n  padding: 10px 2px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n`;\n\nconst TimeAxisWrapper = styled.div`\n  height: 24px;\n`;\n\nconst Tick = styled.div<{status: InstigationTickStatus}>`\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  height: 80px;\n  will-change: transform, width;\n  border-radius: 2px;\n  div {\n    place-content: center;\n    display: grid;\n  }\n  color: ${Colors.backgroundDefault()};\n  ${({status}) => `\n    background: ${COLOR_MAP[status]};\n    &:hover {\n      background: ${HoverColorMap[status]};\n    }\n  `}\n`;\n\nconst GridTick = styled.div`\n  position: absolute;\n  top: 0;\n  height: 124px;\n  will-change: transform;\n`;\nconst GridTickLine = styled.div`\n  position: absolute;\n  top: 0;\n  height: 108px;\n  width: 1px;\n  background: ${Colors.keylineDefault()};\n`;\nconst GridTickTime = styled.div`\n  height: 16px;\n  position: absolute;\n  bottom: 0;\n  width: 100px;\n  margin-left: -24px;\n`;\n\nconst NowIndicator = styled.div`\n  position: absolute;\n  top: 0;\n  height: 126px;\n  width: 2px;\n  background: ${Colors.accentPrimary()};\n  &:after {\n    content: 'Now';\n    position: absolute;\n    left: 0;\n    background: ${Colors.accentPrimary()};\n    color: ${Colors.accentReversed()};\n    bottom: 0;\n    font-size: 12px;\n    padding: 3px 4px;\n  }\n`;\n\nfunction getX(timestamp: number, viewportWidth: number, minX: number, timeRange: number) {\n  return (viewportWidth * (timestamp - minX)) / timeRange;\n}\n","import 'chartjs-adapter-date-fns';\n\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Caption,\n  Colors,\n  CursorHistoryControls,\n  FontFamily,\n  Icon,\n  IconWrapper,\n  Menu,\n  MenuItem,\n  NonIdealState,\n  Select,\n  Spinner,\n  Subheading,\n  Table,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {Chart} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT, RUN_STATUS_FRAGMENT, RunStatusLink} from './InstigationUtils';\nimport {LiveTickTimeline} from './LiveTickTimeline2';\nimport {TickDetailsDialog} from './TickDetailsDialog';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {TickHistoryQuery, TickHistoryQueryVariables} from './types/TickHistory.types';\nimport {countPartitionsAddedOrDeleted, isStuckStartedTick, truncate} from './util';\nimport {gql, useQuery} from '../apollo-client';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n  InstigationType,\n} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {TimeElapsed} from '../runs/TimeElapsed';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {TickLogDialog} from '../ticks/TickLogDialog';\nimport {TickResultType, TickStatusTag} from '../ticks/TickStatusTag';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nChart.register(zoomPlugin);\n\ntype InstigationTick = HistoryTickFragment;\n\nconst PAGE_SIZE = 25;\n\nenum TickStatusDisplay {\n  ALL = 'all',\n  FAILED = 'failed',\n  SUCCESS = 'success',\n}\n\nconst STATUS_DISPLAY_MAP = {\n  [TickStatusDisplay.ALL]: [\n    InstigationTickStatus.SUCCESS,\n    InstigationTickStatus.FAILURE,\n    InstigationTickStatus.STARTED,\n    InstigationTickStatus.SKIPPED,\n  ],\n  [TickStatusDisplay.FAILED]: [InstigationTickStatus.FAILURE],\n  [TickStatusDisplay.SUCCESS]: [InstigationTickStatus.SUCCESS],\n};\n\nexport const TicksTable = ({\n  name,\n  repoAddress,\n  tabs,\n  tickResultType,\n  setTimerange,\n  setParentStatuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  tickResultType: TickResultType;\n  tabs?: React.ReactElement;\n  setTimerange?: (range?: [number, number]) => void;\n  setParentStatuses?: (statuses?: InstigationTickStatus[]) => void;\n}) => {\n  const [tickStatus, setTickStatus] = useQueryPersistedState<TickStatusDisplay>({\n    queryKey: 'status',\n    defaults: {status: TickStatusDisplay.ALL},\n  });\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const statuses = React.useMemo(\n    () => STATUS_DISPLAY_MAP[tickStatus] || STATUS_DISPLAY_MAP[TickStatusDisplay.ALL],\n    [tickStatus],\n  );\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    TickHistoryQuery,\n    TickHistoryQueryVariables\n  >({\n    nextCursorForResult: (data) => {\n      if (data.instigationStateOrError.__typename !== 'InstigationState') {\n        return undefined;\n      }\n      return data.instigationStateOrError.ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.instigationStateOrError.__typename !== 'InstigationState') {\n        return [];\n      }\n      return data.instigationStateOrError.ticks;\n    },\n    variables: {\n      instigationSelector,\n      statuses,\n    },\n    query: TICK_HISTORY_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const state = queryResult?.data?.instigationStateOrError;\n  const ticks = React.useMemo(\n    () => (state?.__typename === 'InstigationState' ? state.ticks : []),\n    [state],\n  );\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange?.([start, end]);\n        }\n      }\n    } else {\n      setTimerange?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, ticks, setTimerange]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses?.(Array.from(statuses));\n    } else {\n      setParentStatuses?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor && !ticks.length && !queryResult.loading) {\n      paginationProps.reset();\n    }\n    // paginationProps.reset isn't memoized\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ticks, queryResult.loading, paginationProps.hasPrevCursor]);\n\n  const [logTick, setLogTick] = React.useState<InstigationTick>();\n  const {data} = queryResult;\n\n  if (!data) {\n    return (\n      <Box padding={{vertical: 48}}>\n        <Spinner purpose=\"page\" />\n      </Box>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n      </Box>\n    );\n  }\n\n  const {instigationType} = data.instigationStateOrError;\n\n  if (!ticks.length && tickStatus === TickStatusDisplay.ALL) {\n    return null;\n  }\n\n  return (\n    <>\n      {logTick ? (\n        <TickLogDialog\n          tick={logTick}\n          instigationSelector={instigationSelector}\n          onClose={() => setLogTick(undefined)}\n        />\n      ) : null}\n      <Box padding={{vertical: 12, horizontal: 24}}>\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          {tabs}\n          <Box flex={{direction: 'row', gap: 16}}>\n            <StatusFilter status={tickStatus} onChange={setTickStatus} />\n          </Box>\n        </Box>\n      </Box>\n      {ticks.length ? (\n        <TableWrapper>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Timestamp</th>\n              <th style={{width: 90}}>Status</th>\n              <th style={{width: 90}}>Duration</th>\n              {instigationType === InstigationType.SENSOR ? (\n                <th style={{width: 120}}>Cursor</th>\n              ) : null}\n              <th style={{width: 180}}>Result</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ticks.map((tick, index) => (\n              <TickRow\n                key={tick.id}\n                tick={tick}\n                tickResultType={tickResultType}\n                instigationSelector={instigationSelector}\n                index={index}\n              />\n            ))}\n          </tbody>\n        </TableWrapper>\n      ) : (\n        <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n        </Box>\n      )}\n      {ticks.length > 0 ? (\n        <div style={{marginTop: '16px'}}>\n          <CursorHistoryControls {...paginationProps} />\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nconst StatusFilter = ({\n  status,\n  onChange,\n}: {\n  status: TickStatusDisplay;\n  onChange: (value: TickStatusDisplay) => void;\n}) => {\n  const items = [\n    {key: TickStatusDisplay.ALL, label: 'All ticks'},\n    {key: TickStatusDisplay.SUCCESS, label: 'Requested'},\n    {key: TickStatusDisplay.FAILED, label: 'Failed'},\n  ];\n  const activeItem = items.find(({key}) => key === status);\n  return (\n    <Select<(typeof items)[0]>\n      popoverProps={{position: 'bottom-right'}}\n      filterable={false}\n      activeItem={activeItem}\n      items={items}\n      itemRenderer={(item, props) => {\n        return (\n          <MenuItem\n            active={props.modifiers.active}\n            onClick={props.handleClick}\n            key={item.key}\n            text={item.label}\n            style={{width: '300px'}}\n          />\n        );\n      }}\n      itemListRenderer={({renderItem, filteredItems}) => {\n        const renderedItems = filteredItems.map(renderItem).filter(Boolean);\n        return <Menu>{renderedItems}</Menu>;\n      }}\n      onItemSelect={(item) => onChange(item.key)}\n    >\n      <Button\n        rightIcon={<Icon name=\"arrow_drop_down\" />}\n        style={{minWidth: '200px', display: 'flex', justifyContent: 'space-between'}}\n      >\n        {activeItem?.label}\n      </Button>\n    </Select>\n  );\n};\n\nexport const TickHistoryTimeline = ({\n  name,\n  repoAddress,\n  tickResultType,\n  onHighlightRunIds,\n  beforeTimestamp,\n  afterTimestamp,\n  statuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds?: (runIds: string[]) => void;\n  beforeTimestamp?: number;\n  afterTimestamp?: number;\n  statuses?: InstigationTickStatus[];\n  tickResultType: TickResultType;\n}) => {\n  const [selectedTickId, setSelectedTickId] = useQueryPersistedState<string | undefined>({\n    encode: (tickId) => ({tickId}),\n    decode: (qs) => qs['tickId'] ?? undefined,\n  });\n\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const queryResult = useQuery<TickHistoryQuery, TickHistoryQueryVariables>(TICK_HISTORY_QUERY, {\n    variables: {\n      instigationSelector,\n      beforeTimestamp,\n      afterTimestamp,\n      statuses,\n      limit: beforeTimestamp ? undefined : 15,\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useQueryRefreshAtInterval(\n    queryResult,\n    1000,\n    !(pollingPaused || (beforeTimestamp && afterTimestamp)),\n  );\n  const {data, error} = queryResult;\n\n  if (!data || error) {\n    return (\n      <>\n        <Box padding={{top: 16, horizontal: 24}} border=\"bottom\">\n          <Subheading>Recent ticks</Subheading>\n        </Box>\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return null;\n  }\n\n  // Set it equal to an empty array in case of a weird error\n  // https://elementl-workspace.slack.com/archives/C03CCE471E0/p1693237968395179?thread_ts=1693233109.602669&cid=C03CCE471E0\n  const {ticks = []} = data.instigationStateOrError;\n\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTickId(tick ? tick.tickId : undefined);\n  };\n\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      if (onHighlightRunIds) {\n        onHighlightRunIds(tick.runIds);\n      }\n      pausePolling(true);\n    }\n  };\n\n  return (\n    <>\n      <TickDetailsDialog\n        isOpen={!!selectedTickId}\n        tickId={selectedTickId}\n        tickResultType={tickResultType}\n        instigationSelector={instigationSelector}\n        onClose={() => onTickClick(undefined)}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Recent ticks</Subheading>\n      </Box>\n      <Box border=\"top\">\n        <LiveTickTimeline\n          ticks={ticks}\n          tickResultType={tickResultType}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n          exactRange={\n            beforeTimestamp && afterTimestamp ? [afterTimestamp, beforeTimestamp] : undefined\n          }\n        />\n      </Box>\n    </>\n  );\n};\n\nfunction TickRow({\n  tick,\n  tickResultType,\n  instigationSelector,\n  index,\n}: {\n  tick: HistoryTickFragment;\n  tickResultType: TickResultType;\n  instigationSelector: InstigationSelector;\n  index: number;\n}) {\n  const copyToClipboard = useCopyToClipboard();\n  const [showResults, setShowResults] = React.useState(false);\n\n  const [addedPartitions, deletedPartitions] = React.useMemo(() => {\n    const requests = tick.dynamicPartitionsRequestResults;\n    const added = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.ADD_PARTITIONS,\n    );\n    const deleted = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.DELETE_PARTITIONS,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  const isStuckStarted = isStuckStartedTick(tick, index);\n\n  return (\n    <tr>\n      <td>\n        <TimestampDisplay\n          timestamp={tick.timestamp}\n          timeFormat={{showTimezone: false, showSeconds: true}}\n        />\n      </td>\n      <td>\n        <TickStatusTag\n          tick={tick}\n          tickResultType={tickResultType}\n          isStuckStarted={isStuckStarted}\n        />\n      </td>\n      <td>\n        {isStuckStarted ? (\n          '- '\n        ) : (\n          <TimeElapsed\n            startUnix={tick.timestamp}\n            endUnix={tick.endTimestamp || Date.now() / 1000}\n          />\n        )}\n      </td>\n      {tick.instigationType === InstigationType.SENSOR ? (\n        <td style={{width: 120}}>\n          {tick.cursor ? (\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <div style={{fontFamily: FontFamily.monospace, fontSize: '14px'}}>\n                {truncate(tick.cursor || '')}\n              </div>\n              <CopyButton\n                onClick={async () => {\n                  copyToClipboard(tick.cursor || '');\n                  await showSharedToaster({\n                    message: <div>Copied value</div>,\n                    intent: 'success',\n                  });\n                }}\n              >\n                <Icon name=\"assignment\" />\n              </CopyButton>\n            </Box>\n          ) : (\n            <>&mdash;</>\n          )}\n        </td>\n      ) : null}\n      <td>\n        <Box flex={{direction: 'column', gap: 6}}>\n          {tickResultType === 'runs' ? (\n            <Box flex={{alignItems: 'center', gap: 8}}>\n              <ButtonLink onClick={() => setShowResults(true)}>\n                {tick.runIds.length === 1\n                  ? '1 run requested'\n                  : `${tick.runIds.length} runs requested`}\n              </ButtonLink>\n              {tick.runs.length === 1\n                ? tick.runs.map((run) => (\n                    <React.Fragment key={run.id}>\n                      <RunStatusLink run={run} />\n                    </React.Fragment>\n                  ))\n                : null}\n            </Box>\n          ) : (\n            <Box flex={{alignItems: 'center', gap: 8}}>\n              <ButtonLink onClick={() => setShowResults(true)}>\n                {tick.requestedAssetMaterializationCount === 1\n                  ? '1 materialization requested'\n                  : `${tick.requestedAssetMaterializationCount} materializations requested`}\n              </ButtonLink>\n            </Box>\n          )}\n          {addedPartitions || deletedPartitions ? (\n            <Caption>\n              (\n              {addedPartitions ? (\n                <span>\n                  {addedPartitions} partition{ifPlural(addedPartitions, '', 's')} created\n                  {deletedPartitions ? ',' : ''}\n                </span>\n              ) : null}\n              {deletedPartitions ? (\n                <span>\n                  {deletedPartitions} partition{ifPlural(deletedPartitions, '', 's')} deleted,\n                </span>\n              ) : null}\n              )\n            </Caption>\n          ) : null}\n          <TickDetailsDialog\n            isOpen={showResults}\n            tickId={tick.tickId}\n            tickResultType={tickResultType}\n            instigationSelector={instigationSelector}\n            onClose={() => {\n              setShowResults(false);\n            }}\n          />\n        </Box>\n      </td>\n    </tr>\n  );\n}\n\nconst TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery(\n    $instigationSelector: InstigationSelector!\n    $dayRange: Int\n    $limit: Int\n    $cursor: String\n    $statuses: [InstigationTickStatus!]\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        ticks(\n          dayRange: $dayRange\n          limit: $limit\n          cursor: $cursor\n          statuses: $statuses\n          beforeTimestamp: $beforeTimestamp\n          afterTimestamp: $afterTimestamp\n        ) {\n          id\n          ...HistoryTick\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n\nconst CopyButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 8px;\n  margin: -6px;\n  outline: none;\n\n  ${IconWrapper} {\n    background-color: ${Colors.accentGray()};\n    transition: background-color 100ms;\n  }\n\n  :hover ${IconWrapper} {\n    background-color: ${Colors.accentGrayHover()};\n  }\n\n  :focus ${IconWrapper} {\n    background-color: ${Colors.linkDefault()};\n  }\n`;\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationTick,\n  InstigationTickStatus,\n} from '../graphql/types';\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst THREE_DAYS = 60 * 60 * 24 * 3;\n\nexport const truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nexport function isStuckStartedTick(\n  tick: Pick<InstigationTick, 'timestamp' | 'endTimestamp' | 'status'>,\n  index: number,\n) {\n  return (\n    !tick.endTimestamp &&\n    // If the index is 0 and the tick does have an end timestamp then we can't know if its actually stuck or still in progress\n    // but if its older than three days then its very likely stuck\n    ((index !== 0 && tick.status === InstigationTickStatus.STARTED) ||\n      tick.timestamp * 1000 < Date.now() - THREE_DAYS)\n  );\n}\n\nexport function countPartitionsAddedOrDeleted(\n  requests: Pick<DynamicPartitionsRequestResult, 'partitionKeys' | 'type'>[],\n  type: DynamicPartitionsRequestType,\n) {\n  return requests.reduce((sum, request) => {\n    if (request.type === type) {\n      return sum + (request.partitionKeys?.length || 0);\n    }\n    return sum;\n  }, 0);\n}\n","import {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {AUTOMATION_ASSET_SELECTION_FRAGMENT} from '../automation/AutomationAssetSelectionFragment';\n\nexport const SCHEDULE_ASSET_SELECTIONS_QUERY = gql`\n  query ScheduleAssetSelectionQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        assetSelection {\n          ...AutomationAssetSelectionFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${AUTOMATION_ASSET_SELECTION_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box} from '@dagster-io/ui-components';\n\nimport {AssetLink} from '../assets/AssetLink';\nimport {SensorMetadata} from '../graphql/types';\n\nexport const SensorMonitoredAssets = ({metadata}: {metadata: SensorMetadata | undefined}) => {\n  if (!metadata?.assetKeys?.length) {\n    return <span />;\n  }\n  return (\n    <Box flex={{direction: 'column', gap: 2}}>\n      {metadata.assetKeys.map((key) => (\n        <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n      ))}\n    </Box>\n  );\n};\n","import {Button, Tooltip} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RESET_SENSOR_MUTATION, displaySensorMutationErrors} from './SensorMutations';\nimport {useMutation} from '../apollo-client';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {ResetSensorMutation, ResetSensorMutationVariables} from './types/SensorMutations.types';\nimport {DEFAULT_DISABLED_REASON, usePermissionsForLocation} from '../app/Permissions';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n}\n\nexport const SensorResetButton = ({repoAddress, sensor}: Props) => {\n  const {\n    permissions: {canStartSensor, canStopSensor},\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const {name} = sensor;\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName: name,\n  };\n\n  const [resetSensor, {loading: toggleOnInFlight}] = useMutation<\n    ResetSensorMutation,\n    ResetSensorMutationVariables\n  >(RESET_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const onClick = () => {\n    resetSensor({variables: {sensorSelector}});\n  };\n\n  const hasPermission = canStartSensor && canStopSensor;\n  const disabled = toggleOnInFlight || !hasPermission;\n  const tooltipContent = hasPermission\n    ? `In code, a default status for \"${name}\" has been set to \"${sensor.defaultStatus}\". Click here to reset the sensor status to track the status set in code.`\n    : DEFAULT_DISABLED_REASON;\n\n  return (\n    <Tooltip\n      content={<div style={{maxWidth: '500px', wordBreak: 'break-word'}}>{tooltipContent}</div>}\n      display=\"flex\"\n    >\n      <Button disabled={disabled} onClick={onClick}>\n        Reset sensor status\n      </Button>\n    </Tooltip>\n  );\n};\n","import {Box, Colors, Icon, Subheading, Table, Tag} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {DynamicPartitionRequestFragment} from './types/SensorDryRunDialog.types';\nimport {DynamicPartitionsRequestType} from '../graphql/types';\n\nexport function DynamicPartitionRequests({\n  includeTitle = true,\n  requests,\n}: {\n  includeTitle?: boolean;\n  requests: Pick<DynamicPartitionRequestFragment, 'partitionKeys' | 'partitionsDefName' | 'type'>[];\n}) {\n  const rows = useMemo(() => {\n    if (!requests.length) {\n      return [];\n    }\n    const rows: {key: string; def: string; type: DynamicPartitionsRequestType}[] = [];\n    requests.forEach(({partitionKeys, partitionsDefName, type}) => {\n      partitionKeys?.forEach((key) => {\n        rows.push({\n          key,\n          def: partitionsDefName,\n          type,\n        });\n      });\n    });\n    return rows;\n  }, [requests]);\n\n  if (!rows.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'column', gap: 12, grow: 1}}>\n      {includeTitle ? (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          <Icon name=\"partition\" />\n          <Subheading>Dynamic Partition Requests</Subheading>\n        </Box>\n      ) : null}\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`}}>\n        <thead>\n          <tr>\n            <th>Partition</th>\n            <th>Partition definition</th>\n            <th>Requested change</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map(({key, def, type}, index) => {\n            return (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{def}</td>\n                <td>\n                  {type === DynamicPartitionsRequestType.ADD_PARTITIONS ? (\n                    <Tag intent=\"success\">\n                      <span>Add Partition</span>\n                    </Tag>\n                  ) : (\n                    <Tag intent=\"danger\">\n                      <span>Delete Partition</span>\n                    </Tag>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Box>\n  );\n}\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Subheading,\n  Tag,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {RunRequestTable} from './DryRunRequestTable';\nimport {DynamicPartitionRequests} from './DynamicPartitionRequests';\nimport {RUN_REQUEST_FRAGMENT} from './RunRequestFragment';\nimport {gql, useMutation} from '../apollo-client';\nimport {\n  SensorDryRunMutation,\n  SensorDryRunMutationVariables,\n} from './types/SensorDryRunDialog.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {SET_CURSOR_MUTATION} from '../sensors/EditCursorDialog';\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from '../sensors/types/EditCursorDialog.types';\nimport {testId} from '../testing/testId';\nimport {RepoAddress} from '../workspace/types';\n\ntype DryRunInstigationTick = Extract<\n  SensorDryRunMutation['sensorDryRun'],\n  {__typename: 'DryRunInstigationTick'}\n>;\n\ntype Props = {\n  name: string;\n  onClose: () => void;\n  repoAddress: RepoAddress;\n  currentCursor: string;\n  isOpen: boolean;\n  jobName: string;\n};\n\nexport const SensorDryRunDialog = (props: Props) => {\n  const {isOpen, onClose, name} = props;\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      icon=\"sensors\"\n      title={name}\n    >\n      <SensorDryRun {...props} />\n    </Dialog>\n  );\n};\n\nconst SensorDryRun = ({repoAddress, name, currentCursor, onClose, jobName}: Props) => {\n  const [sensorDryRun] = useMutation<SensorDryRunMutation, SensorDryRunMutationVariables>(\n    EVALUATE_SENSOR_MUTATION,\n  );\n\n  const [cursor, setCursor] = useState(currentCursor);\n\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState<PythonErrorFragment | null>(null);\n  const [sensorExecutionData, setSensorExecutionData] = useState<DryRunInstigationTick | null>(\n    null,\n  );\n\n  const sensorSelector = useMemo(\n    () => ({\n      sensorName: name,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [repoAddress, name],\n  );\n\n  const submitTest = useCallback(async () => {\n    setSubmitting(true);\n    const result = await sensorDryRun({\n      variables: {\n        selectorData: sensorSelector,\n        cursor,\n      },\n    });\n    const data = result.data?.sensorDryRun;\n    if (data) {\n      if (data?.__typename === 'DryRunInstigationTick') {\n        if (data.evaluationResult?.error) {\n          setError(data.evaluationResult.error);\n        } else {\n          setSensorExecutionData(data);\n        }\n      } else if (data?.__typename === 'SensorNotFoundError') {\n        showCustomAlert({\n          title: 'Sensor not found',\n          body: `Could not find a sensor named: ${name}`,\n        });\n      } else {\n        setError(data);\n      }\n    } else {\n      assertUnreachable('sensorDryRun Mutation returned no data??' as never);\n    }\n    setSubmitting(false);\n  }, [sensorDryRun, sensorSelector, cursor, name]);\n\n  const buttons = useMemo(() => {\n    if (sensorExecutionData || error) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button\n            data-testid={testId('test-again')}\n            onClick={() => {\n              setSensorExecutionData(null);\n              setError(null);\n            }}\n          >\n            Test again\n          </Button>\n          <Button intent=\"primary\" onClick={onClose}>\n            Close\n          </Button>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button onClick={submitTest} intent=\"primary\" data-testid={testId('evaluate')}>\n            Evaluate\n          </Button>\n        </Box>\n      );\n    }\n  }, [sensorExecutionData, error, submitting, onClose, submitTest]);\n\n  const [cursorState, setCursorState] = useState<'Unpersisted' | 'Persisting' | 'Persisted'>(\n    'Unpersisted',\n  );\n  const [setCursorMutation] = useMutation<\n    SetSensorCursorMutation,\n    SetSensorCursorMutationVariables\n  >(SET_CURSOR_MUTATION);\n\n  const onPersistCursorValue = useCallback(async () => {\n    const cursor = sensorExecutionData?.evaluationResult?.cursor;\n    if (!cursor) {\n      assertUnreachable('Did not expect to get here' as never);\n    }\n    setCursorState('Persisting');\n    const {data} = await setCursorMutation({\n      variables: {sensorSelector, cursor},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      await showSharedToaster({message: 'Cursor value updated', intent: 'success'});\n      setCursorState('Persisted');\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      await showSharedToaster({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.accentReversed()}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n  }, [sensorExecutionData?.evaluationResult?.cursor, sensorSelector, setCursorMutation]);\n\n  const content = useMemo(() => {\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n      const dynamicPartitionRequests =\n        sensorExecutionData?.evaluationResult?.dynamicPartitionsRequests;\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Box>\n            <Grid>\n              <div>\n                <Subheading>Result</Subheading>\n                <Box flex={{grow: 1, alignItems: 'center'}}>\n                  <div>\n                    {error ? (\n                      <Tag intent=\"danger\">Failed</Tag>\n                    ) : numRunRequests ? (\n                      <Tag intent=\"success\">{numRunRequests} run requests</Tag>\n                    ) : (\n                      <Tag intent=\"warning\">Skipped</Tag>\n                    )}\n                  </div>\n                </Box>\n              </div>\n              <div>\n                <Subheading>Used cursor value</Subheading>\n                <pre>{cursor?.length ? cursor : 'None'}</pre>\n              </div>\n              <div>\n                <Subheading>Computed cursor value</Subheading>\n                <pre>\n                  {sensorExecutionData?.evaluationResult?.cursor?.length\n                    ? sensorExecutionData?.evaluationResult.cursor\n                    : error\n                      ? 'Error'\n                      : 'None'}\n                </pre>\n                {error ||\n                (currentCursor ?? '') ===\n                  (sensorExecutionData?.evaluationResult?.cursor ?? '') ? null : (\n                  <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                    <Button\n                      disabled={['Persisting', 'Persisted'].includes(cursorState)}\n                      loading={cursorState === 'Persisting'}\n                      onClick={onPersistCursorValue}\n                    >\n                      <span data-testid={testId('persist-cursor')}>\n                        {cursorState === 'Persisting'\n                          ? 'Persisting'\n                          : cursorState === 'Persisted'\n                            ? 'Persisted'\n                            : 'Persist computed cursor value'}\n                      </span>\n                    </Button>\n                    {cursorState === 'Persisted' ? (\n                      <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n                    ) : null}\n                  </Box>\n                )}\n              </div>\n            </Grid>\n            {error ? (\n              <div>\n                <PythonErrorInfo error={error} />\n              </div>\n            ) : null}\n            {didSkip ? (\n              <div>\n                <Subheading>Skip reason</Subheading>\n                <div>\n                  {sensorExecutionData?.evaluationResult?.skipReason || 'No skip reason was output'}\n                </div>\n              </div>\n            ) : null}\n            {numRunRequests && runRequests ? (\n              <RunRequestTable\n                runRequests={runRequests}\n                name={name}\n                jobName={jobName}\n                isJob={true}\n                repoAddress={repoAddress}\n              />\n            ) : null}\n            {dynamicPartitionRequests?.length ? (\n              <div style={{marginTop: '24px'}}>\n                <DynamicPartitionRequests requests={dynamicPartitionRequests} />\n              </div>\n            ) : null}\n          </Box>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Evaluating sensor</div>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>Cursor</div>\n          <TextInput\n            value={cursor}\n            onChange={(e) => setCursor(e.target.value)}\n            data-testid={testId('cursor-input')}\n          />\n          {currentCursor === '' || !currentCursor ? (\n            <Box padding={{top: 16, bottom: 32}} flex={{justifyContent: 'center'}}>\n              <NonIdealState\n                icon=\"no-results\"\n                title=\"You're not using a cursor\"\n                description={\n                  <span>\n                    Check our{' '}\n                    <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#idempotence-and-cursors\">\n                      sensor documentation\n                    </a>{' '}\n                    to learn how to use cursors\n                  </span>\n                }\n              />\n            </Box>\n          ) : null}\n        </Box>\n      );\n    }\n  }, [\n    sensorExecutionData,\n    error,\n    submitting,\n    currentCursor,\n    cursorState,\n    onPersistCursorValue,\n    name,\n    jobName,\n    repoAddress,\n    cursor,\n  ]);\n\n  return (\n    <>\n      <DialogBody>\n        <div style={{minHeight: '300px'}}>{content}</div>\n      </DialogBody>\n      <DialogFooter topBorder>{buttons}</DialogFooter>\n    </>\n  );\n};\n\nexport const EVALUATE_SENSOR_MUTATION = gql`\n  mutation SensorDryRunMutation($selectorData: SensorSelector!, $cursor: String) {\n    sensorDryRun(selectorData: $selectorData, cursor: $cursor) {\n      ... on DryRunInstigationTick {\n        timestamp\n        evaluationResult {\n          cursor\n          runRequests {\n            ...RunRequestFragment\n          }\n          skipReason\n          error {\n            ...PythonErrorFragment\n          }\n          dynamicPartitionsRequests {\n            ...DynamicPartitionRequestFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment DynamicPartitionRequestFragment on DynamicPartitionRequest {\n    partitionKeys\n    partitionsDefName\n    type\n  }\n\n  ${RUN_REQUEST_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  padding-bottom: 12px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n  margin-bottom: 12px;\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n","import {\n  Box,\n  Button,\n  FontFamily,\n  Heading,\n  Icon,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {EditCursorDialog} from './EditCursorDialog';\nimport {SensorMonitoredAssets} from './SensorMonitoredAssets';\nimport {SensorResetButton} from './SensorResetButton';\nimport {SensorSwitch} from './SensorSwitch';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AutomationTargetList} from '../automation/AutomationTargetList';\nimport {AutomationAssetSelectionFragment} from '../automation/types/AutomationAssetSelectionFragment.types';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {SensorDryRunDialog} from '../ticks/SensorDryRunDialog';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RepoAddress} from '../workspace/types';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\nexport const humanizeSensorInterval = (minIntervalSeconds?: number) => {\n  if (!minIntervalSeconds) {\n    minIntervalSeconds = 30; // should query sensor interval config when available\n  }\n  if (minIntervalSeconds < 60 || minIntervalSeconds % 60) {\n    return `~${minIntervalSeconds} sec`;\n  }\n  if (minIntervalSeconds === 3600) {\n    return `~1 hour`;\n  }\n  if (minIntervalSeconds < 3600 || minIntervalSeconds % 3600) {\n    return `~${minIntervalSeconds / 60} min`;\n  }\n  if (minIntervalSeconds === 86400) {\n    return `~1 day`;\n  }\n  if (minIntervalSeconds < 86400 || minIntervalSeconds % 86400) {\n    return `~${minIntervalSeconds / 3600} hours`;\n  }\n  return `~${minIntervalSeconds / 86400} days`;\n};\n\nexport const SensorDetails = ({\n  sensor,\n  repoAddress,\n  daemonHealth,\n  refreshState,\n  assetSelection,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  daemonHealth: boolean | null;\n  refreshState: QueryRefreshState;\n  assetSelection: AutomationAssetSelectionFragment | null;\n}) => {\n  const {\n    name,\n    sensorState: {status, ticks},\n    metadata,\n  } = sensor;\n\n  const {\n    permissions,\n    disabledReasons,\n    loading: loadingPermissions,\n  } = usePermissionsForLocation(repoAddress.location);\n  const {canUpdateSensorCursor} = permissions;\n\n  const [isCursorEditing, setCursorEditing] = useState(false);\n  const sensorSelector = {\n    sensorName: sensor.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const latestTick = ticks.length ? ticks[0] : null;\n  const cursor =\n    sensor.sensorState.typeSpecificData &&\n    sensor.sensorState.typeSpecificData.__typename === 'SensorData' &&\n    sensor.sensorState.typeSpecificData.lastCursor;\n\n  const [showTestTickDialog, setShowTestTickDialog] = useState(false);\n  const running = status === InstigationStatus.RUNNING;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Heading style={{display: 'flex', flexDirection: 'row', gap: 4}}>\n            <Link to=\"/automation\">Automation</Link>\n            <span>/</span>\n            {name}\n          </Heading>\n        }\n        icon=\"sensors\"\n        tags={\n          <Tag icon=\"sensors\">\n            Sensor in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n        right={\n          <Box margin={{top: 4}} flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n            <Tooltip\n              canShow={sensor.sensorType !== SensorType.STANDARD}\n              content=\"Testing not available for this sensor type\"\n              placement=\"top-end\"\n            >\n              <Button\n                disabled={sensor.sensorType !== SensorType.STANDARD}\n                onClick={() => {\n                  setShowTestTickDialog(true);\n                }}\n              >\n                Test sensor\n              </Button>\n            </Tooltip>\n          </Box>\n        }\n      />\n      <SensorDryRunDialog\n        isOpen={showTestTickDialog}\n        onClose={() => {\n          setShowTestTickDialog(false);\n        }}\n        currentCursor={cursor || ''}\n        name={sensor.name}\n        repoAddress={repoAddress}\n        jobName={sensor.targets?.[0]?.pipelineName || ''}\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {sensor.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{sensor.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <>\n                  <Box\n                    flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n                    style={{marginTop: '-2px'}}\n                  >\n                    <TimestampDisplay timestamp={latestTick.timestamp} timeFormat={TIME_FORMAT} />\n                    <TickStatusTag tick={latestTick} tickResultType=\"runs\" />\n                  </Box>\n                </>\n              ) : (\n                'Sensor has never run'\n              )}\n            </td>\n          </tr>\n          {sensor.nextTick && daemonHealth && running && (\n            <tr>\n              <td>Next tick</td>\n              <td>\n                <TimestampDisplay timestamp={sensor.nextTick.timestamp!} timeFormat={TIME_FORMAT} />\n              </td>\n            </tr>\n          )}\n          {(sensor.targets && sensor.targets.length) || assetSelection ? (\n            <tr>\n              <td>Target</td>\n              <TargetCell>\n                <AutomationTargetList\n                  targets={sensor.targets}\n                  repoAddress={repoAddress}\n                  assetSelection={assetSelection || null}\n                  automationType={sensor.sensorType}\n                />\n              </TargetCell>\n            </tr>\n          ) : null}\n          <tr>\n            <td>\n              <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                Running\n              </Box>\n            </td>\n            <td>\n              <Box\n                flex={{direction: 'row', gap: 12, alignItems: 'center'}}\n                style={{height: '32px'}}\n              >\n                <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n                {sensor.canReset && <SensorResetButton repoAddress={repoAddress} sensor={sensor} />}\n              </Box>\n            </td>\n          </tr>\n          <tr>\n            <td>Frequency</td>\n            <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n          </tr>\n          {metadata.assetKeys && metadata.assetKeys.length ? (\n            <tr>\n              <td>Monitored assets</td>\n              <td>\n                <SensorMonitoredAssets metadata={metadata} />\n              </td>\n            </tr>\n          ) : null}\n          {sensor.sensorType !== SensorType.AUTO_MATERIALIZE &&\n          sensor.sensorType !== SensorType.AUTOMATION ? (\n            <tr>\n              <td>\n                <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                  Cursor\n                </Box>\n              </td>\n              <td>\n                <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                  <span style={{fontFamily: FontFamily.monospace, fontSize: '14px'}}>\n                    {cursor ? cursor : 'None'}\n                  </span>\n                  <Tooltip\n                    canShow={!canUpdateSensorCursor}\n                    content={disabledReasons.canUpdateSensorCursor}\n                  >\n                    <Button\n                      icon={<Icon name=\"edit\" />}\n                      disabled={!canUpdateSensorCursor || loadingPermissions}\n                      onClick={() => setCursorEditing(true)}\n                    >\n                      Edit\n                    </Button>\n                  </Tooltip>\n                </Box>\n                <EditCursorDialog\n                  isOpen={isCursorEditing}\n                  sensorSelector={sensorSelector}\n                  cursor={cursor ? cursor : ''}\n                  onClose={() => setCursorEditing(false)}\n                />\n              </td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n\nconst TargetCell = styled.td`\n  button {\n    line-height: 20px;\n  }\n`;\n","import {gql} from '../apollo-client';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\n\nexport const SENSOR_FRAGMENT = gql`\n  fragment SensorFragment on Sensor {\n    id\n    name\n    description\n    minIntervalSeconds\n    sensorType\n    nextTick {\n      timestamp\n    }\n    defaultStatus\n    canReset\n    sensorState {\n      id\n      ...InstigationStateFragment\n    }\n    targets {\n      pipelineName\n      solidSelection\n      mode\n    }\n    metadata {\n      assetKeys {\n        path\n      }\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nexport type DaemonStatusForWarning = {\n  healthy: boolean | null;\n  required: boolean | null;\n};\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  sensorDaemonStatus?: DaemonStatusForWarning;\n  assetDaemonStatus?: DaemonStatusForWarning;\n};\n\nexport const SensorInfo = ({sensorDaemonStatus, assetDaemonStatus, ...boxProps}: Props) => {\n  const warnForSensor =\n    sensorDaemonStatus && sensorDaemonStatus.healthy === false && sensorDaemonStatus.required;\n  const warnForAssets =\n    assetDaemonStatus && !assetDaemonStatus.healthy === false && assetDaemonStatus.required;\n\n  if (!warnForAssets && !warnForSensor) {\n    return null;\n  }\n\n  const title = () => {\n    if (warnForSensor) {\n      if (warnForAssets) {\n        return 'The sensor and asset daemons are not running';\n      }\n      return 'The sensor daemon is not running';\n    }\n    return 'The asset daemon is not running';\n  };\n\n  return (\n    <Box {...boxProps}>\n      <Alert\n        intent=\"warning\"\n        title={title()}\n        description={\n          <div>\n            See the{' '}\n            <a\n              href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              dagster-daemon documentation\n            </a>{' '}\n            for more information on how to deploy the dagster-daemon process.\n          </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {CursorHistoryControls} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {gql} from '../apollo-client';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {\n  PreviousRunsForSensorQuery,\n  PreviousRunsForSensorQueryVariables,\n} from './types/SensorPreviousRuns.types';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {RunTable} from '../runs/RunTable';\nimport {RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTableRunFragment';\nimport {DagsterTag} from '../runs/RunTag';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst RUNS_LIMIT = 20;\n\nexport const SensorPreviousRuns = ({\n  sensor,\n  repoAddress,\n  highlightedIds,\n  tabs,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}) => {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PreviousRunsForSensorQuery,\n    PreviousRunsForSensorQueryVariables\n  >({\n    query: PREVIOUS_RUNS_FOR_SENSOR_QUERY,\n    variables: {\n      filter: {\n        tags: [\n          {key: DagsterTag.SensorName, value: sensor.name},\n          {key: DagsterTag.RepositoryLabelTag, value: repoAddressAsTag(repoAddress)},\n        ],\n      },\n    },\n    nextCursorForResult: (data) => {\n      if (data.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return data.pipelineRunsOrError.results[RUNS_LIMIT - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (data?.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    pageSize: RUNS_LIMIT,\n  });\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, !paginationProps.hasPrevCursor ? 10000 : 60 * 60 * 1000);\n\n  let data = queryResult.data;\n\n  if (!data || data?.pipelineRunsOrError.__typename !== 'Runs') {\n    // Use previous data to stop the screen from flashing while we wait for the next data to load\n    data = queryResult.previousData;\n  }\n  if (!data || data?.pipelineRunsOrError.__typename !== 'Runs') {\n    return null;\n  }\n\n  const runs = data.pipelineRunsOrError.results;\n  return (\n    <>\n      <RunTable\n        actionBarComponents={tabs}\n        runs={runs}\n        highlightedIds={highlightedIds}\n        hideCreatedBy={true}\n      />\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </>\n  );\n};\n\nconst PREVIOUS_RUNS_FOR_SENSOR_QUERY = gql`\n  query PreviousRunsForSensorQuery($filter: RunsFilter, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit, cursor: $cursor) {\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {Box, ButtonGroup, Colors, NonIdealState, Page, Spinner} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPreviousRuns} from './SensorPreviousRuns';\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n  SensorRootQuery,\n  SensorRootQueryVariables,\n} from './types/SensorRoot.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useMergedRefresh, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {AUTOMATION_ASSET_SELECTION_FRAGMENT} from '../automation/AutomationAssetSelectionFragment';\nimport {InstigationTickStatus, SensorType} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TickHistoryTimeline, TicksTable} from '../instigation/TickHistory';\nimport {TickResultType} from '../ticks/TickStatusTag';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nexport const SensorRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const {sensorName} = useParams<{sensorName: string}>();\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const variables = useMemo(() => {\n    if (timeRange || statuses) {\n      return {\n        afterTimestamp: timeRange?.[0],\n        beforeTimestamp: timeRange?.[1],\n        statuses,\n      };\n    }\n    return {};\n  }, [statuses, timeRange]);\n\n  const [selectedTab, setSelectedTab] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const queryResult = useQuery<SensorRootQuery, SensorRootQueryVariables>(SENSOR_ROOT_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const selectionQueryResult = useQuery<\n    SensorAssetSelectionQuery,\n    SensorAssetSelectionQueryVariables\n  >(SENSOR_ASSET_SELECTIONS_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState1 = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const refreshState2 = useQueryRefreshAtInterval(selectionQueryResult, FIFTEEN_SECONDS);\n  const refreshState = useMergedRefresh(refreshState1, refreshState2);\n\n  const {data, loading} = queryResult;\n\n  const tabs = (\n    <ButtonGroup\n      activeItems={new Set([selectedTab])}\n      buttons={[\n        {id: 'evaluations', label: 'Evaluations'},\n        {id: 'runs', label: 'Runs'},\n      ]}\n      onClick={(id: 'evaluations' | 'runs') => {\n        setSelectedTab(id);\n      }}\n    />\n  );\n\n  if (!data && loading) {\n    return (\n      <Box\n        margin={{top: 32}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'center', gap: 16}}\n      >\n        <Spinner purpose=\"body-text\" />\n        <div style={{color: Colors.textLight()}}>Loading sensor…</div>\n      </Box>\n    );\n  }\n\n  if (!data || data.sensorOrError.__typename === 'SensorNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"error\"\n          title={`Could not find sensor \\`${sensorName}\\` in definitions for \\`${repoAddress.name}\\``}\n        />\n      </Box>\n    );\n  }\n\n  const {sensorOrError} = data;\n  if (sensorOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={sensorOrError} />;\n  }\n\n  if (sensorOrError.__typename === 'UnauthorizedError') {\n    return <Redirect to=\"/overview/sensors\" />;\n  }\n\n  const {instance} = data;\n  const assetSelection =\n    selectionQueryResult.data?.sensorOrError.__typename === 'Sensor'\n      ? selectionQueryResult.data.sensorOrError.assetSelection\n      : null;\n\n  const isAutomationSensor =\n    sensorOrError.sensorType === SensorType.AUTO_MATERIALIZE ||\n    sensorOrError.sensorType === SensorType.AUTOMATION;\n\n  const sensorDaemonStatus = instance.daemonHealth.sensorDaemonStatus;\n\n  const tickResultType: TickResultType = isAutomationSensor ? 'materializations' : 'runs';\n\n  return (\n    <Page>\n      <SensorDetails\n        repoAddress={repoAddress}\n        sensor={sensorOrError}\n        daemonHealth={sensorDaemonStatus.healthy}\n        refreshState={refreshState}\n        assetSelection={assetSelection || null}\n      />\n      <SensorInfo\n        sensorDaemonStatus={sensorDaemonStatus}\n        padding={{vertical: 16, horizontal: 24}}\n      />\n      <TickHistoryTimeline\n        tickResultType={tickResultType}\n        repoAddress={repoAddress}\n        name={sensorOrError.name}\n        {...variables}\n      />\n      <Box margin={{top: 32}} border=\"top\">\n        {selectedTab === 'evaluations' ? (\n          <TicksTable\n            tabs={tabs}\n            tickResultType={tickResultType}\n            repoAddress={repoAddress}\n            name={sensorOrError.name}\n            setParentStatuses={setStatuses}\n            setTimerange={setTimerange}\n          />\n        ) : (\n          <SensorPreviousRuns repoAddress={repoAddress} sensor={sensorOrError} tabs={tabs} />\n        )}\n      </Box>\n    </Page>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      daemonHealth {\n        id\n        sensorDaemonStatus: daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n          required\n        }\n        ampDaemonStatus: daemonStatus(daemonType: \"ASSET\") {\n          id\n          healthy\n          required\n        }\n      }\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SENSOR_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nexport const SENSOR_ASSET_SELECTIONS_QUERY = gql`\n  query SensorAssetSelectionQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        assetSelection {\n          ...AutomationAssetSelectionFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${AUTOMATION_ASSET_SELECTION_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Button, Colors, Icon, Table, Tag} from '@dagster-io/ui-components';\n\nimport {applyCreateSession, useExecutionSessionStorage} from '../app/ExecutionSessionStorage';\nimport {RunRequestFragment} from './types/RunRequestFragment.types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {testId} from '../testing/testId';\nimport {useRepository} from '../workspace/WorkspaceContext/util';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  name: string;\n  runRequests: RunRequestFragment[];\n  repoAddress: RepoAddress;\n  isJob: boolean;\n  jobName: string;\n  mode?: string;\n};\n\nexport const RunRequestTable = ({runRequests, isJob, repoAddress, mode, jobName}: Props) => {\n  const repo = useRepository(repoAddress);\n\n  const body = (\n    <tbody data-testid={testId('table-body')}>\n      {runRequests.map((request, index) => {\n        return (\n          <tr key={index} data-testid={testId(request.runKey || '')}>\n            <td>\n              <Box flex={{alignItems: 'center', gap: 8}}>\n                <PipelineReference\n                  pipelineName={request.jobName ?? jobName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isJob}\n                  showIcon\n                  size=\"small\"\n                />\n              </Box>\n            </td>\n            <td>\n              <Box flex={{direction: 'row', gap: 8, wrap: 'wrap'}}>\n                {filterTags(request.tags).map(({key, value}) => (\n                  <Tag key={key}>{`${key}: ${value}`}</Tag>\n                ))}\n              </Box>\n            </td>\n            <td>\n              <OpenInLaunchpadButton\n                request={request}\n                mode={mode}\n                jobName={jobName}\n                repoAddress={repoAddress}\n                isJob={isJob}\n              />\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n  return (\n    <div>\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`, tableLayout: 'fixed'}}>\n        <thead>\n          <tr>\n            <th>{isJob ? 'Job' : 'Pipeline'} name</th>\n            <th>Tags</th>\n            <th>Configuration</th>\n          </tr>\n        </thead>\n        {body}\n      </Table>\n    </div>\n  );\n};\n\n// Filter out tags we already display in other ways\nfunction filterTags(tags: Array<{key: string; value: any}>) {\n  return tags.filter(({key}) => {\n    // Exclude the tag that specifies the schedule if this is a schedule name\n    return !['dagster/schedule_name'].includes(key);\n  });\n}\n\nfunction OpenInLaunchpadButton({\n  mode,\n  request,\n  jobName,\n  isJob,\n  repoAddress,\n}: {\n  request: RunRequestFragment;\n  jobName?: string;\n  mode?: string;\n  repoAddress: RepoAddress;\n  isJob: boolean;\n}) {\n  const pipelineName = request.jobName ?? jobName;\n  const [_, onSave] = useExecutionSessionStorage(repoAddress, pipelineName!);\n\n  return (\n    <Button\n      icon={<Icon name=\"edit\" />}\n      onClick={() => {\n        onSave((data) =>\n          applyCreateSession(data, {\n            mode,\n            runConfigYaml: request.runConfigYaml,\n            tags: request.tags,\n            assetSelection: request.assetSelection?.map(({path}) => ({\n              assetKey: {path},\n            })),\n          }),\n        );\n        window.open(\n          workspacePathFromAddress(\n            repoAddress,\n            `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/playground`,\n          ),\n          '_blank',\n        );\n      }}\n    >\n      Open in Launchpad\n    </Button>\n  );\n}\n","import {gql} from '../apollo-client';\n\nexport const RUN_REQUEST_FRAGMENT = gql`\n  fragment RunRequestFragment on RunRequest {\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n    runKey\n    jobName\n    assetSelection {\n      path\n    }\n  }\n`;\n","import {\n  BaseTag,\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Tag,\n  Tooltip,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {HistoryTickFragment} from '../instigation/types/InstigationUtils.types';\n\nexport type TickResultType = 'runs' | 'materializations';\n\ntype PropsForMaterializations = {\n  tick: Pick<HistoryTickFragment, 'status' | 'requestedAssetMaterializationCount' | 'error'>;\n  tickResultType: 'materializations';\n  isStuckStarted?: boolean;\n};\n\ntype PropsForRuns = {\n  tick: Pick<HistoryTickFragment, 'status' | 'skipReason' | 'runIds' | 'runKeys' | 'error'>;\n  tickResultType: 'runs';\n  isStuckStarted?: boolean;\n};\n\nexport const TickStatusTag = ({\n  tick,\n  tickResultType,\n  isStuckStarted,\n}: PropsForMaterializations | PropsForRuns) => {\n  const [showErrors, setShowErrors] = useState(false);\n  const tag = useMemo(() => {\n    const requestedItem = tickResultType === 'materializations' ? 'materialization' : 'run';\n    switch (tick.status) {\n      case InstigationTickStatus.STARTED:\n        return (\n          <Tag intent=\"primary\" icon={isStuckStarted ? undefined : 'spinner'}>\n            {isStuckStarted ? 'In progress' : 'Evaluating'}\n          </Tag>\n        );\n      case InstigationTickStatus.SKIPPED:\n        const tag = (\n          <BaseTag\n            fillColor={Colors.backgroundLighter()}\n            label={\n              tickResultType === 'materializations'\n                ? '0 materializations requested'\n                : '0 runs requested'\n            }\n          />\n        );\n        if ('runKeys' in tick && tick.runKeys.length) {\n          const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {tag}\n            </Tooltip>\n          );\n        }\n        if ('skipReason' in tick && tick.skipReason) {\n          return (\n            <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n              {tag}\n            </Tooltip>\n          );\n        }\n        return tag;\n      case InstigationTickStatus.FAILURE:\n        return (\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n            <Tag intent=\"danger\">Failure</Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  setShowErrors(true);\n                }}\n              >\n                View\n              </ButtonLink>\n            ) : null}\n          </Box>\n        );\n      case InstigationTickStatus.SUCCESS:\n        const count =\n          tickResultType === 'materializations'\n            ? tick.requestedAssetMaterializationCount\n            : tick.runIds.length;\n        const successTag = (\n          <Tag intent=\"success\">\n            {count} {requestedItem}\n            {ifPlural(count, '', 's')} requested\n          </Tag>\n        );\n        if ('runKeys' in tick && tick.runKeys.length > tick.runIds.length) {\n          const message = `${tick.runKeys.length} runs requested, but ${\n            tick.runKeys.length - tick.runIds.length\n          } skipped because the runs already exist for those requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {successTag}\n            </Tooltip>\n          );\n        }\n        return successTag;\n    }\n  }, [isStuckStarted, tick, tickResultType]);\n\n  return (\n    <>\n      {tag}\n      {tick.error ? (\n        <Dialog isOpen={showErrors} title=\"Error\" style={{width: '80vw'}}>\n          <DialogBody>\n            <PythonErrorInfo error={tick.error} />\n          </DialogBody>\n          <DialogFooter topBorder>\n            <Button\n              intent=\"primary\"\n              onClick={() => {\n                setShowErrors(false);\n              }}\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </Dialog>\n      ) : null}\n    </>\n  );\n};\n"],"names":["AUTOMATION_ASSET_SELECTION_FRAGMENT","gql","PYTHON_ERROR_FRAGMENT","DisclosureTriangleButton","isOpen","onToggle","param","jsx_runtime","jsx","UnstyledButton","onClick","e","style","cursor","width","Icon","name","transform","AutomationTargetList","assetSelection","automationType","targets","repoAddress","repo","useRepository","span","visibleTargets","filter","isHiddenAssetGroupJob","target","pipelineName","AssetSelectionTag","length","Box","flex","direction","gap","map","Tag","icon","tooltipText","PipelineReference","pipelineHrefContext","isJob","isThisThingAJob","div","color","Colors","showAssetSelection","setShowAssetSelection","useState","error","assetsOrError","__typename","sortedAssets","useMemo","nodes","slice","sort","a","b","COMMON_COLLATOR","compare","displayNameForAssetKey","key","assetsWithAMP","asset","definition","automationCondition","assetsWithoutAMP","assetSelectionString","isAllAssets","firstAsset","Link","to","assetDetailsPathForKey","jsxs","Fragment","Dialog","title","onClose","maxWidth","minWidth","canOutsideClickClose","canEscapeKeyClose","height","maxHeight","minHeight","SensorType","AUTO_MATERIALIZE","AUTOMATION","Section","titleBorder","assets","DialogFooter","topBorder","Button","intent","ButtonLink","showCustomAlert","body","PythonErrorInfo","setIsOpen","border","padding","right","vertical","Subtitle2","numberFormatter","format","overflowY","VirtualizedItemListForDialog","items","renderItem","VirtualizedSelectedAssetRow","id","itemBorders","horizontal","Caption","alignItems","overflow","MiddleTruncate","text","dayjs","relativeTime","COLOR_MAP","InstigationTickStatus","SUCCESS","FAILURE","STARTED","SKIPPED","HoverColorMap","timestampFormat","memoize","Intl","DateTimeFormat","navigator","language","hour","minute","second","hourCycle","timeZone","timezone","browserTimezone","timeZoneName","LiveTickTimeline","ticks","tickResultType","onHoverTick","onSelectTick","exactRange","timeRange","MINUTE","tickGrid","timeAfter","now","setNow","Date","isPaused","setPaused","useEffect","interval","setInterval","clearInterval","maxX","minX","fullRange","viewport","containerProps","useViewport","ticksReversed","tick","endTimestamp","reverse","ticksToDisplay","i","timestamp","startX","viewportWidth","endX","isStuckStartedTick","Math","max","timeTickGridDelta","tickGridDelta","startTickGridX","ceil","gridTicks","push","time","x","showLabel","useContext","TimeContext","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","marginRight","TicksWrapper","GridTick","concat","GridTickLine","GridTickTime","count","runIds","requestedAssetMaterializationCount","Tick","status","onMouseEnter","onMouseLeave","Tooltip","content","TickTooltip","NowIndicator","TimeAxisWrapper","memo","ifPlural","runs","startTime","endTime","elapsedTime","as","styled","withConfig","TickStatusDisplay","Chart","register","zoomPlugin","STATUS_DISPLAY_MAP","TicksTable","queryResult","tabs","setTimerange","setParentStatuses","tickStatus","setTickStatus","useQueryPersistedState","queryKey","defaults","instigationSelector","repoAddressToSelector","statuses","React","paginationProps","useCursorPaginatedQuery","nextCursorForResult","data","instigationStateOrError","PAGE_SIZE","getResultArray","variables","query","TICK_HISTORY_QUERY","pageSize","useQueryRefreshAtInterval","FIFTEEN_SECONDS","state","hasPrevCursor","start","end","undefined","Array","from","loading","reset","logTick","setLogTick","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","Spinner","purpose","justifyContent","NonIdealState","instigationType","TickLogDialog","StatusFilter","onChange","TableWrapper","thead","tr","th","InstigationType","SENSOR","tbody","index","TickRow","marginTop","CursorHistoryControls","label","activeItem","find","Select","popoverProps","position","filterable","itemRenderer","item","props","MenuItem","active","modifiers","handleClick","itemListRenderer","filteredItems","renderedItems","Boolean","Menu","onItemSelect","rightIcon","display","TickHistoryTimeline","onHighlightRunIds","beforeTimestamp","afterTimestamp","selectedTickId","setSelectedTickId","encode","tickId","decode","qs","pollingPaused","pausePolling","useQuery","limit","notifyOnNetworkStatusChange","top","Subheading","onTickClick","TickDetailsDialog","copyToClipboard","useCopyToClipboard","showResults","setShowResults","addedPartitions","deletedPartitions","requests","dynamicPartitionsRequestResults","countPartitionsAddedOrDeleted","DynamicPartitionsRequestType","ADD_PARTITIONS","DELETE_PARTITIONS","isStuckStarted","td","TimestampDisplay","timeFormat","showTimezone","showSeconds","TickStatusTag","TimeElapsed","startUnix","endUnix","fontFamily","FontFamily","monospace","fontSize","truncate","CopyButton","showSharedToaster","message","RunStatusLink","run","RUN_STATUS_FRAGMENT","TICK_TAG_FRAGMENT","HISTORY_TICK_FRAGMENT","button","IconWrapper","Table","str","TRUNCATION_THRESHOLD","THREE_DAYS","type","reduce","sum","request","partitionKeys","SCHEDULE_ASSET_SELECTIONS_QUERY","SensorMonitoredAssets","metadata","assetKeys","AssetLink","path","join","SensorResetButton","sensor","permissions","canStartSensor","canStopSensor","usePermissionsForLocation","location","sensorSelector","sensorName","resetSensor","toggleOnInFlight","useMutation","RESET_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","hasPermission","tooltipContent","defaultStatus","DEFAULT_DISABLED_REASON","wordBreak","disabled","DynamicPartitionRequests","includeTitle","rows","forEach","partitionsDefName","def","grow","borderRight","SensorDryRunDialog","SensorDryRun","sensorExecutionData","currentCursor","jobName","sensorDryRun","EVALUATE_SENSOR_MUTATION","setCursor","submitting","setSubmitting","setError","setSensorExecutionData","repositoryLocationName","repositoryName","submitTest","useCallback","result","selectorData","evaluationResult","assertUnreachable","buttons","data-testid","testId","cursorState","setCursorState","setCursorMutation","SET_CURSOR_MUTATION","onPersistCursorValue","setSensorCursor","Group","spacing","underline","runRequests","numRunRequests","didSkip","dynamicPartitionRequests","dynamicPartitionsRequests","Grid","pre","includes","skipReason","RunRequestTable","TextInput","value","bottom","description","href","DialogBody","RUN_REQUEST_FRAGMENT","TIME_FORMAT","humanizeSensorInterval","minIntervalSeconds","SensorDetails","daemonHealth","refreshState","sensorState","disabledReasons","loadingPermissions","canUpdateSensorCursor","isCursorEditing","setCursorEditing","latestTick","typeSpecificData","lastCursor","showTestTickDialog","setShowTestTickDialog","running","InstigationStatus","RUNNING","PageHeader","Heading","flexDirection","tags","RepositoryLink","margin","QueryRefreshCountdown","canShow","sensorType","STANDARD","placement","MetadataTableWIP","nextTick","TargetCell","SensorSwitch","canReset","EditCursorDialog","SENSOR_FRAGMENT","INSTIGATION_STATE_FRAGMENT","SensorInfo","sensorDaemonStatus","assetDaemonStatus","boxProps","warnForSensor","healthy","required","warnForAssets","Alert","rel","SensorPreviousRuns","highlightedIds","PREVIOUS_RUNS_FOR_SENSOR_QUERY","DagsterTag","SensorName","RepositoryLabelTag","repoAddressAsTag","pipelineRunsOrError","results","RUNS_LIMIT","previousData","RunTable","actionBarComponents","hideCreatedBy","paddingBottom","RUN_TABLE_RUN_FRAGMENT","SensorRoot","selectionQueryResult","useTrackPageView","useParams","useDocumentTitle","setStatuses","selectedTab","setSelectedTab","view","raw","SENSOR_ROOT_QUERY","SENSOR_ASSET_SELECTIONS_QUERY","refreshState1","refreshState2","useMergedRefresh","ButtonGroup","activeItems","Set","sensorOrError","Redirect","instance","isAutomationSensor","Page","INSTANCE_HEALTH_FRAGMENT","mode","runKey","showIcon","size","wrap","filterTags","OpenInLaunchpadButton","tableLayout","_","onSave","useExecutionSessionStorage","applyCreateSession","runConfigYaml","assetKey","window","open","workspacePathFromAddress","showErrors","setShowErrors","tag","requestedItem","BaseTag","fillColor","runKeys","targetTagName","successTag"],"sourceRoot":""}