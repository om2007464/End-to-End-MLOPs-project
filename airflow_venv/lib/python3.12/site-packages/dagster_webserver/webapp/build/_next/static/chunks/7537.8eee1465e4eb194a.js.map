{"version":3,"file":"static/chunks/7537.8eee1465e4eb194a.js","mappings":"sUAeAA,IAAAA,MAAY,CAACC,KAEb,IAAMC,EAAY,CAChB,CAACC,EAAAA,GAAqBA,CAACC,OAAO,CAAC,CAAEC,EAAAA,EAAkB,GACnD,CAACF,EAAAA,GAAqBA,CAACG,OAAO,CAAC,CAAED,EAAAA,EAAgB,GACjD,CAACF,EAAAA,GAAqBA,CAACI,OAAO,CAAC,CAAEF,EAAAA,EAAqB,GACtD,CAACF,EAAAA,GAAqBA,CAACK,OAAO,CAAC,CAAEH,EAAAA,EAAyB,EAC5D,EAEMI,EAAgB,CACpB,CAACN,EAAAA,GAAqBA,CAACC,OAAO,CAAC,CAAEC,EAAAA,EAAuB,GACxD,CAACF,EAAAA,GAAqBA,CAACG,OAAO,CAAC,CAAED,EAAAA,EAAqB,GACtD,CAACF,EAAAA,GAAqBA,CAACI,OAAO,CAAC,CAAEF,EAAAA,EAA0B,GAC3D,CAACF,EAAAA,GAAqBA,CAACK,OAAO,CAAC,CAAEH,EAAAA,EAAsB,EACzD,EAQMK,EAAkBC,IAAQ,GACvB,IAAIC,KAAKC,cAAc,CAACC,UAAUC,QAAQ,CAAE,CACjDC,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,UAAW,MACXC,SAAUC,cAAAA,EAA2BC,CAAAA,EAAAA,EAAAA,EAAAA,IAAoBD,EACzDE,aAAc,OAChB,IAEWC,EAAmB,OAA0D,CACxFC,MAAAA,CAAK,CACLC,eAAAA,CAAc,CACdC,YAAAA,CAAW,CACXC,aAAAA,CAAY,CACZC,WAAAA,CAAU,CACVC,UAAAA,EAAYC,GAAU,CACtBC,SAAAA,EAnBa,GAmBI,CACjBC,UAAAA,EApBa,GAoBK,CAUnB,CAAAC,EACO,CAACC,EAAKC,EAAO,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAiBC,KAAKH,GAAG,IACzC,CAACI,EAAUC,EAAU,CAAGH,CAAAA,EAAAA,EAAAA,QAAAA,EAAkB,IAEhDI,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR,GAAI,CAACF,GAAY,CAACV,EAAY,CAC5B,IAAMa,EAAWC,YAAY,KAC3BP,EAAOE,KAAKH,GAAG,GACjB,EA1CmB,KA2CnB,MAAO,IAAMS,cAAcF,EAC7B,CACA,MAAO,KAAO,CAChB,EAAG,CAACb,EAAYU,EAAS,EAEzB,IAAMM,EAAOhB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,CAAY,CAAC,EAAE,EAAGA,IAAAA,CAAU,CAAC,EAAE,CAAUM,EAAMF,EACtDa,EAAOjB,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,CAAY,CAAC,EAAE,EAAGA,IAAAA,CAAU,CAAC,EAAE,CAAUM,EAAML,EAEtDiB,EAAYF,EAAOC,EAEnB,CAACE,SAAAA,CAAQ,CAAEC,eAAAA,CAAc,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,IAE7BC,EAAgBC,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,IAErB3B,EAAM4B,MAAM,CAAC,GAAU,CAACC,EAAKC,YAAY,EAAID,IAAAA,EAAKC,YAAY,CAAUT,GAAMU,OAAO,GAC3F,CAAC/B,EAAOqB,EAAK,EAEVW,EAAiBL,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,IACtBD,EAAcO,GAAG,CAAC,CAACJ,EAAMK,SAmNtBC,EAAAA,EAlNR,IAAMC,GAkNED,EAlNY,IAAON,EAAKM,SAAS,CAmNtCE,EAnNkDC,KAAK,CAmNrCH,CAAAA,EAnNuCd,CAmN3BA,EAnNiCC,GAM5DiB,GA4MEJ,EAjNaK,CAAAA,EAAAA,EAAAA,EAAAA,EAAmBX,EAAMH,EAAce,MAAM,CAAGP,EAAI,GACrEL,EAAKM,SAAS,CACdN,EAAKC,YAAY,CACfD,IAAAA,EAAKC,YAAY,CACjBpB,EA8MH2B,EA7MsCC,KAAK,CA6MzBH,CAAAA,EA7M2Bd,CA6MfA,EA7MqBC,GACtD,MAAO,CACL,GAAGO,CAAI,CACPS,MAAOI,KAAKC,GAAG,CAACJ,EAAOH,EArEb,GAsEVA,OAAAA,CACF,CACF,GAEC,CAACf,EAAMX,EAAKgB,EAAeJ,EAAWC,EAASe,KAAK,CAAC,EAElDM,EAAoBF,KAAKC,GAAG,CAAC,CAACvB,EAAOC,CAAAA,EAAQ,GAAId,GACjDsC,EAAgBD,EAAoB,EACpCE,EAAiBJ,KAAKK,IAAI,CAAC1B,EAAOwB,GAAiBA,EACnDG,EAAYrB,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KACxB,IAAM3B,EAAQ,EAAE,CAChB,IAAK,IAAIkC,EAAIY,EAAgBZ,GAAKd,EAAMc,GAAKW,EAC3C7C,KA4LQmC,EA5LRnC,EAAMiD,IAAI,CAAC,CACTC,KAAMhB,EACNiB,CAAAA,EA0LMhB,EA1LED,EA2LPG,EA3LmBC,KAAK,CA2LNH,CAAAA,EA3LQd,CA2LIA,EA3LEC,GACjC8B,UAAWlB,EAAIU,GAAsB,CACvC,GAEF,OAAO5C,CACT,EAAG,CAACoB,EAAM0B,EAAgBD,EAAetB,EAASe,KAAK,CAAEjB,EAAMC,EAAWsB,EAAkB,EAEtF,CACJhD,SAAU,CAACA,EAAS,CACrB,CAAGyD,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,EAAWA,EAE1B,MACE,GAAAC,EAAAC,GAAA,EAACC,MAAAA,CAAIC,MAAO,CAACC,YAAa,KAAK,WAC7B,GAAAJ,EAAAK,IAAA,EAACH,MAAAA,CAAK,GAAGjC,CAAc,WACrB,GAAA+B,EAAAK,IAAA,EAACC,EAAAA,WACEb,EAAUf,GAAG,CAAC,GACb,GAAAsB,EAAAK,IAAA,EAACE,EAAAA,CAECJ,MAAO,CACLK,UAAW,cAAqBC,MAAA,CAAPnC,EAAKsB,CAAC,CAAC,MAClC,YAEA,GAAAI,EAAAC,GAAA,EAACS,EAAAA,CAAAA,GACApC,EAAKuB,SAAS,CACb,GAAAG,EAAAC,GAAA,EAACU,EAAAA,UACC,GAAAX,EAAAC,GAAA,EAACW,EAAAA,EAAOA,CAAAA,UAAElF,EAAgBW,GAAUwE,MAAM,CAAC,IAAIvD,KAAKgB,EAAKqB,IAAI,OAE7D,OAVCrB,EAAKqB,IAAI,GAajBlB,EAAeC,GAAG,CAAC,QAIZJ,EAFH5B,EADH,IAAMoE,EACJ,OAACpE,CAAAA,EAAAA,qBAAAA,GAA2C,WAAY4B,EACb,OACvCA,CAAAA,EAAAA,EAAKyC,MAAM,GAAXzC,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAaY,MAAM,CADnBZ,EAAK0C,kCAAkC,GAD1CtE,KAAAA,IAAAA,EAAAA,EAE2B,EAC9B,MACE,GAAAsD,EAAAC,GAAA,EAACgB,EAAAA,CAECd,MAAO,CACLK,UAAW,cAA0BC,MAAA,CAAZnC,EAAKO,MAAM,CAAC,OACrCE,MAAO,GAAc0B,MAAA,CAAXnC,EAAKS,KAAK,CAAC,KACvB,EACAmC,OAAQ5C,EAAK4C,MAAM,CACnBC,aAAc,KACZxE,EAAY2B,GACZd,EAAU,GACZ,EACA4D,aAAc,KACZzE,IACAa,EAAU,GACZ,EACA6D,QAAS,KACPzE,EAAa0B,EACf,WAEA,GAAA0B,EAAAC,GAAA,EAACqB,EAAAA,CAAOA,CAAAA,CAACC,QAAS,GAAAvB,EAAAC,GAAA,EAACuB,EAAAA,CAAYlD,KAAMA,EAAM5B,eAAgBA,aACzD,GAAAsD,EAAAC,GAAA,EAACC,MAAAA,CAAIC,MAAO,CAACpB,MAAOT,EAAKS,KAAK,CAAG,KAAM0C,OAAQ,MAAM,WAClDX,EAAQ,EAAIA,EAAQ,UApBpBxC,EAAKoD,EAAE,CAyBlB,GACA,GAAA1B,EAAAC,GAAA,EAAC0B,EAAAA,CACCxB,MAAO,CACLK,UAAW,cAAyDC,MAAA,CA0HzE3B,EA1HiDC,KAAK,CA0HpCH,CAAAA,EA1HsCd,CA0H1BA,EA1HgCC,EAAW,MACtE,OAGJ,GAAAiC,EAAAC,GAAA,EAAC2B,EAAAA,CAAAA,OAIT,EAEMJ,EAAcK,CAAAA,EAAAA,EAAAA,IAAAA,EAClB,OAAC,CACCvD,KAAAA,CAAI,CACJ5B,eAAAA,CAAc,CAIf,CAAAQ,EACOgE,EAAS9C,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,SAcTE,EAAsCA,SAblD,EAAS4C,MAAM,GAAK/F,EAAAA,GAAqBA,CAACG,OAAO,CACxC,oBAELgD,EAAK4C,MAAM,GAAK/F,EAAAA,GAAqBA,CAACI,OAAO,CACxC,cAELmB,qBAAAA,GAA2C,SAAU4B,EAOhD,GAAgCwD,MAAAA,CAA7BxD,CAAAA,OAAAA,CAAAA,EAAAA,EAAKyD,IAAI,GAATzD,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAWY,MAAM,GAAI,EAAE,QAA2CuB,MAAA,CAArCqB,CAAAA,EAAAA,EAAAA,CAAAA,EAAQA,OAACxD,CAAAA,EAAAA,EAAKyD,IAAI,GAATzD,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAWY,MAAM,CAAE,GAAI,KAAK,cANrE,GAA6D4C,MAAAA,CAA1DxD,EAAK0C,kCAAkC,CAAC,oBAIhDP,MAAA,CAJkEqB,CAAAA,EAAAA,EAAAA,CAAAA,EAClExD,EAAK0C,kCAAkC,CACvC,GACA,KACA,aAIN,EAAG,CAAC1C,EAAM5B,EAAe,EACnBsF,EAAYhH,IAAM,IAAOsD,EAAKM,SAAS,EACvCqD,EAAUjH,IAAMsD,EAAKC,YAAY,CAAG,IAAOD,EAAKC,YAAY,CAAGjB,KAAKH,GAAG,IACvE+E,EAAcF,EAAUG,EAAE,CAACF,EAAS,IAC1C,MACE,GAAAjC,EAAAK,IAAA,EAACH,MAAAA,WACC,GAAAF,EAAAK,IAAA,EAACO,EAAAA,EAAOA,CAAAA,CAACwB,GAAG,gBACTlB,EAAO,KAAGgB,EAAY,OAExB5D,EAAK4C,MAAM,GAAK/F,EAAAA,GAAqBA,CAACI,OAAO,CAAG,KAC/C,GAAAyE,EAAAC,GAAA,EAACW,EAAAA,EAAOA,CAAAA,CAACyB,MAAOhH,EAAAA,CAAgB,YAAI,wBAI5C,GAGIiF,EAAegC,EAAAA,EAAMA,CAACpC,GAAG,CAAAqC,UAAA,iHAIFlH,EAAAA,EAAqB,IAG5CuG,EAAkBU,EAAAA,EAAMA,CAACpC,GAAG,CAAAqC,UAAA,kDAI5BtB,EAAOqB,EAAAA,EAAMA,CAACpC,GAAG,CAAAqC,UAAA,6LAWZlH,EAAAA,EAAwB,GAC/B,OAAC,CAAC6F,OAAAA,CAAM,CAAC,CAAAhE,QAAK,qBAGEzB,MAAAA,CAFFP,CAAS,CAACgG,EAAO,CAAC,wCAEMT,MAAA,CAAtBhF,CAAa,CAACyF,EAAO,CAAC,kBAKpCX,EAAW+B,EAAAA,EAAMA,CAACpC,GAAG,CAAAqC,UAAA,iGAMrB7B,EAAe4B,EAAAA,EAAMA,CAACpC,GAAG,CAAAqC,UAAA,mGAKflH,EAAAA,EAAqB,IAE/BsF,EAAe2B,EAAAA,EAAMA,CAACpC,GAAG,CAAAqC,UAAA,2GAQzBZ,EAAeW,EAAAA,EAAMA,CAACpC,GAAG,CAAAqC,UAAA,oNAKflH,EAAAA,EAAoB,GAKlBA,EAAAA,EAAoB,GACzBA,EAAAA,EAAqB,2HC5R3B,IAAMmH,EAAW,GACtBC,EAAIvD,MAAM,CANiB,IAOvB,GAA0DuB,MAAA,CAAvDgC,EAAIC,KAAK,CAAC,EAAGC,IAA0C,KAC1DF,EAEC,SAASxD,EACdX,CAAoE,CACpEsE,CAAa,EAEb,MACE,CAACtE,EAAKC,YAAY,EAGjBqE,CAAAA,IAAAA,GAAgBtE,EAAK4C,MAAM,GAAK/F,EAAAA,GAAqBA,CAACI,OAAO,EAC5D+C,IAAAA,EAAKM,SAAS,CAAUtB,KAAKH,GAAG,GAhBnB,MAgBwB0F,CAE3C,CAEO,SAASC,EACdC,CAA0E,CAC1EC,CAAkC,EAElC,OAAOD,EAASE,MAAM,CAAC,CAACC,EAAKC,KAC3B,GAAIA,EAAQH,IAAI,GAAKA,EAAM,KACXG,EAAd,OAAOD,EAAOC,CAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EAAQC,aAAa,GAArBD,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuBjE,MAAM,GAAI,EACjD,CACA,OAAOgE,CACT,EAAG,EACL,8GagFYG,uXZhFL,IAAMC,EAAqB,OAAC,CAACC,OAAAA,CAAM,CAAEC,UAAAA,CAAS,CAAQ,CAAAtG,EAC3DuG,CAAAA,EAAAA,EAAAA,EAAAA,IACAC,CAAAA,EAAAA,EAAAA,CAAAA,EAAiB,qBAEjB,GAAM,CAACC,OAAAA,CAAM,CAAEC,MAAAA,CAAK,CAAEC,MAAAA,CAAK,CAAEC,QAAAA,CAAO,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,IAClCC,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B,CAC7CC,QAASN,EACTO,WAAYC,EAAAA,EAAeA,CAC3BC,QAAS,EACX,GAEMC,EAA0BC,EAAAA,OAAa,CAAC,IAC5C,EACSC,SAsHQb,CAAc,EACjC,IAAMc,EAOF,CAAC,EAiBL,OAfAd,EAAOe,OAAO,CAAC,IACb,GAAI,CAACC,EAAMC,UAAU,CACnB,OAEF,IAAMC,EAAYF,EAAMC,UAAU,CAACC,SAAS,CACtCC,EAAiBH,EAAMC,UAAU,CAACG,UAAU,CAACC,IAAI,CACjDC,EAAM,GAAiBH,MAAAA,CAAdD,EAAU,MAAmBpE,MAAA,CAAfqE,GACvBI,EAAST,CAAM,CAACQ,EAAI,EAAI,CAC5BJ,UAAAA,EACAC,eAAAA,EACAnB,OAAQ,EAAE,EAEZuB,EAAOvB,MAAM,CAACjE,IAAI,CAACiF,GACnBF,CAAM,CAACQ,EAAI,CAAGC,CAChB,GACOC,OAAOC,MAAM,CAACX,EACvB,EAhJyBd,GAEd,EAAE,CACR,CAACA,EAAO,EAEL,CAAC0B,EAAaC,EAAe,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,EAA+B,CACnEC,SAAU,IACVC,OAAQ,GAASC,EAAGC,WAAW,CAAGC,KAAKC,KAAK,CAACH,EAAGC,WAAW,EAAI,GAC/DG,OAAQ,GAAkB,EAACH,YAAaA,EAAcC,KAAKG,SAAS,CAACJ,GAAeK,KAAAA,CAAS,EAC/F,GAEMC,EAAgB1B,EAAAA,OAAa,CAAC,IAClC,KAAIc,EACKf,EAEFA,EAAwBjG,MAAM,CAAC,GAElC,CAAC6H,EAAMrB,SAAS,EAAIsB,CAAAA,EAAkBC,WAAW,GAAGC,QAAQ,CAAChB,EAAYe,WAAW,KACpFF,EAAMpB,cAAc,CAACsB,WAAW,GAAGC,QAAQ,CAAChB,EAAYe,WAAW,KAGtE,CAAC9B,EAAyBe,EAAY,EAEnCiB,EAAgB/B,EAAAA,OAAa,CACjC,SAAM0B,SAAAA,OAAAA,CAAAA,EAAAA,EAAcM,OAAO,CAAC,GAAWL,EAAMvC,MAAM,CAACjF,GAAG,CAAC,GAAWiG,EAAMM,GAAG,KAAtEgB,KAAAA,IAAAA,EAAAA,EAA4E,EAAE,EACpF,CAACA,EAAc,EAEjBO,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBF,EAAe,sBAEjC,IAAMG,EAAYlC,EAAAA,MAAY,CAAwB,MAEhDmC,EAAiBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACpC7F,MAAOmF,EAAc/G,MAAM,CAC3B0H,iBAAkB,IAAMH,EAAUI,OAAO,CACzCC,aAAc,IAAM,GACpBC,SAAU,CACZ,GAEMC,EAAcN,EAAeO,YAAY,GACzCC,EAAQR,EAAeS,eAAe,GAuC5C,MACE,GAAAC,EAAA/G,IAAA,EAAA+G,EAAAC,QAAA,YACE,GAAAD,EAAA/G,IAAA,EAACH,MAAAA,CAAIC,MAAO,CAACmH,SAAU,SAAUC,IAAK,EAAGC,OAAQ,CAAC,YAChD,GAAAJ,EAAAnH,GAAA,EAACsD,EAAAA,CAAOS,aAAcA,IACtB,GAAAoD,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CACFC,QAAS,CAACC,WAAY,GAAIC,SAAU,EAAE,EACtCC,KAAM,CAACC,WAAY,SAAUC,IAAK,GAAIC,KAAM,CAAC,YAE7C,GAAAZ,EAAAnH,GAAA,EAACuD,EAAAA,CAAUyE,SAAS,WACpB,GAAAb,EAAAnH,GAAA,EAACiI,EAAAA,EAASA,CAAAA,CACRC,MAAO9C,EACP+C,SAAU,IACR9C,EAAe+C,EAAEnD,MAAM,CAACiD,KAAK,CAC/B,EACAG,YAAY,4BAGhB,GAAAlB,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,WAAY,GAAIC,SAAU,EAAE,EAAGW,OAAO,eACnD,GAAAnB,EAAAnH,GAAA,EAACuI,EAAAA,CAAKA,CAAAA,CACJC,OAAO,OACPC,MAAM,0DACNC,YACE,GAAAvB,EAAA/G,IAAA,EAAA+G,EAAAC,QAAA,YAAE,WACQ,GAAAD,EAAAnH,GAAA,EAAC2I,EAAAA,EAAIA,CAAAA,CAACzG,GAAG,yBAAgB,8BAAgC,mDA3D7E,EAEI,GAAAiF,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CACFI,KAAM,CAACC,WAAY,SAAUe,eAAgB,SAAUC,UAAW,SAAUd,KAAM,CAAC,EACnF7H,MAAO,CAACpB,MAAO,MAAM,WAErB,GAAAqI,EAAAnH,GAAA,EAAC8I,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAInBnF,EAEA,GAAAuD,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CACFI,KAAM,CAACC,WAAY,SAAUe,eAAgB,SAAUC,UAAW,SAAUd,KAAM,CAAC,EACnF7H,MAAO,CAACpB,MAAO,MAAM,WAErB,GAAAqI,EAAAnH,GAAA,EAACgJ,EAAAA,EAAeA,CAAAA,CAACpF,MAAOA,MAM5B,GAAAuD,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,QAAQ,EAAG3I,MAAO,CAAC+I,SAAU,QAAQ,WAC1D,GAAA9B,EAAA/G,IAAA,EAAC8I,EAAAA,EAASA,CAAAA,CAACC,IAAK3C,YACd,GAAAW,EAAAnH,GAAA,EAACoJ,EAAAA,CAAAA,GACD,GAAAjC,EAAAnH,GAAA,EAACqJ,EAAAA,EAAKA,CAAAA,CAACC,aAAcvC,WAClBE,EAAMxI,GAAG,CAAC,OAAC,CAACkE,MAAAA,CAAK,CAAEqC,IAAAA,CAAG,CAAEuE,KAAAA,CAAI,CAAEC,MAAAA,CAAK,CAAC,CAAAvM,EAC7BgJ,EAAQD,CAAa,CAACrD,EAAM,CAClC,MAAO,GAAAwE,EAAAnH,GAAA,EAACyJ,EAAAA,CAAqBD,MAAOA,EAAOhI,OAAQ+H,EAAMtD,MAAOA,GAAxCjB,EAC1B,YAwCZ,EAmCM0E,EAAmB,sBAEnBN,EAAmB,IACvB,GAAAjC,EAAA/G,IAAA,EAACuJ,EAAAA,EAASA,CAAAA,CAACC,gBAAiBF,EAAkBG,OAAM,aAClD,GAAA1C,EAAAnH,GAAA,EAAC8J,EAAAA,EAAUA,CAAAA,UAAC,eACZ,GAAA3C,EAAAnH,GAAA,EAAC8J,EAAAA,EAAUA,CAAAA,UAAC,YACZ,GAAA3C,EAAAnH,GAAA,EAAC8J,EAAAA,EAAUA,CAAAA,UAAC,mBACZ,GAAA3C,EAAAnH,GAAA,EAAC8J,EAAAA,EAAUA,CAAAA,UAAC,gBACZ,GAAA3C,EAAAnH,GAAA,EAAC8J,EAAAA,EAAUA,CAAAA,UAAC,oBAIV5D,EAAmB,mBAMzB,SAASuD,EAAWxM,CAAgC,MAYrCgJ,EAAAA,KAZK,CAACzE,OAAAA,CAAM,CAAEgI,MAAAA,CAAK,CAAEvD,MAAAA,CAAK,CAAW,CAAhChJ,EACZ8M,EAAYzF,EAAAA,OAAa,CAC7B,IAAM2B,EAAMvC,MAAM,CAACjF,GAAG,CAAC,GAAY,EAACuL,KAAMtF,EAAMM,GAAG,CAACgF,IAAI,IACxD,CAAC/D,EAAMvC,MAAM,CAAC,EAGV,CAACuG,eAAAA,CAAc,CAAC,CAAG1D,CAAAA,EAAAA,EAAAA,EAAAA,EAAkBwD,GAErCG,EAAW5F,EAAAA,OAAa,CAAC,IACtB6F,CAAAA,EAAAA,EAAAA,CAAAA,EAAoBlE,EAAMvC,MAAM,CAAEuG,GACxC,CAACA,EAAgBhE,EAAMvC,MAAM,CAAC,EAE3B0G,EAAAA,OAAOnE,CAAAA,EAAAA,EAAMvC,MAAM,CAAC2G,IAAI,CAAC,QAAW3F,SAAgB,OAAhBA,CAAAA,EAAAA,EAAMC,UAAU,GAAhBD,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkBI,UAAU,KAAzDmB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAA4DtB,UAAU,GAAtEsB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAwEnB,UAAU,CACzFwF,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,EAAiBH,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMrF,IAAI,GAAI,GAAIqF,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMI,QAAQ,CAACzF,IAAI,GAAI,IAExE,CAAC/G,eAAAA,CAAc,CAAED,SAAAA,CAAQ,CAAC,CAAGE,CAAAA,EAAAA,EAAAA,CAAAA,IAE7BwM,EAAsBV,EAAU9K,MAAM,GAAKiG,OAAOwF,IAAI,CAACT,GAAgBhL,MAAM,CAC7E0L,EAAcF,EAAsB,GAAK,IAE/C,MACE,GAAAtD,EAAAnH,GAAA,EAAC4K,EAAAA,EAAGA,CAAAA,CAACC,QAASrJ,EAAQsJ,OAAQtB,WAC5B,GAAArC,EAAA/G,IAAA,EAAC2K,EAAAA,CAAQzC,OAAO,mBACd,GAAAnB,EAAAnH,GAAA,EAACgL,EAAAA,UACC,GAAA7D,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOD,eAAgB,gBAAiBb,KAAM,CAAC,YACpE,GAAAZ,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,SAAUf,IAAK,EAAGC,KAAM,CAAC,YAC9C,GAAAZ,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOf,IAAK,CAAC,YAClC,GAAAX,EAAAnH,GAAA,EAACiL,EAAAA,EAAIA,CAAAA,CAAClG,KAAK,gBACVkB,EAAMrB,SAAS,CACd,GAAAuC,EAAAnH,GAAA,EAAC2I,EAAAA,EAAIA,CAAAA,CACHzI,MAAO,CAACgL,WAAY,GAAG,EACvBhJ,GAAIiJ,CAAAA,EAAAA,EAAAA,EAAAA,EAAyBb,EAAa,iBAAiC9J,MAAA,CAAhByF,EAAMrB,SAAS,YAEzEqB,EAAMrB,SAAS,GAGlBsB,KAGJ,GAAAiB,EAAAnH,GAAA,EAACC,MAAAA,CAAK,GAAGjC,CAAc,UACrB,GAAAmJ,EAAAnH,GAAA,EAACoL,EAAAA,CAAsBC,SAAUtN,EAASe,KAAK,UAC7C,GAAAqI,EAAAnH,GAAA,EAACsL,EAAAA,CAAcA,CAAAA,CAAChB,YAAaA,EAAaiB,YAAa,YAI7D,GAAApE,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,SAAUD,eAAgB,QAAQ,WACtD6B,EAAsB,GAAAtD,EAAAnH,GAAA,EAAC8I,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cAAiB,YAI/D,GAAA5B,EAAAnH,GAAA,EAACgL,EAAAA,UACEd,EAASsB,OAAO,CAACvM,MAAM,CACtB,GAAAkI,EAAAnH,GAAA,EAACyL,EAAAA,CACC/H,OAAQwG,EAASsB,OAAO,CACxBE,SAAU,OAAC,CAACzK,OAAAA,CAAM,CAAC,CAAAhE,SACjB,EAAW0O,IAAI,GAAKC,EAAAA,EAAUA,CAACC,kBAAkB,EACxC5K,EAAO6K,UAAU,EAAI,CAGhC,EACAC,UAAU,mBAEV,GAAA5E,EAAAnH,GAAA,EAACgM,EAAAA,CAAGA,CAAAA,CAACxD,OAAO,gBACV,GAAArB,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOhB,WAAY,SAAUC,IAAK,CAAC,YACxD,GAAAX,EAAAnH,GAAA,EAACC,MAAAA,CACCC,MAAO,CACLpB,MAAO,OACP0C,OAAQ,OACR8G,OAAQ,aAAoC9H,MAAA,CAAvBpF,EAAAA,EAAoB,IACzC6Q,aAAc,KAChB,IAED/B,EAASsB,OAAO,CAACvM,MAAM,QAK9B0L,IAGJ,GAAAxD,EAAAnH,GAAA,EAACgL,EAAAA,UACEd,EAASgC,MAAM,CAACjN,MAAM,CACrB,GAAAkI,EAAAnH,GAAA,EAACyL,EAAAA,CACC/H,OAAQwG,EAASgC,MAAM,CACvBR,SAAU,OAAC,CAACzK,OAAAA,CAAM,CAAC,CAAAhE,SACjB,EAAW0O,IAAI,GAAKC,EAAAA,EAAUA,CAACO,iBAAiB,EACvClL,EAAOmL,SAAS,EAAI,CAG/B,EACAL,UAAU,kBAEV,GAAA5E,EAAAnH,GAAA,EAACgM,EAAAA,CAAGA,CAAAA,CAACxD,OAAO,kBACV,GAAArB,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOhB,WAAY,SAAUC,IAAK,CAAC,YACxD,GAAAX,EAAAnH,GAAA,EAACC,MAAAA,CACCC,MAAO,CACLpB,MAAO,EACP0C,OAAQ,EACR6K,WAAY,wBACZC,YAAa,wBACbC,aAAc,iBACdC,QAAS,cACX,IAEDtC,EAASgC,MAAM,CAACjN,MAAM,QAK7B0L,IAGJ,GAAAxD,EAAAnH,GAAA,EAACgL,EAAAA,UACEd,EAASuC,UAAU,CAACxN,MAAM,CACzB,GAAAkI,EAAAnH,GAAA,EAACyL,EAAAA,CACC/H,OAAQwG,EAASuC,UAAU,CAC3Bf,SAAU,OAAC,CAACzK,OAAAA,CAAM,CAAC,CAAAhE,SACjB,EAAW0O,IAAI,GAAKC,EAAAA,EAAUA,CAACc,aAAa,EACnCzL,EAAO0L,gBAAgB,EAAI,CAGtC,EACAZ,UAAU,yBAEV,GAAA5E,EAAAnH,GAAA,EAACgM,EAAAA,CAAGA,CAAAA,CAACxD,OAAO,UAAUoE,KAAK,mBACxB1C,EAASuC,UAAU,CAACxN,MAAM,KAI/B0L,IAGJ,GAAAxD,EAAAnH,GAAA,EAACgL,EAAAA,UACEd,EAAS2C,UAAU,CAAC5N,MAAM,CACzB,GAAAkI,EAAAnH,GAAA,EAACyL,EAAAA,CACC/H,OAAQwG,EAAS2C,UAAU,CAC3BnB,SAAU,OAAC,CAACzK,OAAAA,CAAM,CAAC,CAAAhE,SACjB,EAAW0O,IAAI,GAAKC,EAAAA,EAAUA,CAACkB,uBAAuB,EAC7C7L,EAAO8L,eAAe,EAAI,CAGrC,EACAhB,UAAU,wBAEV,GAAA5E,EAAAnH,GAAA,EAACgM,EAAAA,CAAGA,CAAAA,CAACxD,OAAO,mBACV,GAAArB,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOhB,WAAY,SAAUC,IAAK,CAAC,YACxD,GAAAX,EAAAnH,GAAA,EAACC,MAAAA,CACCC,MAAO,CACL8M,gBAAiB5R,EAAAA,EAAkB,GACnC0D,MAAO,OACP0C,OAAQ,OACRyK,aAAc,KAChB,IAED/B,EAAS2C,UAAU,CAAC5N,MAAM,QAKjC0L,QAMZ,CAEA,IAAMI,EAAU1I,CAAAA,EAAAA,EAAAA,EAAAA,EAAOmF,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,kHAECkC,GAOrBsB,EAAO,OAAC,CAACiC,SAAAA,CAAQ,CAA8B,CAAAhQ,EACnD,MACE,GAAAkK,EAAAnH,GAAA,EAACkN,EAAAA,EAAOA,CAAAA,CAAChN,MAAO,CAACkC,MAAOhH,EAAAA,EAAkB,EAAE,WAC1C,GAAA+L,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOhB,WAAY,SAAUE,KAAM,CAAC,WAAIkF,KAGrE,EAEM7B,EAAwB/I,EAAAA,EAAMA,CAACpC,GAAG,CAAAqC,UAAA,uHAI3BlH,EAAAA,CAAgB,GAEZ,OAAC,CAACiQ,SAAAA,CAAQ,CAAC,CAAApO,SAAMoO,EAAW,QAAU,GAAY7K,MAAA,CAAT6K,EAAS,QAQnE,SAASI,EAAcxO,CAUtB,KAVsB,CACrByG,OAAAA,CAAM,CACNuJ,SAAAA,CAAQ,CACRvB,SAAAA,CAAQ,CACRK,UAAAA,CAAS,CAMV,CAVsB9O,EAWrB,MACE,GAAAkK,EAAAnH,GAAA,EAACmN,EAAAA,UACC,GAAAhG,EAAAnH,GAAA,EAACoN,EAAAA,CAAMA,CAAAA,CACLnG,MAAOvD,EACP2J,cAAe,CAAC1J,EAAO2J,IACrBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAuBD,EAAK5I,KAAK,CAACM,GAAG,EAClCwI,iBAAiB,GACjBpH,QAAQ,CAACzC,EAAM6J,iBAAiB,IAErCC,aAAc,IACZ,IAAM5M,EAAQ6K,EAAS4B,GACvB,MACE,GAAAnG,EAAAnH,GAAA,EAAC0N,EAAAA,CAAoBxL,GAAIyL,CAAAA,EAAAA,EAAAA,CAAAA,EAAuBL,EAAK5I,KAAK,CAACM,GAAG,EAAGC,OAAO,kBACtE,GAAAkC,EAAAnH,GAAA,EAAC4N,EAAAA,EAAQA,CAAAA,CAEPC,KACE,GAAA1G,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOhB,WAAY,SAAUC,IAAK,CAAC,YACxD,GAAAX,EAAAnH,GAAA,EAACC,MAAAA,CAAIC,MAAO,CAAC4N,YAAa,KAAK,WAC7B,GAAA3G,EAAAnH,GAAA,EAACiL,EAAAA,EAAIA,CAAAA,CAAClG,KAAK,YAEb,GAAAoC,EAAAnH,GAAA,EAACC,MAAAA,CACCC,MAAO,CAAC+I,SAAU,SAAU8E,WAAY,SAAUC,aAAc,UAAU,WAEzET,CAAAA,EAAAA,EAAAA,EAAAA,EAAuBD,EAAK5I,KAAK,CAACM,GAAG,IAEvCnE,GAASA,EAAQ,EAChB,GAAAsG,EAAA/G,IAAA,EAACO,EAAAA,EAAOA,CAAAA,CAACT,MAAO,CAACkC,MAAOhH,EAAAA,CAAgB,EAAE,YACvC6S,CAAAA,EAAAA,EAAAA,EAAAA,EAAqBpN,GAAO,IAAEkL,KAE/B,SAfHwB,CAAAA,EAAAA,EAAAA,EAAAA,EAAuBD,EAAK5I,KAAK,CAACM,GAAG,IAqBlD,EACAkJ,aAAc,KAAO,WAEpBjB,KAIT,CAEA,IAAME,EAAgB9K,EAAAA,EAAMA,CAACpC,GAAG,CAAAqC,UAAA,8EAO1BoL,EAAsBrL,CAAAA,EAAAA,EAAAA,EAAAA,EAAOsG,EAAAA,EAAIA,EAAAA,UAAAA,CAAAA,kFC7dhC,IAAMwF,EAAqB,IAAM,mECgBjC,IAAMC,GAAe,IAC1B,GAAM,CAACrK,aAAAA,CAAY,CAAEsK,IAAAA,CAAG,CAAC,CAAGC,EAEtBC,EAAkBC,CAAAA,EAAAA,GAAAA,EAAAA,IAClBC,EAAkCC,CAAAA,EAAAA,GAAAA,CAAAA,IAClC,CAACC,iCAAAA,CAAgC,CAAC,CAAG9O,CAAAA,EAAAA,EAAAA,UAAAA,EAAW+O,EAAAA,CAAmBA,EAEzE,MACE,GAAAzH,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOD,eAAgB,gBAAiBf,WAAY,UAAU,YACnF,GAAAV,EAAA/G,IAAA,EAACyO,EAAAA,EAAIA,CAAAA,CAACC,cAAeT,YACnB,GAAAlH,EAAAnH,GAAA,EAAC+O,GAAAA,CAAOA,CAAAA,CAACtN,GAAG,WAAWgH,MAAM,WAAWvG,GAAG,uBAC1CyM,GACC,GAAAxH,EAAAnH,GAAA,EAAC+O,GAAAA,CAAOA,CAAAA,CAACtN,GAAG,eAAegH,MAAM,eAAevG,GAAG,2BAEpDuM,mBAAAA,EACC,GAAAtH,EAAAnH,GAAA,EAAC+O,GAAAA,CAAOA,CAAAA,CACNtN,GAAG,MACHgH,MACE,GAAAtB,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOf,IAAK,EAAGD,WAAY,QAAQ,YACxD,GAAAV,EAAAnH,GAAA,EAACC,MAAAA,UAAI,qBACJsO,EAAgB1K,OAAO,CACtB,GAAAsD,EAAAnH,GAAA,EAAC8I,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cAEjB,GAAA5B,EAAAnH,GAAA,EAACC,MAAAA,CACCC,MAAO,CACLpB,MAAO,OACP0C,OAAQ,OACRyK,aAAc,MACde,gBACEuB,CAA2B,IAA3BA,EAAgBS,MAAM,CAClB5T,EAAAA,EAAiB,GACjBA,EAAAA,EAAiB,EACzB,OAKR8G,GAAG,yBAEH,KACJ,GAAAiF,EAAAnH,GAAA,EAAC+O,GAAAA,CAAOA,CAAAA,CAACtN,GAAG,YAAYgH,MAAM,YAAYvG,GAAG,wBAC7C,GAAAiF,EAAAnH,GAAA,EAAC+O,GAAAA,CAAOA,CAAAA,CAACtN,GAAG,YAAYgH,MAAM,YAAYvG,GAAG,2BAE9C6B,EACC,GAAAoD,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACtH,MAAO,CAAC+O,UAAW,QAAQ,WAC9B,GAAA9H,EAAAnH,GAAA,EAACkP,EAAAA,EAAqBA,CAAAA,CAACnL,aAAcA,MAErC,OAGV,EC5DaoL,GAAqB,OAAC,CACjCd,IAAAA,CAAG,CACHe,UAAAA,CAAS,CACTrL,aAAAA,CAAY,CACZ,GAAGsL,EAEmD,CAAApS,EACtD,MACE,GAAAkK,EAAAnH,GAAA,EAACsP,EAAAA,CAAUA,CAAAA,CACTC,KACE,GAAApI,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,SAAUf,IAAK,CAAC,YACrC,GAAAX,EAAAnH,GAAA,EAACoO,GAAYA,CAACC,IAAKA,EAAKe,UAAWA,EAAWrL,aAAcA,IAC5D,GAAAoD,EAAAnH,GAAA,EAACmO,EAAkBA,CAAAA,MAGtB,GAAGkB,CAAI,EAGd,sDCVO,IAAMG,GAAuB,KAClC/L,CAAAA,EAAAA,EAAAA,CAAAA,EAAiB,uBAEjB,IAAMgM,EAASnL,EAAAA,WAAiB,CAC9B,OAAC,CAACP,aAAAA,CAAY,CAA4E,CAAA9G,QACxF,GAAAkK,EAAAnH,GAAA,EAACmP,GAAkBA,CAACd,IAAI,WAAWtK,aAAcA,KAEnD,EAAE,EAGE,CAAC2L,EAAaC,EAAc,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,EACnC,wBACA,GAAW,CAAC,WAAY,SAAS,CAACxJ,QAAQ,CAACyJ,GAAQA,EAAO,YAGtD,CAAClB,iCAAAA,CAAgC,CAAC,CAAGrK,EAAAA,UAAgB,CAACsK,EAAAA,CAAmBA,EACzEkB,EAAanB,EAAmC,WAAae,EAE7DK,EAAYzL,EAAAA,WAAiB,CACjC,OAAC,CAAC0D,SAAAA,CAAQ,CAAoC,CAAA/K,SAC5C,EACS,MAEL6S,IAAe9H,GACjB2H,EAAc3H,GAGd,GAAAb,EAAA/G,IAAA,EAAC4P,EAAAA,EAAaA,CAAAA,WACZ,GAAA7I,EAAAnH,GAAA,EAACiQ,GAAAA,EAAiBA,CAAAA,CAACC,QAASlI,aAAAA,EAAyB9F,GAAG,uCAA8B,aAGtF,GAAAiF,EAAAnH,GAAA,EAACiQ,GAAAA,EAAiBA,CAAAA,CAACC,QAASlI,WAAAA,EAAuB9F,GAAG,qCAA4B,cAKxF,EACA,CAAC4N,EAAYH,EAAehB,EAAiC,EAG/D,MACE,GAAAxH,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,QAAQ,EAAG3I,MAAO,CAACsB,OAAQ,OAAQyH,SAAU,QAAQ,WAC1E,GAAA9B,EAAA/G,IAAA,EAAC+P,EAAAA,EAAMA,CAAAA,WACJ,CAACxB,GACA,GAAAxH,EAAAnH,GAAA,EAACoQ,GAAAA,CAAKA,CAAAA,CAACpG,KAAK,qCACV,GAAA7C,EAAAnH,GAAA,EAACqD,EAAkBA,CAACC,OAAQmM,EAAQlM,UAAWwM,MAGnD,GAAA5I,EAAAnH,GAAA,EAACoQ,GAAAA,CAAKA,CAAAA,CAACpG,KAAK,uCACV,GAAA7C,EAAAnH,GAAA,EAACqQ,GAAAA,CAAoBA,CAAAA,CAAC/M,OAAQmM,EAAQlM,UAAWwM,MAEnD,GAAA5I,EAAAnH,GAAA,EAACoQ,GAAAA,CAAKA,CAAAA,CACJpG,KAAK,IACLsG,eAAc,GACdC,OAAQjM,EAAAA,WAAiB,CACvB,IACEwL,aAAAA,EACE,GAAA3I,EAAAnH,GAAA,EAACwQ,EAAAA,EAAQA,CAAAA,CAACtO,GAAG,gCAEb,GAAAiF,EAAAnH,GAAA,EAACwQ,EAAAA,EAAQA,CAAAA,CAACtO,GAAG,8BAEjB,CAAC4N,EAAW,QAMxB,8ECvEA,IAAMpG,GAAmB,gBAQZ+G,GAAyB,IACpC,GAAM,CACJ1L,KAAAA,CAAI,CACJ2D,YAAAA,CAAW,CACX4B,YAAAA,CAAW,CACXd,MAAAA,CAAK,CACLhI,OAAAA,CAAM,CACNkP,aAAAA,CAAY,CACZC,gBAAAA,CAAe,CACfC,aAAAA,CAAY,CACZC,eAAAA,CAAc,CACdC,eAAAA,CAAc,CACdC,aAAAA,CAAY,CACb,CAAGzC,EACE0C,EAAuBC,CAAAA,EAAAA,GAAAA,CAAAA,EAAaP,GACpCQ,EACJP,EAAgB1R,MAAM,CACtB2R,EAAa3R,MAAM,CACnB4R,EAAe5R,MAAM,CACrB6R,EAAe7R,MAAM,CACrB8R,EAAa9R,MAAM,CAErB,MACE,GAAAkI,EAAAnH,GAAA,EAAC4K,EAAAA,EAAGA,CAAAA,CAACC,QAASrJ,EAAQsJ,OAAQtB,WAC5B,GAAArC,EAAA/G,IAAA,EAAC2K,GAAOA,CAACzC,OAAO,mBACd,GAAAnB,EAAAnH,GAAA,EAACkN,EAAAA,EAAOA,CAAAA,UACN,GAAA/F,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,SAAUf,IAAK,CAAC,YACrC,GAAAX,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOf,IAAK,EAAGD,WAAY,QAAQ,YACxD,GAAAV,EAAAnH,GAAA,EAACiL,EAAAA,EAAIA,CAAAA,CAAClG,KAAK,WAAW3C,MAAOhH,EAAAA,EAAiB,KAE9C,GAAA+L,EAAAnH,GAAA,EAACmR,OAAAA,CAAKjR,MAAO,CAACgL,WAAY,GAAG,WAC3B,GAAA/D,EAAAnH,GAAA,EAAC2I,EAAAA,EAAIA,CAAAA,CAACzG,GAAIiJ,CAAAA,EAAAA,EAAAA,EAAAA,EAAyBb,EAAa,cAAmB9J,MAAA,CAALuE,aAC5D,GAAAoC,EAAAnH,GAAA,EAACoR,GAAAA,CAAcA,CAAAA,CAACvD,KAAM9I,WAI5B,GAAAoC,EAAAnH,GAAA,EAACC,MAAAA,CACCC,MAAO,CACLmL,SAAU,OACVpC,SAAU,SACV+E,aAAc,UAChB,WAEA,GAAA7G,EAAAnH,GAAA,EAACW,EAAAA,EAAOA,CAAAA,CACNT,MAAO,CACLkC,MAAOhH,EAAAA,CAAgB,GACvB2S,WAAY,QACd,WAECrF,WAKT,GAAAvB,EAAAnH,GAAA,EAACkN,EAAAA,EAAOA,CAAAA,UACN,GAAA/F,EAAAnH,GAAA,EAACqB,GAAAA,CAAOA,CAAAA,CAACC,QAASoP,WAChB,GAAAvJ,EAAAnH,GAAA,EAACqR,EAAAA,EAAIA,CAAAA,UAAEL,QAGX,GAAA7J,EAAAnH,GAAA,EAACkN,EAAAA,EAAOA,CAAAA,UACN,GAAA/F,EAAAnH,GAAA,EAAC2I,EAAAA,EAAIA,CAAAA,CAACzG,GAAIiJ,CAAAA,EAAAA,EAAAA,EAAAA,EAAyBb,EAAa,cAAmB9J,MAAA,CAALuE,EAAK,mBAAUmM,UAKvF,EAEaI,GAA4B,IAErC,GAAAnK,EAAA/G,IAAA,EAACuJ,EAAAA,EAASA,CAAAA,CAACC,gBAAiBF,GAAkBG,OAAM,aAClD,GAAA1C,EAAAnH,GAAA,EAAC8J,EAAAA,EAAUA,CAAAA,UAAC,SACZ,GAAA3C,EAAAnH,GAAA,EAAC8J,EAAAA,EAAUA,CAAAA,UAAC,SACZ,GAAA3C,EAAAnH,GAAA,EAAC8J,EAAAA,EAAUA,CAAAA,UAAC,YAKZiB,GAAU1I,CAAAA,EAAAA,EAAAA,EAAAA,EAAOmF,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,uFAECkC,wDChEpB,IAAM6H,GAAyB,OAAC,CAACC,MAAAA,CAAK,CAAQ,CAAAvU,EAC7CuJ,EAAYiL,CAAAA,EAAAA,EAAAA,MAAAA,EAA8B,MAC1CC,EAAUvT,CAAAA,EAAAA,EAAAA,OAAAA,EACd,IAAMqT,EAAM/S,GAAG,CAAC,OAAC,CAAC6L,YAAAA,CAAW,CAAC,CAAArN,QAAK0U,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBrH,KAC5D,CAACkH,EAAM,EAGH,CAACI,aAAAA,CAAY,CAAEC,SAAAA,CAAQ,CAAEC,YAAAA,CAAW,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,EAC5CC,GAAAA,CAAsBA,CACtBN,GAGIO,EAAuB9T,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KACnC,IAAM+T,EAAkB,EAAE,CAU1B,OATAV,EAAM/M,OAAO,CAAC,OAAC,CAAC6F,YAAAA,CAAW,CAAE6H,UAAAA,CAAS,CAAC,CAAAlV,EACrCiV,EAAKzS,IAAI,CAAC,CAACsD,KAAM,SAAUuH,YAAAA,EAAa8H,cAAeD,EAAUlT,MAAM,GACvE,IAAMoT,EAAUV,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBrH,GACrCsH,EAAaxL,QAAQ,CAACiM,IACxBF,EAAU1N,OAAO,CAAC,IAChByN,EAAKzS,IAAI,CAAC,CAACsD,KAAM,WAAYuH,YAAAA,EAAa,GAAGgI,CAAQ,EACvD,EAEJ,GACOJ,CACT,EAAG,CAACV,EAAOI,EAAa,EAElBW,EAAqBC,CAAAA,EAAAA,GAAAA,CAAAA,EAAuBhB,EAAM/S,GAAG,CAAC,OAAC,CAAC6L,YAAAA,CAAW,CAAC,CAAArN,SAAKqN,EAAYvF,IAAI,IAEzF0B,EAAiBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CACpC7F,MAAOoR,EAAUhT,MAAM,CACvB0H,iBAAkB,IAAMH,EAAUI,OAAO,CACzCC,aAAc,IACZ,IAAM4L,EAAMR,CAAS,CAACS,EAAG,CACzB,MAAOD,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAK1P,IAAI,IAAK,SAAW,GAAK,EACvC,EACA+D,SAAU,EACZ,GAEMC,EAAcN,EAAeO,YAAY,GACzCC,EAAQR,EAAeS,eAAe,GAE5C,MACE,GAAAC,EAAAnH,GAAA,EAACC,MAAAA,CAAIC,MAAO,CAAC+I,SAAU,QAAQ,WAC7B,GAAA9B,EAAA/G,IAAA,EAAC8I,EAAAA,EAASA,CAAAA,CAACC,IAAK3C,YACd,GAAAW,EAAAnH,GAAA,EAACsR,GAAyBA,CAAAA,GAC1B,GAAAnK,EAAAnH,GAAA,EAACqJ,EAAAA,EAAKA,CAAAA,CAACC,aAAcvC,WAClBE,EAAMxI,GAAG,CAAC,OAAC,CAACkE,MAAAA,CAAK,CAAEqC,IAAAA,CAAG,CAAEuE,KAAAA,CAAI,CAAEC,MAAAA,CAAK,CAAC,CAAAvM,EAC7BwV,EAAeR,CAAS,CAACtP,EAAM,CAErC,MAAOI,WADM0P,EAAK1P,IAAI,CAEpB,GAAAoE,EAAAnH,GAAA,EAAC2S,GAAAA,EAAOA,CAAAA,CACNrI,YAAamI,EAAInI,WAAW,CAE5B9I,OAAQ+H,EACRC,MAAOA,EACPqI,SAAUA,EACVC,YAAaA,EACbc,SAAUhB,EAAaxL,QAAQ,CAACuL,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBc,EAAInI,WAAW,GACxEuI,aAAcN,EAAmBO,GAAG,CAACL,EAAInI,WAAW,CAACvF,IAAI,EACzDgO,aACE,GAAA5L,EAAAnH,GAAA,EAACqB,GAAAA,CAAOA,CAAAA,CACNC,QACEmR,IAAAA,EAAIL,aAAa,CAAS,aAAe,GAAqB5R,MAAA,CAAlBiS,EAAIL,aAAa,CAAC,cAEhEY,UAAU,eAEV,GAAA7L,EAAAnH,GAAA,EAACgM,EAAAA,CAAGA,CAAAA,UAAEyG,EAAIL,aAAa,MAdtBpN,GAmBP,GAAAmC,EAAAnH,GAAA,EAACyQ,GAAsBA,CAAWjP,OAAQ+H,EAAMC,MAAOA,EAAQ,GAAGiJ,CAAG,EAAxCzN,EAEjC,SAKV,wFCtGO,IAAMiO,GAAqB,IAChC,GAAM,CAACC,eAAAA,CAAc,CAAC,CAAG5E,QAGzB,CAFuB6E,EAAAA,GAAAA,CAAAA,EAJC,KAWtB,GAAAhM,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAAC4L,OAAQ,CAAC9L,IAAK,CAAC,WAClB,GAAAH,EAAAnH,GAAA,EAACqB,GAAAA,CAAOA,CAAAA,CAAC2R,UAAU,MAAMK,QAAS,CAAC,CAACH,EAAgB5R,QAAS4R,GAAkB,YAC7E,GAAA/L,EAAAnH,GAAA,EAAC8I,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,kBANd,IAUX,2rBCGO,IAAMuK,GAAwB,KACnC9P,CAAAA,EAAAA,EAAAA,EAAAA,IACAC,CAAAA,EAAAA,EAAAA,CAAAA,EAAiB,wBAEjB,GAAM,CACJ8P,SAAAA,CAAQ,CACRC,aAAAA,CAAY,CACZ3P,QAAS4P,CAAgB,CACzBC,KAAMC,CAAU,CACjB,CAAG9T,CAAAA,EAAAA,EAAAA,UAAAA,EAAW+T,GAAAA,EAAgBA,EACzB,CAACxO,EAAaC,EAAe,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,EAA+B,CACnEC,SAAU,SACVsO,SAAU,CAACC,OAAQ,EAAE,CACvB,GAEMC,EAAYR,EAAStU,MAAM,CAE3B+U,EAAsBC,CAAAA,EAAAA,GAAAA,EAAAA,EAC1BC,GACA,CACEC,YAAa,eACbC,4BAA6B,EAC/B,GAEI,CAACV,KAAAA,CAAI,CAAE7P,QAASwQ,CAAY,CAAC,CAAGL,EAChCjQ,EAAeuQ,CAAAA,EAAAA,EAAAA,EAAAA,EAA0BN,EAAqB7P,EAAAA,EAAeA,EAG7EoQ,EAAcpW,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KAC1B,IAAMqW,EAAcC,CAAAA,EAAAA,GAAAA,CAAAA,EAAgBjB,GAC9BkB,EAAgBxP,OAAOC,MAAM,CAACwO,GAAYvV,MAAM,CACpD,GACEoM,2BAAAA,EAASmK,UAAU,EAEjBC,EAAmBlB,MAAAA,EAAAA,KAAAA,EAAAA,EAAMkB,gBAAgB,CAK/C,OAAOC,GAHLD,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAkBD,UAAU,IAAK,YAC7BC,EAAiBE,eAAe,CAChCJ,GACuBtW,MAAM,CAAC,OAAC,CAACkM,YAAAA,CAAW,CAAC,CAAArN,SAChDuX,EAAY1B,GAAG,CAACnB,CAAAA,EAAAA,GAAAA,EAAAA,EAAyBrH,KAE7C,EAAG,CAACqJ,EAAYD,EAAMF,EAAa,EAE7B3P,EAAU,CAAC6P,GAAQW,GAAgBZ,EAEnCsB,EAAkB3P,EAAY4P,IAAI,GAAGxH,iBAAiB,GACtDyH,EAAYF,EAAgB9V,MAAM,CAAG,EAErCiW,EAAmB/W,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KAC/B,IAAMgX,EAAgBJ,EAAgBvH,iBAAiB,GACvD,OAAO+G,EACJ9V,GAAG,CAAC,OAAC,CAAC6L,YAAAA,CAAW,CAAE6H,UAAAA,CAAS,CAAC,CAAAlV,QAAM,CAClCqN,YAAAA,EACA6H,UAAWA,EAAU/T,MAAM,CAAC,OAAC,CAAC2G,KAAAA,CAAI,CAAC,CAAA9H,SAAK8H,EAAKyI,iBAAiB,GAAGpH,QAAQ,CAAC+O,IAC5E,IACC/W,MAAM,CAAC,OAAC,CAAC+T,UAAAA,CAAS,CAAC,CAAAlV,SAAKkV,EAAUlT,MAAM,CAAG,GAChD,EAAG,CAACsV,EAAaQ,EAAgB,EA2D3BK,EAAoBf,GAAgB,CAACX,EAE3C,MACE,GAAAvM,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,QAAQ,EAAG3I,MAAO,CAACsB,OAAQ,OAAQyH,SAAU,QAAQ,YAC1E,GAAA9B,EAAAnH,GAAA,EAACmP,GAAkBA,CAACd,IAAI,YAAYtK,aAAcA,IAClD,GAAAoD,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CACFC,QAAS,CAACC,WAAY,GAAIC,SAAU,EAAE,EACtCC,KAAM,CAACiB,UAAW,MAAOhB,WAAY,SAAUC,IAAK,GAAIC,KAAM,CAAC,YAE9DgM,EAAY,EAAI,GAAA5M,EAAAnH,GAAA,EAACqV,GAAAA,CAAgBA,CAAAA,CAAAA,GAAM,KACxC,GAAAlO,EAAAnH,GAAA,EAACiI,EAAAA,EAASA,CAAAA,CACR2E,KAAK,SACL1E,MAAO9C,EACP2N,aACEqC,EACE,GAAAjO,EAAAnH,GAAA,EAACiT,GAAkBA,CAACC,eAAe,uBACjCnN,KAAAA,EAENoC,SAAU,GAAO9C,EAAe+C,EAAEnD,MAAM,CAACiD,KAAK,EAC9CG,YAAY,2BACZnI,MAAO,CAACpB,MAAO,OAAO,OAGzB+E,GAAW,CAACkQ,EACX,GAAA5M,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,YACZ,GAAAN,EAAAnH,GAAA,EAAC8I,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAGnBzH,CArFU,KACd,GAAIuC,EACF,MACE,GAAAsD,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOD,eAAgB,QAAQ,EAAG1I,MAAO,CAACoV,WAAY,OAAO,WAClF,GAAAnO,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOhB,WAAY,SAAUC,IAAK,EAAE,YACzD,GAAAX,EAAAnH,GAAA,EAAC8I,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,GAAA5B,EAAAnH,GAAA,EAACC,MAAAA,CAAIC,MAAO,CAACkC,MAAOhH,EAAAA,CAAgB,EAAE,WAAG,4BAMjD,IAAMma,EAAiBhC,EAAStU,MAAM,CAAGuU,EAAavU,MAAM,QAE5D,EAAsBA,MAAM,CAwCrB,GAAAkI,EAAAnH,GAAA,EAACuR,GAAsBA,CAACC,MAAO0D,IAvCpC,EAEI,GAAA/N,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACH,IAAK,EAAE,WACpB,GAAAH,EAAAnH,GAAA,EAACwV,GAAAA,CAAaA,CAAAA,CACZ5I,KAAK,SACLnE,MAAM,wBACNC,YACE6M,EACE,GAAApO,EAAA/G,IAAA,EAACH,MAAAA,WAAI,yBACmB,GAAAkH,EAAAnH,GAAA,EAACyV,SAAAA,UAAQrQ,IAAqB,gDAItD,GAAA+B,EAAA/G,IAAA,EAACH,MAAAA,WAAI,yBACmB,GAAAkH,EAAAnH,GAAA,EAACyV,SAAAA,UAAQrQ,IAAqB,yCAWhE,GAAA+B,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACH,IAAK,EAAE,WACpB,GAAAH,EAAAnH,GAAA,EAACwV,GAAAA,CAAaA,CAAAA,CACZ5I,KAAK,SACLnE,MAAM,eACNC,YACE6M,EACI,yDACA,iDAQhB,OAkCF,EAOMV,GAAe,IAQnB,IAAMa,EAAUZ,EAAgBrW,GAAG,CAAC,GAAWkX,EAAMC,mBAAmB,EAClEC,EAAU,EAAE,CAElB,IAAK,IAAMF,KAASD,EAClB,GAAIC,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAOhB,UAAU,IAAK,qBAI1B,IAAK,IAAMvK,KAAQuL,EAAMG,YAAY,CAAE,CACrC,GAAM,CAAC/Q,KAAAA,CAAI,CAAEgR,2BAAAA,CAA0B,CAAC,CAAG3L,EACrCE,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,EAAiBxF,EAAM4Q,EAAM5Q,IAAI,CAEjDgR,CAAAA,EAA2B9W,MAAM,CAAG,GACtC4W,EAAQpW,IAAI,CAAC,CACX6K,YAAAA,EACA6H,UAAW4D,CACb,EAEJ,CAGF,MAAOC,CAAAA,EAAAA,GAAAA,CAAAA,EAAgBH,EACzB,EAEM3B,GAA2B+B,CAAAA,EAAAA,GAAAA,EAAAA,EAAGA,KA4BhCC,GAAAA,CAAqBA,CACrBC,GAAAA,CAAuBA,0nCChPpB,IAAMC,GAA6BH,CAAAA,EAAAA,GAAAA,EAAAA,EAAGA,KAuBzCC,GAAAA,CAAqBA,EAGZG,GAA2BJ,CAAAA,EAAAA,GAAAA,EAAAA,EAAGA,KAwBvCG,+EC3CG,IAAME,GAAsC1U,CAAAA,EAAAA,EAAAA,IAAAA,EACjD,OAAC,CACCvD,KAAAA,CAAI,CACJkY,OAAAA,CAAM,CACNC,MAAAA,CAAK,CAKN,CAAAvZ,EACC,MACE,GAAAkK,EAAAnH,GAAA,EAACyW,GAAAA,EAAeA,CAAAA,CACdF,OAAQA,EACRG,UAAWF,EACXhV,OAAQ,IACRiO,OACE,GAAAtI,EAAAnH,GAAA,EAAC2W,GAAAA,EAAYA,CAAAA,CACXC,MACEvY,EACE,GAAA8I,EAAAnH,GAAA,EAACC,MAAAA,UACC,GAAAkH,EAAAnH,GAAA,EAAC6W,GAAAA,CAASA,CAAAA,CAAClY,UAAW,CAACmY,KAAMzY,EAAKM,SAAS,EAAGoY,WAAY,CAACC,aAAc,EAAI,MAG/E,KAKR1V,QACE,GAAA6F,EAAA/G,IAAA,EAACH,MAAAA,CACCC,MAAO,CACLsM,QAAS,OACTyK,iBAAkB,2BAClBzV,OAAQ,MACV,YAEA,GAAA2F,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACE,SAAU,GAAID,WAAY,EAAE,EAAGY,OAAO,kBAClDjK,EAAO,GAAA8I,EAAAnH,GAAA,EAACkX,GAAAA,CAAiBA,CAAAA,CAAC7Y,KAAMA,EAAM5B,eAAe,qBAAwB,OAE/E4B,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAM4C,MAAM,IAAK/F,GAAAA,GAAqBA,CAACI,OAAO,CAAG,KAChD,GAAA6L,EAAAnH,GAAA,EAACmX,GAAAA,CAAyBA,CAAAA,CAAC9Y,KAAMA,QAM7C,uDC1CK,IAAM+Y,GAAiC,QAkC3BC,KAlC4B,CAC7CC,WAAAA,CAAU,CACVC,aAAAA,CAAY,CAIb,CAAAta,EACO,CAACoa,YAAAA,CAAW,CAAEG,gBAAAA,CAAe,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,EAGrC,CACAC,oBAAqB,QAIZ5V,EAHP,GAAIA,SAAAA,EAAK6V,mBAAmB,CAAChD,UAAU,CAGvC,cAAO7S,CAAAA,EAAAA,EAAK6V,mBAAmB,CAACC,OAAO,CAACC,GAAc,GAA/C/V,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiDL,EAAE,EAE5DqW,eAAgB,GACd,GAAapE,SAAAA,EAAKiE,mBAAmB,CAAChD,UAAU,CAGzCjB,EAAKiE,mBAAmB,CAACC,OAAO,CAF9B,EAAE,CAIbG,UAAW,CACT3Z,OAAQ,CACN4Z,KAAM,IAAKV,GAAc,EAAE,CAAG,CAACtS,IAAK,2BAA4BkD,MAAO,MAAM,EAAE,CAEnF,EACAvE,MAAOsU,GAAAA,CAAeA,CACtBC,SA/Bc,EAgChB,GAEA5D,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B+C,EAAa,MAEvC,IAAMc,EAAAA,OAAWd,CAAAA,EAAAA,EAAY3D,IAAI,EAAI2D,EAAYe,YAAY,GAA5Cf,KAAAA,IAAAA,EAAAA,KAAAA,EAADgB,EAAgDV,mBAAmB,CAEnF,MACE,GAAAxQ,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,WACF,GAAAL,EAAA/G,IAAA,EAACkY,GAAAA,WACC,GAAAnR,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACE,SAAU,GAAID,WAAY,EAAE,EAAG0L,OAAQ,CAAC9L,IAAK,EAAE,EAAGgB,OAAO,eACtE,GAAAnB,EAAAnH,GAAA,EAACuY,GAAAA,CAAWA,CAAAA,CACVC,YAAa,IAAIC,IAAI,CAAC,OAAO,EAC7BC,QAAS,CACP,CAACjX,GAAI,cAAemV,MAAO,aAAa,EACxC,CAACnV,GAAI,OAAQmV,MAAO,MAAM,EAC3B,CACDxV,QAAS,IACPmW,EAAa9V,EACf,MAGJ,GAAA0F,EAAAnH,GAAA,EAAC2Y,GAAAA,CAAQA,CAAAA,CAAC7W,KAAMqW,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAASxD,UAAU,IAAK,OAASwD,EAAQP,OAAO,CAAG,EAAE,MAEvE,GAAAzQ,EAAAnH,GAAA,EAACC,MAAAA,CAAIC,MAAO,CAAC0Y,cAAe,MAAM,WAChC,GAAAzR,EAAAnH,GAAA,EAAC6Y,GAAAA,EAAqBA,CAAAA,CAAE,GAAGrB,CAAe,OAIlD,EAGMc,GAAUjW,EAAAA,EAAMA,CAACpC,GAAG,CAAAqC,UAAA,iJC5CnB,IAAMwW,GAA4C,OAAC,CACxDjV,QAAAA,CAAO,CACPrH,MAAAA,CAAK,CACLuc,WAAAA,CAAU,CACVC,cAAAA,CAAa,CACbC,gBAAAA,CAAe,CACfzB,gBAAAA,CAAe,CACf0B,oBAAAA,CAAmB,CACb,CAAAjc,EACN,MACE,GAAAkK,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,WACF,GAAAL,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CACFI,KAAM,CAACgB,eAAgB,gBAAiBf,WAAY,QAAQ,EAC5DJ,QAAS,CAACE,SAAU,GAAID,WAAY,EAAE,EACtC0L,OAAQ,CAAC9L,IAAK,EAAE,EAChBgB,OAAO,gBAEP,GAAAnB,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOf,IAAK,EAAGD,WAAY,QAAQ,YACvDqR,EACArV,CAAAA,GAAYrH,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAOyC,MAAM,EAAqC,KAAlC,GAAAkI,EAAAnH,GAAA,EAAC8I,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,iBAEhD,GAAA5B,EAAAnH,GAAA,EAACmZ,GAAAA,CAAalY,OAAQ8X,EAAY5Q,SAAU6Q,OAE9C,GAAA7R,EAAA/G,IAAA,EAACgZ,GAAAA,WACC,GAAAjS,EAAAnH,GAAA,EAACqZ,QAAAA,UACC,GAAAlS,EAAA/G,IAAA,EAACkZ,KAAAA,WACC,GAAAnS,EAAAnH,GAAA,EAACuZ,KAAAA,CAAGrZ,MAAO,CAACpB,MAAO,GAAG,WAAG,cACzB,GAAAqI,EAAAnH,GAAA,EAACuZ,KAAAA,CAAGrZ,MAAO,CAACpB,MAAO,EAAE,WAAG,WACxB,GAAAqI,EAAAnH,GAAA,EAACuZ,KAAAA,CAAGrZ,MAAO,CAACpB,MAAO,EAAE,WAAG,aACxB,GAAAqI,EAAAnH,GAAA,EAACuZ,KAAAA,CAAGrZ,MAAO,CAACpB,MAAO,GAAG,WAAG,gBAG7B,GAAAqI,EAAAnH,GAAA,EAACwZ,QAAAA,UAEEhd,EAAMiC,GAAG,CAAC,CAACJ,EAAMsE,KAEhB,IAAM8W,EACJ9W,IAAAA,GACAtE,EAAK4C,MAAM,GAAK/F,GAAAA,GAAqBA,CAACI,OAAO,EAC7C,CAACkc,EAAgBkC,aAAa,CAEhC,MACE,GAAAvS,EAAA/G,IAAA,EAACkZ,KAAAA,WACC,GAAAnS,EAAAnH,GAAA,EAAC2Z,KAAAA,UACC,GAAAxS,EAAAnH,GAAA,EAAC6W,GAAAA,CAASA,CAAAA,CAAClY,UAAW,CAACmY,KAAMzY,EAAKM,SAAS,EAAGoY,WAAY,CAACC,aAAc,EAAI,MAE/E,GAAA7P,EAAAnH,GAAA,EAAC2Z,KAAAA,UACC,GAAAxS,EAAAnH,GAAA,EAAC4Z,GAAAA,CAAaA,CAAAA,CACZvb,KAAMA,EACN5B,eAAe,mBACfod,eAAgBJ,MAGpB,GAAAtS,EAAAnH,GAAA,EAAC2Z,KAAAA,UACEF,EACC,MAEA,GAAAtS,EAAAnH,GAAA,EAAC8Z,GAAAA,CAAWA,CAAAA,CAACC,UAAW1b,EAAKM,SAAS,CAAEqb,QAAS3b,EAAKC,YAAY,KAGtE,GAAA6I,EAAAnH,GAAA,EAAC2Z,KAAAA,UACE,CAACze,GAAAA,GAAqBA,CAACK,OAAO,CAAEL,GAAAA,GAAqBA,CAACC,OAAO,CAAC,CAACiL,QAAQ,CACtE/H,EAAK4C,MAAM,EAEX,GAAAkG,EAAAnH,GAAA,EAACia,GAAAA,CAAUA,CAAAA,CACT7Y,QAAS,KACP6X,EAAgB5a,EAClB,WAEA,GAAA8I,EAAA/G,IAAA,EAAC8Z,EAAAA,EAAKA,CAAAA,WACH7b,EAAK0C,kCAAkC,CAAC,mCAI7C,UAhCG1C,EAAKoD,EAAE,CAqCpB,QAGJ,GAAA0F,EAAAnH,GAAA,EAACC,MAAAA,CAAIC,MAAO,CAAC0Y,cAAe,MAAM,WAChC,GAAAzR,EAAAnH,GAAA,EAAC6Y,GAAAA,EAAqBA,CAAAA,CAAE,GAAGrB,CAAe,OAIlD,GAEYpU,EAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,mDAKL,IAAM+W,GAA+C,CAC1D,IAA4C,CAC1Cjf,GAAAA,GAAqBA,CAACC,OAAO,CAC7BD,GAAAA,GAAqBA,CAACG,OAAO,CAC7BH,GAAAA,GAAqBA,CAACI,OAAO,CAC7BJ,GAAAA,GAAqBA,CAACK,OAAO,CAC9B,CACD,OAA+C,CAACL,GAAAA,GAAqBA,CAACG,OAAO,CAAC,CAC9E,QAAgD,CAACH,GAAAA,GAAqBA,CAACC,OAAO,CAAC,EAG3Eif,GAAoB,CACxB,CAACpV,IAAG,MAA4C4R,MAAO,WAAW,EAClE,CAAC5R,IAAG,UAAgD4R,MAAO,WAAW,EACtE,CAAC5R,IAAG,SAA+C4R,MAAO,QAAQ,EACnE,CACKuC,GAAe,OAAC,CACpBlY,OAAAA,CAAM,CACNkH,SAAAA,CAAQ,CAIT,CAAAlL,EACOod,EAAaD,GAAkB/P,IAAI,CAAC,OAAC,CAACrF,IAAAA,CAAG,CAAC,CAAA/H,SAAK+H,IAAQ/D,IAC7D,MACE,GAAAkG,EAAAnH,GAAA,EAACoN,EAAAA,CAAMA,CAAAA,CACLkN,aAAc,CAACjT,SAAU,cAAc,EACvCkT,WAAY,GACZF,WAAYA,EACZpT,MAAOmT,GACP3M,aAAc,CAACH,EAAMgB,IAEjB,GAAAnH,EAAAnH,GAAA,EAAC4N,EAAAA,EAAQA,CAAAA,CACP4M,OAAQlM,EAAMmM,SAAS,CAACD,MAAM,CAC9BpZ,QAASkN,EAAMoM,WAAW,CAE1B7M,KAAMP,EAAKsJ,KAAK,CAChB1W,MAAO,CAACpB,MAAO,OAAO,GAFjBwO,EAAKtI,GAAG,EAMnBkJ,aAAc,GAAU/F,EAASmF,EAAKtI,GAAG,WAEzC,GAAAmC,EAAAnH,GAAA,EAAC2a,EAAAA,EAAMA,CAAAA,CACLC,UAAW,GAAAzT,EAAAnH,GAAA,EAACiL,EAAAA,EAAIA,CAAAA,CAAClG,KAAK,oBACtB7E,MAAO,CAAC2a,SAAU,QAASrO,QAAS,OAAQ5D,eAAgB,eAAe,WAE1EyR,MAAAA,EAAAA,KAAAA,EAAAA,EAAYzD,KAAK,IAI1B,EAEMwC,GAAe/W,CAAAA,EAAAA,EAAAA,EAAAA,EAAOyY,GAAAA,CAAKA,EAAAA,UAAAA,CAAAA,6ECvJpBC,GAAoD,QAyD5B1D,EAaxBA,KAtEqD,CAChE4B,gBAAAA,CAAe,CACf+B,aAAAA,CAAY,CACZC,kBAAAA,CAAiB,CACjB/B,oBAAAA,CAAmB,CACb,CAAAjc,EACA,CAAC8b,EAAYC,EAAc,CAAG1T,CAAAA,EAAAA,EAAAA,CAAAA,EAA6D,CAC/FC,SAAU,SACVsO,SAAU,CAAC5S,OAAQmC,EAAqC8X,GAAG,CAC7D,GAEMhR,EAAW/L,CAAAA,EAAAA,EAAAA,OAAAA,EACf,IACEgc,EAA4C,CAACpB,EAAW,EACxDoB,EAA4C,CAAC/W,EAAqC8X,GAAG,CAAC,CACxF,CAACnC,EAAW,EAER,CAAC1B,YAAAA,CAAW,CAAEG,gBAAAA,CAAe,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,EAGrC,CACA9T,MAAO0S,GACP0B,UAAW,CACT7N,SAAU/L,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,IAAMgd,MAAMC,IAAI,CAAClR,GAAW,CAACA,EAAS,CAC1D,EACAwN,oBAAqB,QAKZlb,EAJP,IAAMA,EAAQkX,EAAK2H,oBAAoB,CACvC,GAAK7e,EAAMyC,MAAM,CAGjB,cAAOzC,CAAAA,EAAAA,CAAK,CAACqb,GAAc,GAApBrb,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAsBiF,EAAE,EAEjCqW,eAAgB,GACd,CAAKpE,MAAAA,EAAAA,KAAAA,EAAAA,EAAM2H,oBAAoB,EAGxB3H,EAAK2H,oBAAoB,CAFvB,EAAE,CAIbnD,SA/Cc,EAgDhB,GA4BA,MAzBA5D,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B+C,EAAa,IAAO,CAACG,EAAgBkC,aAAa,EAE5Elc,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR,GAAIga,EAAgBkC,aAAa,CAAE,KACnBrC,EAEE7a,EACFA,EAHd,IAAMA,EAAAA,OAAQ6a,CAAAA,EAAAA,EAAY3D,IAAI,GAAhB2D,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkBgE,oBAAoB,CACpD,GAAI7e,GAASA,EAAMyC,MAAM,CAAE,CACzB,IAAMuK,EAAAA,OAAQhN,CAAAA,EAAAA,CAAK,CAACA,EAAMyC,MAAM,CAAG,EAAE,GAAvBzC,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAyBmC,SAAS,CAC1C2c,EAAAA,OAAM9e,CAAAA,EAAAA,CAAK,CAAC,EAAE,GAARA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAU8B,YAAY,CAC9BkL,GAAS8R,GACXN,EAAa,CAACxR,EAAO8R,EAAI,CAE7B,CACF,MACEN,EAAajV,KAAAA,EAEjB,EAAG,CAACyR,EAAgBkC,aAAa,CAAkB,OAAhBrC,CAAAA,EAAAA,EAAY3D,IAAI,GAAhB2D,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkBgE,oBAAoB,CAAEL,EAAa,EAExFxd,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACJga,EAAgBkC,aAAa,CAC/BuB,EAAkBE,MAAMC,IAAI,CAAClR,IAE7B+Q,EAAkBlV,KAAAA,EAEtB,EAAG,CAACyR,EAAgBkC,aAAa,CAAEuB,EAAmB/Q,EAAS,EAG7D,GAAA/C,EAAAnH,GAAA,EAAC8Y,GAAyCA,CACxCjV,QAASwT,EAAYxT,OAAO,CAC5BrH,MAAO6a,CAAAA,OAAAA,CAAAA,EAAAA,EAAY3D,IAAI,GAAhB2D,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkBgE,oBAAoB,GAAI,EAAE,CACnD7D,gBAAiBA,EACjByB,gBAAiBA,EACjBF,WAAYA,EACZC,cAAeA,EACfE,oBAAqBA,GAG3B,8ECxEA,IAIMqC,GAA0B,CAACvD,KAAM,CAAC,CAAChT,IAAK,2BAA4BkD,MAAO,MAAM,EAAE,EAE5EsT,GAAmC,SAyDjCnE,EAxDb,IAAM9I,EAAkBC,CAAAA,EAAAA,GAAAA,EAAAA,IAClB,CAACiN,mBAAAA,CAAkB,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,EAAAA,IACvBC,EAAUC,CAAAA,EAAAA,GAAAA,CAAAA,IAEV,CAACC,YAAa,CAACC,yBAAAA,CAAwB,CAAC,CAAG,CAAC,CAAC,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,EAAAA,IAEjD,CAACze,EAAU0e,EAAY,CAAG5e,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACnC,CAAC8M,EAAU+R,EAAY,CAAG7e,CAAAA,EAAAA,EAAAA,QAAAA,EAA8C2I,KAAAA,GACxE,CAAClJ,EAAWme,EAAa,CAAG5d,CAAAA,EAAAA,EAAAA,QAAAA,EAAuC2I,KAAAA,GACnEmW,EAAeC,CAAAA,EAAAA,EAAAA,WAAAA,EACnB,eAACjf,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAMG,KAAKH,GAAG,UACb,GAAiBgN,EACR,CACLkS,eAAgBvf,MAAAA,EAAAA,KAAAA,EAAAA,CAAW,CAAC,EAAE,CAC9Bwf,gBAAiBxf,MAAAA,EAAAA,KAAAA,EAAAA,CAAW,CAAC,EAAE,CAC/BqN,SAAAA,CACF,EAEK,CACLkS,eAAgB,CAAClf,EAxBF,IAwBQof,EAAkB,GAC3C,CACF,EACA,CAACpS,EAAUrN,EAAU,EAGjB,CAAC0f,EAAOlF,EAAY,CAAGmF,CAAAA,EAAAA,GAAAA,EAAAA,EAC3BnG,IAGIpS,EAAUkY,CAAAA,EAAAA,EAAAA,WAAAA,EACd,SAAY,MAAMI,EAAM,CAACxE,UAAWmE,GAAc,GAClD,CAACK,EAAOL,EAAa,EAGvBlY,CAAAA,EAAAA,EAAAA,EAAAA,EAAqB,CACnBC,QAAAA,EACAwY,QAAS,CAACnf,GAAY,CAACT,GAAa,CAACqN,EACrChG,WAAY,IACZE,QAAS,EACX,GAEA,GAAM,CAACsY,EAAczD,EAAgB,CAAG7b,CAAAA,EAAAA,EAAAA,QAAAA,EAAyC,MAE3E,CAACuf,EAAWpF,EAAa,CAAGjS,CAAAA,EAAAA,EAAAA,CAAAA,EAChCnH,CAAAA,EAAAA,EAAAA,OAAAA,EACE,IAAO,EACLoH,SAAU,OACVC,OAAQ,OAAC,CAACoX,KAAAA,CAAI,CAAC,CAAA3f,QAAM2f,SAAAA,EAAkB,OAAS,eAChD/W,OAAQ,GACC,EAAC+W,KAAMC,EAAKC,OAAQ/W,KAAAA,EAAWmE,SAAUnE,KAAAA,CAAS,EAE7D,GACA,EAAE,GAIA2N,EAAO2D,OAAAA,CAAAA,EAAAA,EAAY3D,IAAI,GAAhB2D,KAAAA,IAAAA,EAAAA,EAAoBA,EAAYe,YAAY,CAEnD2E,EAAW5e,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,IAChBuV,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAM2H,oBAAoB,GAAI,EAAE,CACtC,CAAC3H,EAAK,EAEHlX,EAAQ2B,CAAAA,EAAAA,EAAAA,OAAAA,EACZ,SAEI4e,EADF,OACEA,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAUte,GAAG,CAAC,CAACJ,EAAMsE,KACnB,IAAMqa,EAAWD,CAAQ,CAACpa,EAAQ,EAAE,CAEpC,GAAIqa,GAAYhe,CAAAA,EAAAA,GAAAA,EAAAA,EAAmBX,EAAMsE,GAAQ,CAC/C,IAAMsa,EAAO,CAAC,GAAG5e,CAAI,EAGrB,OAFA4e,EAAK3e,YAAY,CAAG0e,EAASre,SAAS,CACtCse,EAAKhc,MAAM,CAAG/F,GAAAA,GAAqBA,CAACG,OAAO,CACpC4hB,CACT,CACA,OAAO5e,CACT,KAVA0e,KAAAA,IAAAA,EAAAA,EAUM,EAAE,EAOZ,CAACpX,KAAKG,SAAS,CAACiX,EAASte,GAAG,CAAC,GAAU,GAAcJ,MAAAA,CAAXA,EAAKoD,EAAE,CAAC,KAAejB,MAAA,CAAZnC,EAAK4C,MAAM,IAAK,EAGjEvE,EAAcyf,CAAAA,EAAAA,EAAAA,WAAAA,EAClB,IACEH,EAAY,CAAC,CAAC3d,EAChB,EACA,CAAC2d,EAAY,EAGTkB,EACJ,GAAA/V,EAAAnH,GAAA,EAACuY,GAAAA,CAAWA,CAAAA,CACVC,YAAa,IAAIC,IAAI,CAACkE,EAAU,EAChCjE,QAAS,CACP,CAACjX,GAAI,cAAemV,MAAO,aAAa,EACxC,CAACnV,GAAI,OAAQmV,MAAO,MAAM,EAC3B,CACDxV,QAAS,IACPmW,EAAa9V,EACf,IAIJ,MACE,GAAA0F,EAAA/G,IAAA,EAAA+G,EAAAC,QAAA,YACE,GAAAD,EAAAnH,GAAA,EAAC8a,GAAAA,CAAKA,CAAAA,UACJ,GAAA3T,EAAA/G,IAAA,EAACoZ,QAAAA,WACC,GAAArS,EAAA/G,IAAA,EAACkZ,KAAAA,WACC,GAAAnS,EAAAnH,GAAA,EAAC2Z,KAAAA,UAAG,YACJ,GAAAxS,EAAAnH,GAAA,EAAC2Z,KAAAA,UACEpL,EAAgB1K,OAAO,CACtB,GAAAsD,EAAAnH,GAAA,EAAC8I,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cAEjB,GAAA5B,EAAAnH,GAAA,EAACmd,GAAAA,CAAQA,CAAAA,CACPvc,OAAO,SACPwc,QAAS,CAAC7O,EAAgBS,MAAM,CAChCqO,SAAU,CAACvB,EACX3T,SAAU,MAAOC,IACf,IAAMgV,EAAUhV,EAAEnD,MAAM,CAACmY,OAAO,CAC3BA,GACH,MAAMzB,EAAQ,CACZlT,MAAO,4BACPC,YACE,yGACJ,GAEF6F,EAAgBhR,SAAS,CAAC,CAAC6f,EAC7B,SAKR,GAAAjW,EAAA/G,IAAA,EAACkZ,KAAAA,WACC,GAAAnS,EAAAnH,GAAA,EAAC2Z,KAAAA,UAAG,yBACJ,GAAAxS,EAAAnH,GAAA,EAAC2Z,KAAAA,UAAG,iBAIV,GAAAxS,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACE,SAAU,GAAID,WAAY,EAAE,EAAGY,OAAO,kBACnD,GAAAnB,EAAAnH,GAAA,EAACsd,EAAAA,EAASA,CAAAA,UAAC,0BAEZ,EASC,GAAAnW,EAAA/G,IAAA,EAAA+G,EAAAC,QAAA,YACE,GAAAD,EAAAnH,GAAA,EAACzD,GAAAA,CAAgBA,CAAAA,CACfC,MAAOA,EACPC,eAAe,mBACfC,YAAaA,EACbC,aAAcsc,EACdrc,WAAYC,EACZA,UApKW,KAqKXE,SAtKS,IAuKTC,UAxKU,OA0KZ,GAAAmK,EAAAnH,GAAA,EAACsW,GAAmCA,CAClCjY,KAAMqe,EACNnG,OAAQ,CAAC,CAACmG,EACVlG,MAAO,KACLyC,EAAgB,KAClB,IAED0D,gBAAAA,EACC,GAAAxV,EAAAnH,GAAA,EAAC+a,GAAiDA,CAChD9B,gBAAiBA,EACjBgC,kBAAmBgB,EACnBjB,aAAcA,EACd9B,oBAAqBgE,IAErBzB,EACF,GAAAtU,EAAAnH,GAAA,EAACoX,GAA8BA,CAACG,aAAcA,IAE9C,GAAApQ,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAAC4L,OAAQ,CAAC9L,IAAK,EAAE,EAAGgB,OAAO,eAC7B,GAAAnB,EAAAnH,GAAA,EAACud,GAAAA,CAAwBA,CAAAA,CACvBnf,OAAQmd,GACRrC,oBAAqBgE,SAvC7B,GAAA/V,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CACFC,QAAS,CAACE,SAAU,EAAE,EACtBC,KAAM,CAACiB,UAAW,MAAOD,eAAgB,SAAUd,IAAK,GAAID,WAAY,QAAQ,YAEhF,GAAAV,EAAAnH,GAAA,EAAC8I,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,GAAA5B,EAAAnH,GAAA,EAACC,MAAAA,CAAIC,MAAO,CAACkC,MAAOhH,EAAAA,CAAgB,EAAE,WAAG,8BA0CnD,kBC1NO,IAAMoiB,GAA0B,KACrC,IAAM/O,EAAkCC,CAAAA,EAAAA,GAAAA,CAAAA,IACxC,OAAQD,GACN,IAAK,UACH,MAAO,GAAAtH,EAAAnH,GAAA,EAACC,MAAAA,CAAAA,EACV,KAAK,iBACH,MAAO,GAAAkH,EAAAnH,GAAA,EAACyd,GAAAA,CAAAA,EACV,KAAK,iBACH,MAAO,GAAAtW,EAAAnH,GAAA,EAACwQ,EAAAA,EAAQA,CAAAA,CAACtO,GAAG,eACtB,SACEwb,CAAAA,EAAAA,GAAAA,EAAAA,EAAkBjP,EACtB,CACF,EAEMgP,GAAgC,KACpCja,CAAAA,EAAAA,EAAAA,EAAAA,IACAC,CAAAA,EAAAA,EAAAA,CAAAA,EAAiB,+BAEf,GAAA0D,EAAA/G,IAAA,EAACud,GAAAA,CAAIA,CAAAA,WACH,GAAAxW,EAAAnH,GAAA,EAACmP,GAAkBA,CAACd,IAAI,QACxB,GAAAlH,EAAAnH,GAAA,EAACwb,GAAgCA,CAAAA,g6BCEvC,IAAMoC,GAAyB,IAC7B,OAAQ5Y,GACN,KAAK6Y,GAAAA,GAAgBA,CAACC,QAAQ,CAC5B,MAAO,UACT,MAAKD,GAAAA,GAAgBA,CAACE,SAAS,CAC7B,MAAO,WACT,MAAKF,GAAAA,GAAgBA,CAACG,SAAS,CAC7B,MAAO,WACT,MAAKH,GAAAA,GAAgBA,CAACI,MAAM,CAC1B,MAAO,QACT,MAAKJ,GAAAA,GAAgBA,CAACK,SAAS,CAC7B,MAAO,aACT,MAAKL,GAAAA,GAAgBA,CAACM,iBAAiB,CACrC,MAAO,SACT,MAAKN,GAAAA,GAAgBA,CAACO,gBAAgB,CACpC,MAAO,QACX,CACF,EAEMC,GAAuBnZ,OAAOwF,IAAI,CAACmT,GAAAA,GAAgBA,EAAEpf,GAAG,CAAC,IAE7D,IAAMmY,EAAQgH,GADC5Y,GAEf,MAAO,CACL4R,MAAAA,EACA1O,MAJalD,EAKbsZ,MAAO,CALMtZ,EAKG4R,EAAM,CAE1B,GAEa2H,GAAoB,KAC/B/a,CAAAA,EAAAA,EAAAA,EAAAA,IACAC,CAAAA,EAAAA,EAAAA,CAAAA,EAAiB,wBAEjB,GAAM,CAAC+a,EAAaC,EAAe,CAAGnZ,CAAAA,EAAAA,EAAAA,CAAAA,EAA8C,CAClFO,OAAQ,GAAW,EAAC5E,OAAQyd,EAAKnV,IAAI,CAAG4R,MAAMC,IAAI,CAACsD,GAAMC,IAAI,CAAC,KAAO5Y,KAAAA,CAAS,GAC9EP,OAAQ,QAAiBC,SAAT,IAAIgT,IAAI,QAAChT,CAAAA,EAAAA,EAAGxE,MAAM,GAATwE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAWmZ,KAAK,CAAC,OAA+B,EAAE,EAC7E,GACMC,EAAeC,CAAAA,EAAAA,GAAAA,EAAAA,EAAqC,CACxD/Z,KAAM,SACN6H,KAAM,SACNmS,UAAWV,GACXW,wBAAyB,GACzBC,cAAe,GACfC,YAAa,OAAC,CAAChX,MAAAA,CAAK,CAAC,CAAAjL,QAAK,GAAAkK,EAAAnH,GAAA,EAACC,MAAAA,UAAK2d,GAAuB1V,MACvDiX,eAAgB,GAAYvB,GAAuB3c,GACnDme,MAAOZ,EACPa,eAAgBZ,CAClB,GAEM,CAACa,OAAAA,CAAM,CAAEC,iBAAAA,CAAgB,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,EAAW,CAACC,QAAS,CAACZ,EAAa,GAEhE,CAACxH,YAAAA,CAAW,CAAEG,gBAAAA,CAAe,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,EAGrC,CACA9T,MAAO+b,GACP3H,UAAW,CACT9W,OAAQud,EAAYjV,IAAI,CAAG,EAAI4R,MAAMC,IAAI,CAACoD,EAAY,CAAC,EAAE,CAAIzY,KAAAA,CAC/D,EACAmS,SA7Dc,GA8DdR,oBAAqB,QAEfiI,QADJA,uBAAAA,EAAOC,yBAAyB,CAACjL,UAAU,CAAK,OAC5CgL,CAAAA,EAAAA,EAAOC,yBAAyB,CAAChI,OAAO,CAACC,EAAc,GAAvD8H,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAyDle,EAAE,CAC3DsE,KAAAA,GACN+R,eAAgB,GACd6H,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQC,yBAAyB,CAACjL,UAAU,IAAK,qBAC7CgL,EAAOC,yBAAyB,CAAChI,OAAO,CACxC,EAAE,GAGJiI,EAAkBC,CAAAA,EAAAA,GAAAA,EAAAA,IAClB/b,EAAeuQ,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B+C,EAAalT,EAAAA,EAAeA,EACrE,CAACN,QAAAA,CAAO,CAAE6P,KAAAA,CAAI,CAAC,CAAG2D,EAClB,CAAC0I,EAA6BC,EAA+B,CACjEpQ,CAAAA,EAAAA,GAAAA,CAAAA,EAA6B,8BAA+B,GAAU,CAAC,CAACC,GAiG1E,MACE,GAAA1I,EAAA/G,IAAA,EAAA+G,EAAAC,QAAA,YACG,EAIG,KAHF,GAAAD,EAAAnH,GAAA,EA9F+B,IACnC,GAAM,CAACggB,+BAAAA,CAA8B,CAAC,CAAG1R,EAEzC,MACE,GAAAnH,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,EAAGa,OAAO,0BACtB,GAAAnB,EAAAnH,GAAA,EAACuI,EAAAA,CAAKA,CAAAA,CACJE,MACE,GAAAtB,EAAA/G,IAAA,EAAA+G,EAAAC,QAAA,YACE,GAAAD,EAAAnH,GAAA,EAACmR,OAAAA,UAAK,0BACN,GAAAhK,EAAA/G,IAAA,EAAC+Q,OAAAA,CAAKjR,MAAO,CAACgL,WAAY,QAAQ,YAC/B,IAAI,0CACuC,GAAA/D,EAAAnH,GAAA,EAAC2I,EAAAA,EAAIA,CAAAA,CAACzG,GAAG,kBAAS,SAAW,oIAEpC,IACrC,GAAAiF,EAAAnH,GAAA,EAACigB,IAAAA,CACCC,KAAK,0DACLjb,OAAO,SACPkb,IAAI,sBACL,mBAEI,UAIXC,QAAS,IAAMJ,EAA+B,OAItD,EAkEOK,CACCL,+BAAgCA,IAGpC,GAAA7Y,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CACFC,QAAS,CAACE,SAAU,GAAID,WAAY,EAAE,EACtCE,KAAM,CAACiB,UAAW,MAAOhB,WAAY,SAAUe,eAAgB,eAAe,YAE9E,GAAAzB,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,SAAUf,IAAK,CAAC,YACrC,GAAAX,EAAAnH,GAAA,EAACC,MAAAA,UAAKqf,IACLC,KAEH,GAAApY,EAAAnH,GAAA,EAACkP,EAAAA,EAAqBA,CAAAA,CAACnL,aAAcA,OAEtCzC,CA9EW,KACd,GAAIuC,GAAW,CAAC6P,EACd,MACE,GAAAvM,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACE,SAAU,EAAE,EAAGC,KAAM,CAACiB,UAAW,SAAUhB,WAAY,QAAQ,WAC5E,GAAAV,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOhB,WAAY,SAAUC,IAAK,CAAC,YACxD,GAAAX,EAAAnH,GAAA,EAAC8I,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,GAAA5B,EAAAnH,GAAA,EAACC,MAAAA,CAAIC,MAAO,CAACkC,MAAOhH,EAAAA,CAAgB,EAAE,WAAG,4BAMjD,IAAMwkB,EAA4BlM,MAAAA,EAAAA,KAAAA,EAAAA,EAAMkM,yBAAyB,OACjE,CAAIA,MAAAA,EAAAA,KAAAA,EAAAA,EAA2BjL,UAAU,IAAK,cACrC,GAAAxN,EAAAnH,GAAA,EAACgJ,EAAAA,EAAeA,CAAAA,CAACpF,MAAOgc,IAG7B,GAA+BA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAA2BhI,OAAO,CAAC3Y,MAAM,EAyB1E,GAAAkI,EAAA/G,IAAA,EAACH,MAAAA,WACE4f,EAAkB,KACjB,GAAA1Y,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,WAAY,GAAI4Y,OAAQ,EAAE,WACvC,GAAAnZ,EAAAnH,GAAA,EAACugB,GAAAA,EAAqBA,CAAAA,CAAAA,KAG1B,GAAApZ,EAAAnH,GAAA,EAACwgB,GAAAA,EAAaA,CAAAA,CACZC,UAAWb,EAA0BhI,OAAO,CAACnV,KAAK,CAAC,EAjK3C,IAkKRie,QAASrJ,EAAYqJ,OAAO,GAE7Bd,EAA0BhI,OAAO,CAAC3Y,MAAM,CAAG,EAC1C,GAAAkI,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAAC4L,OAAQ,CAAC9L,IAAK,EAAE,WACnB,GAAAH,EAAAnH,GAAA,EAAC2gB,GAAAA,EAAwBA,CAAAA,CAAE,GAAGnJ,CAAe,KAE7C,QAtCN,EAAgBjO,IAAI,CAAG,EAEnB,GAAApC,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACE,SAAU,EAAE,WACzB,GAAAR,EAAAnH,GAAA,EAACwV,GAAAA,CAAaA,CAAAA,CACZ5I,KAAK,aACLnE,MAAM,wBACNC,YAAY,+CAOlB,GAAAvB,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACE,SAAU,EAAE,WACzB,GAAAR,EAAAnH,GAAA,EAACwV,GAAAA,CAAaA,CAAAA,CACZ5I,KAAK,aACLnE,MAAM,qBACNC,YAAY,oDAwBtB,OAsBF,EAEMgX,GAAkBzJ,CAAAA,EAAAA,GAAAA,EAAAA,EAAGA,KAiCvBC,GAAAA,CAAqBA,CACrB0K,GAAAA,EAAuBA,EC/PdC,GAAwB,KACnCrd,CAAAA,EAAAA,EAAAA,EAAAA,IACAC,CAAAA,EAAAA,EAAAA,CAAAA,EAAiB,wBAGf,GAAA0D,EAAA/G,IAAA,EAACud,GAAAA,CAAIA,CAAAA,WACH,GAAAxW,EAAAnH,GAAA,EAACmP,GAAkBA,CAACd,IAAI,cACxB,GAAAlH,EAAAnH,GAAA,EAACue,GAAiBA,CAAAA,yGCmBjB,IAAMuC,GAAe,KAC1B,GAAM,CAACC,eAAAA,CAAc,CAAC,CAAGlhB,CAAAA,EAAAA,EAAAA,UAAAA,EAAWmhB,GAAAA,CAAeA,EAC7C,CAACC,WAAAA,CAAU,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,IACrB1d,CAAAA,EAAAA,EAAAA,EAAAA,IACAC,CAAAA,EAAAA,EAAAA,CAAAA,EAAiB,cAAyBjD,MAAA,CAAXygB,IAE/B,GAAM,CAACE,EAAaC,EAAe,CAAG9b,CAAAA,EAAAA,EAAAA,CAAAA,EAAuD,CAC3FC,SAAU,MACVsO,SAAU,CAACxF,IAAK,YAAY,CAC9B,GAEMgJ,EAAcgK,CAAAA,EAAAA,GAAAA,EAAAA,EAAwBJ,GACtCpB,EAAkBC,CAAAA,EAAAA,GAAAA,EAAAA,IAClB,CAACpM,KAAAA,CAAI,CAAE9P,MAAAA,CAAK,CAAC,CAAGyT,EAEhBiK,EACJ5N,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAM6N,wBAAwB,CAAC5M,UAAU,IAAK,oBAC1CjB,EAAK6N,wBAAwB,CAC7B,KAGAC,EAAeF,CAAAA,GACjB,CAACzD,GAAAA,GAAgBA,CAACK,SAAS,CAAEL,GAAAA,GAAgBA,CAACE,SAAS,CAAC,CAAC3X,QAAQ,CAACkb,EAASrgB,MAAM,EAG/E8C,EAAeuQ,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B+C,EAAa,IAAOmK,GAmDnE,MACE,GAAAra,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,QAAQ,EAAG3I,MAAO,CAACsB,OAAQ,OAAQyH,SAAU,QAAQ,YAC1E,GAAA9B,EAAAnH,GAAA,EAACsP,EAAAA,CAAUA,CAAAA,CACT7G,MACE,GAAAtB,EAAA/G,IAAA,EAACqhB,EAAAA,EAAOA,CAAAA,WACN,GAAAta,EAAAnH,GAAA,EAAC2I,EAAAA,EAAIA,CAAAA,CAACzG,GAAG,sBAAsBhC,MAAO,CAACkC,MAAOhH,EAAAA,CAAgB,EAAE,WAAG,cAGlE,MACA6lB,KAGLS,MACE,GAAAva,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACE,IAAK,GAAID,WAAY,QAAQ,YACtC2Z,EAAe,GAAAra,EAAAnH,GAAA,EAACkP,EAAAA,EAAqBA,CAAAA,CAACnL,aAAcA,IAAmB,KACvEud,EACC,GAAAna,EAAAnH,GAAA,EAAC2hB,GAAAA,EAAmBA,CAAAA,CAClBL,SAAUA,EACVZ,QAASrJ,EAAYqJ,OAAO,CAC5BkB,cAAeN,EAASrgB,MAAM,GAAK4c,GAAAA,GAAgBA,CAACK,SAAS,GAE7D,UAIT5c,WAzEH,GAAI,CAACoS,GAAQ,CAACA,EAAK6N,wBAAwB,CACzC,MACE,GAAApa,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,GAAIoa,cAAaC,CAAAA,EAAAA,GAAAA,CAAAA,EAAO,mCACpC,GAAA3a,EAAAnH,GAAA,EAAC8I,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAIvB,GAAI2K,gBAAAA,EAAK6N,wBAAwB,CAAC5M,UAAU,CAC1C,MAAO,GAAAxN,EAAAnH,GAAA,EAACgJ,EAAAA,EAAeA,CAAAA,CAACpF,MAAO8P,EAAK6N,wBAAwB,GAE9D,GAAI7N,0BAAAA,EAAK6N,wBAAwB,CAAC5M,UAAU,CAC1C,MAAO,GAAAxN,EAAAnH,GAAA,EAACwV,GAAAA,CAAaA,CAAAA,CAAC5I,KAAK,aAAanE,MAAOiL,EAAK6N,wBAAwB,CAACQ,OAAO,GAGtF,IAAMT,EAAW5N,EAAK6N,wBAAwB,CAE9C,MACE,GAAApa,EAAA/G,IAAA,EAAA+G,EAAAC,QAAA,YACE,GAAAD,EAAAnH,GAAA,EAACgiB,GAAAA,CAAuBA,CAAAA,CAACV,SAAUA,IAElCzB,EAAkB,KACjB,GAAA1Y,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,WAAY,GAAI4Y,OAAQ,EAAE,WACvC,GAAAnZ,EAAAnH,GAAA,EAACugB,GAAAA,EAAqBA,CAAAA,CAAAA,KAI1B,GAAApZ,EAAAnH,GAAA,EAACwH,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACwa,KAAM,EAAE,EAAG3Z,OAAO,kBAC/B,GAAAnB,EAAA/G,IAAA,EAACyO,EAAAA,EAAIA,CAAAA,CAACtF,KAAK,QAAQuF,cAAeqS,YAChC,GAAAha,EAAAnH,GAAA,EAACkiB,EAAAA,EAAGA,CAAAA,CAACzgB,GAAG,aAAagH,MAAM,aAAarH,QAAS,IAAMggB,EAAe,gBACtE,GAAAja,EAAAnH,GAAA,EAACkiB,EAAAA,EAAGA,CAAAA,CAACzgB,GAAG,OAAOgH,MAAM,OAAOrH,QAAS,IAAMggB,EAAe,UACzDL,EAAeoB,6BAA6B,CAC3C,GAAAhb,EAAAnH,GAAA,EAACkiB,EAAAA,EAAGA,CAAAA,CAACzgB,GAAG,OAAOgH,MAAM,mBAAmBrH,QAAS,IAAMggB,EAAe,UACpE,UAIPxd,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAOwe,aAAa,GACnB,GAAAjb,EAAAnH,GAAA,EAACuI,EAAAA,CAAKA,CAAAA,CAACC,OAAO,QAAQC,MAAO7E,EAAMwe,aAAa,CAAC3jB,GAAG,CAAC,GAAS4jB,EAAIN,OAAO,IAE3E,GAAA5a,EAAA/G,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,QAAQ,EAAG3I,MAAO,CAAC0H,KAAM,EAAGP,SAAU,WAAYib,UAAW,CAAC,YAClFnB,eAAAA,GAAgC,GAAAha,EAAAnH,GAAA,EAACuiB,GAAAA,EAA4BA,CAAAA,CAACjB,SAAUA,IACxEH,SAAAA,GAA0B,GAAAha,EAAAnH,GAAA,EAACwiB,GAAAA,CAAeA,CAAAA,CAAClB,SAAUA,EAAU1E,KAAK,SACpEuE,SAAAA,GAA0B,GAAAha,EAAAnH,GAAA,EAACyiB,GAAAA,CAAeA,CAAAA,CAACnB,SAAUA,SAI9D,MA8BF,EChIaoB,GAAe,IAExB,GAAAvb,EAAA/G,IAAA,EAAC+P,EAAAA,EAAMA,CAAAA,WACL,GAAAhJ,EAAAnH,GAAA,EAACoQ,GAAAA,CAAKA,CAAAA,CAACpG,KAAK,qBAAqBsG,eAAc,YAC7C,GAAAnJ,EAAAnH,GAAA,EAACwP,GAAoBA,CAAAA,KAEvB,GAAArI,EAAAnH,GAAA,EAACoQ,GAAAA,CAAKA,CAAAA,CAACpG,KAAK,iBAAiBuG,OAAQ,IAAM,GAAApJ,EAAAnH,GAAA,EAACwQ,EAAAA,EAAQA,CAAAA,CAACtO,GAAG,YACxD,GAAAiF,EAAAnH,GAAA,EAACoQ,GAAAA,CAAKA,CAAAA,CAACpG,KAAK,sBAAsBuG,OAAQ,IAAM,GAAApJ,EAAAnH,GAAA,EAACwQ,EAAAA,EAAQA,CAAAA,CAACtO,GAAG,kBAC7D,GAAAiF,EAAAnH,GAAA,EAACoQ,GAAAA,CAAKA,CAAAA,CAACpG,KAAK,oBAAoBuG,OAAQ,IAAM,GAAApJ,EAAAnH,GAAA,EAACwQ,EAAAA,EAAQA,CAAAA,CAACtO,GAAG,kBAC3D,GAAAiF,EAAAnH,GAAA,EAACoQ,GAAAA,CAAKA,CAAAA,CAACpG,KAAK,uBAAuBuG,OAAQ,IAAM,GAAApJ,EAAAnH,GAAA,EAACwd,GAAuBA,CAAAA,KACzE,GAAArW,EAAAnH,GAAA,EAACoQ,GAAAA,CAAKA,CAAAA,CAACpG,KAAK,kCAAkCuG,OAAQ,IAAM,GAAApJ,EAAAnH,GAAA,EAAC8gB,GAAYA,CAAAA,KACzE,GAAA3Z,EAAAnH,GAAA,EAACoQ,GAAAA,CAAKA,CAAAA,CAACpG,KAAK,sBAAsB2Y,MAAK,GAACpS,OAAQ,IAAM,GAAApJ,EAAAnH,GAAA,EAAC6gB,GAAqBA,CAAAA,KAC5E,GAAA1Z,EAAAnH,GAAA,EAACoQ,GAAAA,CAAKA,CAAAA,CAACpG,KAAK,+BACV,GAAA7C,EAAAnH,GAAA,EAACsT,GAAqBA,CAAAA,KAExB,GAAAnM,EAAAnH,GAAA,EAACoQ,GAAAA,CAAKA,CAAAA,CAACpG,KAAK,IAAIsG,eAAc,GAACC,OAAQ,IAAM,GAAApJ,EAAAnH,GAAA,EAACwQ,EAAAA,EAAQA,CAAAA,CAACtO,GAAG,4BAOhE,IAAA0gB,GAAeF,uECxBR,IAAM1M,EAAkB,GACtB,IAAIH,EAAQ,CAACgN,IAAI,CAAC,CAAC5C,EAAG6C,KAC3B,IAAMC,EAAUpR,CAAAA,EAAAA,EAAAA,EAAAA,EAAyBsO,EAAE3V,WAAW,EAChD0Y,EAAUrR,CAAAA,EAAAA,EAAAA,EAAAA,EAAyBmR,EAAExY,WAAW,EACtD,OAAOyY,EAAQE,aAAa,CAACD,EAC/B,oFCRK,IAAMvO,EAAkB,GACtB,IAAIgE,IACTjF,EAAa/U,GAAG,CAAC,GACfkT,CAAAA,EAAAA,EAAAA,EAAAA,EACEpH,CAAAA,EAAAA,EAAAA,EAAAA,EAAiB2Y,EAAOpe,UAAU,CAACC,IAAI,CAAEme,EAAOC,kBAAkB,CAACpe,IAAI,8MCyBxE,IAAM6U,EAAgB,OAAC,CAC5Bvb,KAAAA,CAAI,CACJ5B,eAAAA,CAAc,CACdod,eAAAA,CAAc,CAC0B,CAAA5c,EAClC,CAACmmB,EAAYC,EAAc,CAAGjmB,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IACvCkmB,EAAMnlB,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KAClB,IAAMolB,EAAgB9mB,qBAAAA,EAAwC,kBAAoB,MAClF,OAAQ4B,EAAK4C,MAAM,EACjB,KAAK/F,EAAAA,GAAqBA,CAACI,OAAO,CAChC,MACE,GAAAyE,EAAAC,GAAA,EAACgM,EAAAA,CAAGA,CAAAA,CAACxD,OAAO,UAAUoE,KAAMiN,EAAiB9T,KAAAA,EAAY,mBACtD8T,EAAiB,cAAgB,cAGxC,MAAK3e,EAAAA,GAAqBA,CAACK,OAAO,CAChC,IAAM+nB,EACJ,GAAAvjB,EAAAC,GAAA,EAACwjB,EAAAA,CAAOA,CAAAA,CACNC,UAAWroB,EAAAA,EAAwB,GACnCwb,MACEna,qBAAAA,EACI,+BACA,qBAIV,GAAI,YAAa4B,GAAQA,EAAKqlB,OAAO,CAACzkB,MAAM,CAAE,CAC5C,IAAM8iB,EAAU,GAAuBvhB,MAAA,CAApBnC,EAAKqlB,OAAO,CAACzkB,MAAM,CAAC,uFACvC,MACE,GAAAc,EAAAC,GAAA,EAACqB,EAAAA,CAAOA,CAAAA,CAACgG,SAAS,QAAQ/F,QAASygB,WAChCuB,GAGP,CACA,GAAI,eAAgBjlB,GAAQA,EAAKslB,UAAU,CACzC,MACE,GAAA5jB,EAAAC,GAAA,EAACqB,EAAAA,CAAOA,CAAAA,CAACgG,SAAS,QAAQ/F,QAASjD,EAAKslB,UAAU,CAAEC,cAAc,eAC/DN,IAIP,OAAOA,CACT,MAAKpoB,EAAAA,GAAqBA,CAACG,OAAO,CAChC,MACE,GAAA0E,EAAAK,IAAA,EAACoH,EAAAA,CAAGA,CAAAA,CAACI,KAAM,CAACiB,UAAW,MAAOhB,WAAY,SAAUC,IAAK,CAAC,YACxD,GAAA/H,EAAAC,GAAA,EAACgM,EAAAA,CAAGA,CAAAA,CAACxD,OAAO,kBAAS,YACpBnK,EAAKuF,KAAK,CACT,GAAA7D,EAAAC,GAAA,EAACia,EAAAA,CAAUA,CAAAA,CACT7Y,QAAS,KACPiiB,EAAc,GAChB,WACD,SAGC,OAGV,MAAKnoB,EAAAA,GAAqBA,CAACC,OAAO,CAChC,IAAM0F,EACJpE,qBAAAA,EACI4B,EAAK0C,kCAAkC,CACvC1C,EAAKyC,MAAM,CAAC7B,MAAM,CAClB4kB,EACJ,GAAA9jB,EAAAK,IAAA,EAAC4L,EAAAA,CAAGA,CAAAA,CAACxD,OAAO,oBACT3H,EAAM,IAAE0iB,EACR1hB,CAAAA,EAAAA,EAAAA,CAAAA,EAAShB,EAAO,GAAI,KAAK,gBAG9B,GAAI,YAAaxC,GAAQA,EAAKqlB,OAAO,CAACzkB,MAAM,CAAGZ,EAAKyC,MAAM,CAAC7B,MAAM,CAAE,CACjE,IAAM8iB,EAAU,GACd1jB,MAAAA,CADiBA,EAAKqlB,OAAO,CAACzkB,MAAM,CAAC,yBAEtCuB,MAAA,CADCnC,EAAKqlB,OAAO,CAACzkB,MAAM,CAAGZ,EAAKyC,MAAM,CAAC7B,MAAM,CACzC,qEACD,MACE,GAAAc,EAAAC,GAAA,EAACqB,EAAAA,CAAOA,CAAAA,CAACgG,SAAS,QAAQ/F,QAASygB,WAChC8B,GAGP,CACA,OAAOA,CACX,CACF,EAAG,CAAChK,EAAgBxb,EAAM5B,EAAe,EAEzC,MACE,GAAAsD,EAAAK,IAAA,EAAAL,EAAAqH,QAAA,YACGkc,EACAjlB,EAAKuF,KAAK,CACT,GAAA7D,EAAAK,IAAA,EAAC0jB,EAAAA,EAAMA,CAAAA,CAACvN,OAAQ6M,EAAY3a,MAAM,QAAQvI,MAAO,CAACpB,MAAO,MAAM,YAC7D,GAAAiB,EAAAC,GAAA,EAAC+jB,EAAAA,EAAUA,CAAAA,UACT,GAAAhkB,EAAAC,GAAA,EAACgJ,EAAAA,EAAeA,CAAAA,CAACpF,MAAOvF,EAAKuF,KAAK,KAEpC,GAAA7D,EAAAC,GAAA,EAACgkB,EAAAA,EAAYA,CAAAA,CAACC,UAAS,YACrB,GAAAlkB,EAAAC,GAAA,EAAC2a,EAAAA,EAAMA,CAAAA,CACLnS,OAAO,UACPpH,QAAS,KACPiiB,EAAc,GAChB,WACD,eAKH,OAGV","sources":["webpack://_N_E/../ui-core/src/instigation/LiveTickTimeline2.tsx","webpack://_N_E/../ui-core/src/instigation/util.ts","webpack://_N_E/../ui-core/src/overview/OverviewAssetsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewPageAlerts.oss.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTabs.tsx","webpack://_N_E/../ui-core/src/overview/OverviewPageHeader.tsx","webpack://_N_E/../ui-core/src/overview/OverviewActivityRoot.tsx","webpack://_N_E/../ui-core/src/resources/VirtualizedResourceRow.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesTable.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesRoot.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AssetDaemonTicksQuery.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationTickDetailDialog.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializeRunHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/InstanceAutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/GlobalAutomaterializationContent.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationRoot.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfills.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfillsRoot.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPage.tsx","webpack://_N_E/../ui-core/src/overview/OverviewRoot.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/ticks/TickStatusTag.tsx"],"sourcesContent":["import {Caption, Colors, Tooltip, ifPlural, useViewport} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport memoize from 'lodash/memoize';\nimport {memo, useContext, useEffect, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {TickResultType} from '../ticks/TickStatusTag';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {isStuckStartedTick} from './util';\nimport {TimeContext} from '../app/time/TimeContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\n\ndayjs.extend(relativeTime);\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreen(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRed(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavender(),\n  [InstigationTickStatus.SKIPPED]: Colors.backgroundDisabled(),\n};\n\nconst HoverColorMap = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreenHover(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRedHover(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavenderHover(),\n  [InstigationTickStatus.SKIPPED]: Colors.accentGrayHover(),\n};\n\nconst REFRESH_INTERVAL = 100;\n\nconst MIN_WIDTH = 8; // At least 8px wide\n\nconst MINUTE = 60000;\n\nconst timestampFormat = memoize((timezone: string) => {\n  return new Intl.DateTimeFormat(navigator.language, {\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hourCycle: 'h23',\n    timeZone: timezone === 'Automatic' ? browserTimezone() : timezone,\n    timeZoneName: 'short',\n  });\n});\nexport const LiveTickTimeline = <T extends HistoryTickFragment | AssetDaemonTickFragment>({\n  ticks,\n  tickResultType,\n  onHoverTick,\n  onSelectTick,\n  exactRange,\n  timeRange = MINUTE * 5, // 5 minutes,\n  tickGrid = MINUTE, // 1 minute\n  timeAfter = MINUTE, // 1 minute\n}: {\n  ticks: T[];\n  tickResultType: TickResultType;\n  onHoverTick: (InstigationTick?: T) => void;\n  onSelectTick: (InstigationTick: T) => void;\n  exactRange?: [number, number];\n  timeRange?: number;\n  tickGrid?: number;\n  timeAfter?: number;\n}) => {\n  const [now, setNow] = useState<number>(Date.now());\n  const [isPaused, setPaused] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!isPaused && !exactRange) {\n      const interval = setInterval(() => {\n        setNow(Date.now());\n      }, REFRESH_INTERVAL);\n      return () => clearInterval(interval);\n    }\n    return () => {};\n  }, [exactRange, isPaused]);\n\n  const maxX = exactRange?.[1] ? exactRange[1] * 1000 : now + timeAfter;\n  const minX = exactRange?.[0] ? exactRange[0] * 1000 : now - timeRange;\n\n  const fullRange = maxX - minX;\n\n  const {viewport, containerProps} = useViewport();\n\n  const ticksReversed = useMemo(() => {\n    // Reverse ticks to make tab order correct\n    return ticks.filter((tick) => !tick.endTimestamp || tick.endTimestamp * 1000 > minX).reverse();\n  }, [ticks, minX]);\n\n  const ticksToDisplay = useMemo(() => {\n    return ticksReversed.map((tick, i) => {\n      const startX = getX(1000 * tick.timestamp!, viewport.width, minX, fullRange);\n      const endTimestamp = isStuckStartedTick(tick, ticksReversed.length - i - 1)\n        ? tick.timestamp\n        : tick.endTimestamp\n          ? tick.endTimestamp * 1000\n          : now;\n      const endX = getX(endTimestamp, viewport.width, minX, fullRange);\n      return {\n        ...tick,\n        width: Math.max(endX - startX, MIN_WIDTH),\n        startX,\n      };\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [minX, now, ticksReversed, fullRange, viewport.width]);\n\n  const timeTickGridDelta = Math.max((maxX - minX) / 25, tickGrid);\n  const tickGridDelta = timeTickGridDelta / 5;\n  const startTickGridX = Math.ceil(minX / tickGridDelta) * tickGridDelta;\n  const gridTicks = useMemo(() => {\n    const ticks = [];\n    for (let i = startTickGridX; i <= maxX; i += tickGridDelta) {\n      ticks.push({\n        time: i,\n        x: getX(i, viewport.width, minX, fullRange),\n        showLabel: i % timeTickGridDelta === 0,\n      });\n    }\n    return ticks;\n  }, [maxX, startTickGridX, tickGridDelta, viewport.width, minX, fullRange, timeTickGridDelta]);\n\n  const {\n    timezone: [timezone],\n  } = useContext(TimeContext);\n\n  return (\n    <div style={{marginRight: '8px'}}>\n      <div {...containerProps}>\n        <TicksWrapper>\n          {gridTicks.map((tick) => (\n            <GridTick\n              key={tick.time}\n              style={{\n                transform: `translateX(${tick.x}px)`,\n              }}\n            >\n              <GridTickLine />\n              {tick.showLabel ? (\n                <GridTickTime>\n                  <Caption>{timestampFormat(timezone).format(new Date(tick.time))}</Caption>\n                </GridTickTime>\n              ) : null}\n            </GridTick>\n          ))}\n          {ticksToDisplay.map((tick) => {\n            const count =\n              (tickResultType === 'materializations' || !('runIds' in tick)\n                ? tick.requestedAssetMaterializationCount\n                : tick.runIds?.length) ?? 0;\n            return (\n              <Tick\n                key={tick.id}\n                style={{\n                  transform: `translateX(${tick.startX}px)`,\n                  width: `${tick.width}px`,\n                }}\n                status={tick.status}\n                onMouseEnter={() => {\n                  onHoverTick(tick);\n                  setPaused(true);\n                }}\n                onMouseLeave={() => {\n                  onHoverTick();\n                  setPaused(false);\n                }}\n                onClick={() => {\n                  onSelectTick(tick);\n                }}\n              >\n                <Tooltip content={<TickTooltip tick={tick} tickResultType={tickResultType} />}>\n                  <div style={{width: tick.width + 'px', height: '80px'}}>\n                    {count > 0 ? count : null}\n                  </div>\n                </Tooltip>\n              </Tick>\n            );\n          })}\n          <NowIndicator\n            style={{\n              transform: `translateX(${getX(now, viewport.width, minX, fullRange)}px)`,\n            }}\n          />\n        </TicksWrapper>\n        <TimeAxisWrapper></TimeAxisWrapper>\n      </div>\n    </div>\n  );\n};\n\nconst TickTooltip = memo(\n  ({\n    tick,\n    tickResultType,\n  }: {\n    tick: HistoryTickFragment | AssetDaemonTickFragment;\n    tickResultType: TickResultType;\n  }) => {\n    const status = useMemo(() => {\n      if (tick.status === InstigationTickStatus.FAILURE) {\n        return 'Evaluation failed';\n      }\n      if (tick.status === InstigationTickStatus.STARTED) {\n        return 'Evaluating…';\n      }\n      if (tickResultType === 'materializations' || !('runs' in tick)) {\n        return `${tick.requestedAssetMaterializationCount} materialization${ifPlural(\n          tick.requestedAssetMaterializationCount,\n          '',\n          's',\n        )} requested`;\n      } else {\n        return `${tick.runs?.length || 0} run${ifPlural(tick.runs?.length, '', 's')} requested`;\n      }\n    }, [tick, tickResultType]);\n    const startTime = dayjs(1000 * tick.timestamp!);\n    const endTime = dayjs(tick.endTimestamp ? 1000 * tick.endTimestamp : Date.now());\n    const elapsedTime = startTime.to(endTime, true);\n    return (\n      <div>\n        <Caption as=\"div\">\n          {status} ({elapsedTime})\n        </Caption>\n        {tick.status === InstigationTickStatus.STARTED ? null : (\n          <Caption color={Colors.textLight()}>Click for details</Caption>\n        )}\n      </div>\n    );\n  },\n);\n\nconst TicksWrapper = styled.div`\n  position: relative;\n  height: 100px;\n  padding: 10px 2px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n`;\n\nconst TimeAxisWrapper = styled.div`\n  height: 24px;\n`;\n\nconst Tick = styled.div<{status: InstigationTickStatus}>`\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  height: 80px;\n  will-change: transform, width;\n  border-radius: 2px;\n  div {\n    place-content: center;\n    display: grid;\n  }\n  color: ${Colors.backgroundDefault()};\n  ${({status}) => `\n    background: ${COLOR_MAP[status]};\n    &:hover {\n      background: ${HoverColorMap[status]};\n    }\n  `}\n`;\n\nconst GridTick = styled.div`\n  position: absolute;\n  top: 0;\n  height: 124px;\n  will-change: transform;\n`;\nconst GridTickLine = styled.div`\n  position: absolute;\n  top: 0;\n  height: 108px;\n  width: 1px;\n  background: ${Colors.keylineDefault()};\n`;\nconst GridTickTime = styled.div`\n  height: 16px;\n  position: absolute;\n  bottom: 0;\n  width: 100px;\n  margin-left: -24px;\n`;\n\nconst NowIndicator = styled.div`\n  position: absolute;\n  top: 0;\n  height: 126px;\n  width: 2px;\n  background: ${Colors.accentPrimary()};\n  &:after {\n    content: 'Now';\n    position: absolute;\n    left: 0;\n    background: ${Colors.accentPrimary()};\n    color: ${Colors.accentReversed()};\n    bottom: 0;\n    font-size: 12px;\n    padding: 3px 4px;\n  }\n`;\n\nfunction getX(timestamp: number, viewportWidth: number, minX: number, timeRange: number) {\n  return (viewportWidth * (timestamp - minX)) / timeRange;\n}\n","import {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationTick,\n  InstigationTickStatus,\n} from '../graphql/types';\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst THREE_DAYS = 60 * 60 * 24 * 3;\n\nexport const truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nexport function isStuckStartedTick(\n  tick: Pick<InstigationTick, 'timestamp' | 'endTimestamp' | 'status'>,\n  index: number,\n) {\n  return (\n    !tick.endTimestamp &&\n    // If the index is 0 and the tick does have an end timestamp then we can't know if its actually stuck or still in progress\n    // but if its older than three days then its very likely stuck\n    ((index !== 0 && tick.status === InstigationTickStatus.STARTED) ||\n      tick.timestamp * 1000 < Date.now() - THREE_DAYS)\n  );\n}\n\nexport function countPartitionsAddedOrDeleted(\n  requests: Pick<DynamicPartitionsRequestResult, 'partitionKeys' | 'type'>[],\n  type: DynamicPartitionsRequestType,\n) {\n  return requests.reduce((sum, request) => {\n    if (request.type === type) {\n      return sum + (request.partitionKeys?.length || 0);\n    }\n    return sum;\n  }, 0);\n}\n","import {\n  Alert,\n  Box,\n  Caption,\n  Colors,\n  Icon,\n  MenuItem,\n  Select,\n  Spinner,\n  Tag,\n  TextInput,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, RefreshState, useRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetsBaseData} from '../asset-data/AssetBaseDataProvider';\nimport {StatusCase, buildAssetNodeStatusContent} from '../asset-graph/AssetNodeStatusContent';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {groupAssetsByStatus} from '../asset-graph/util';\nimport {partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {useAllAssets} from '../assets/AssetsCatalogTable';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetCatalogTableQuery} from '../assets/types/AssetsCatalogTable.types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {Container, HeaderCell, HeaderRow, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: RefreshState}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewAssetsRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Assets');\n\n  const {assets, query, error, loading} = useAllAssets();\n  const refreshState = useRefreshAtInterval<any>({\n    refresh: query,\n    intervalMs: FIFTEEN_SECONDS,\n    leading: true,\n  });\n\n  const groupedAssetsUnfiltered = React.useMemo(() => {\n    if (assets) {\n      return groupAssets(assets);\n    }\n    return [];\n  }, [assets]);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'q',\n    decode: (qs) => (qs.searchQuery ? JSON.parse(qs.searchQuery) : ''),\n    encode: (searchQuery) => ({searchQuery: searchQuery ? JSON.stringify(searchQuery) : undefined}),\n  });\n\n  const groupedAssets = React.useMemo(() => {\n    if (searchValue === '') {\n      return groupedAssetsUnfiltered;\n    }\n    return groupedAssetsUnfiltered.filter((group) => {\n      return (\n        (group.groupName || UNGROUPED_ASSETS).toLowerCase().includes(searchValue.toLowerCase()) ||\n        group.repositoryName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    });\n  }, [groupedAssetsUnfiltered, searchValue]);\n\n  const orderedAssets = React.useMemo(\n    () => groupedAssets.flatMap((group) => group.assets.map((asset) => asset.key)) ?? [],\n    [groupedAssets],\n  );\n  useAssetsBaseData(orderedAssets, 'OverviewAssetsRoot');\n\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groupedAssets.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 82,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  function content() {\n    if (loading) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (error) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <PythonErrorInfo error={error} />\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column'}} style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualHeaderRow />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const group = groupedAssets[index]!;\n              return <VirtualRow key={key} start={start} height={size} group={group} />;\n            })}\n          </Inner>\n        </Container>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'sticky', top: 0, zIndex: 1}}>\n        <Header refreshState={refreshState} />\n        <Box\n          padding={{horizontal: 24, vertical: 16}}\n          flex={{alignItems: 'center', gap: 12, grow: 0}}\n        >\n          <TabButton selected=\"assets\" />\n          <TextInput\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n            }}\n            placeholder=\"Filter asset groups…\"\n          />\n        </Box>\n        <Box padding={{horizontal: 24, vertical: 16}} border=\"top\">\n          <Alert\n            intent=\"info\"\n            title=\"This Assets tab will be removed in an upcoming release.\"\n            description={\n              <>\n                Use the <Link to=\"/asset-groups\">global asset lineage page</Link> to view grouped\n                asset status details.\n              </>\n            }\n          />\n        </Box>\n      </div>\n      {content()}\n    </>\n  );\n};\n\ntype Assets = Extract<\n  AssetCatalogTableQuery['assetsOrError'],\n  {__typename: 'AssetConnection'}\n>['nodes'];\n\nfunction groupAssets(assets: Assets) {\n  const groups: Record<\n    string,\n    {\n      groupName: string | null;\n      repositoryName: string;\n      assets: Assets;\n    }\n  > = {};\n\n  assets.forEach((asset) => {\n    if (!asset.definition) {\n      return;\n    }\n    const groupName = asset.definition.groupName;\n    const repositoryName = asset.definition.repository.name;\n    const key = `${groupName}||${repositoryName}`;\n    const target = groups[key] || {\n      groupName,\n      repositoryName,\n      assets: [] as Assets,\n    };\n    target.assets.push(asset);\n    groups[key] = target;\n  });\n  return Object.values(groups);\n}\n\nconst TEMPLATE_COLUMNS = '5fr 1fr 1fr 1fr 1fr';\n\nconst VirtualHeaderRow = () => (\n  <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n    <HeaderCell>Group name</HeaderCell>\n    <HeaderCell>Missing</HeaderCell>\n    <HeaderCell>Failed/Overdue</HeaderCell>\n    <HeaderCell>In progress</HeaderCell>\n    <HeaderCell>Materialized</HeaderCell>\n  </HeaderRow>\n);\n\nconst UNGROUPED_ASSETS = 'Ungrouped Assets';\ntype RowProps = {\n  height: number;\n  start: number;\n  group: ReturnType<typeof groupAssets>[0];\n};\nfunction VirtualRow({height, start, group}: RowProps) {\n  const assetKeys = React.useMemo(\n    () => group.assets.map((asset) => ({path: asset.key.path})),\n    [group.assets],\n  );\n\n  const {liveDataByNode} = useAssetsBaseData(assetKeys);\n\n  const statuses = React.useMemo(() => {\n    return groupAssetsByStatus(group.assets, liveDataByNode);\n  }, [liveDataByNode, group.assets]);\n\n  const repo = group.assets.find((asset) => asset.definition?.repository)?.definition?.repository;\n  const repoAddress = buildRepoAddress(repo?.name || '', repo?.location.name || '');\n\n  const {containerProps, viewport} = useViewport();\n\n  const isBatchStillLoading = assetKeys.length !== Object.keys(liveDataByNode).length;\n  const zeroOrBlank = isBatchStillLoading ? '' : '0';\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <Cell>\n          <Box flex={{direction: 'row', justifyContent: 'space-between', grow: 1}}>\n            <Box flex={{direction: 'column', gap: 2, grow: 1}}>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <Icon name=\"asset_group\" />\n                {group.groupName ? (\n                  <Link\n                    style={{fontWeight: 700}}\n                    to={workspacePathFromAddress(repoAddress, `/asset-groups/${group.groupName}`)}\n                  >\n                    {group.groupName}\n                  </Link>\n                ) : (\n                  UNGROUPED_ASSETS\n                )}\n              </Box>\n              <div {...containerProps}>\n                <RepositoryLinkWrapper maxWidth={viewport.width}>\n                  <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                </RepositoryLinkWrapper>\n              </div>\n            </Box>\n            <Box flex={{direction: 'column', justifyContent: 'center'}}>\n              {isBatchStillLoading ? <Spinner purpose=\"body-text\" /> : null}\n            </Box>\n          </Box>\n        </Cell>\n        <Cell>\n          {statuses.missing.length ? (\n            <SelectOnHover\n              assets={statuses.missing}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MISSING) {\n                  return status.numMissing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"missing\"\n            >\n              <Tag intent=\"none\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: '12px',\n                      height: '12px',\n                      border: `2px solid ${Colors.borderDefault()}`,\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.missing.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.failed.length ? (\n            <SelectOnHover\n              assets={statuses.failed}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_FAILED) {\n                  return status.numFailed || 0;\n                }\n                return 0;\n              }}\n              adjective=\"failed\"\n            >\n              <Tag intent=\"danger\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderLeft: '6px solid transparent',\n                      borderRight: '6px solid transparent',\n                      borderBottom: '10px solid red',\n                      display: 'inline-block',\n                    }}\n                  />\n                  {statuses.failed.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.inprogress.length ? (\n            <SelectOnHover\n              assets={statuses.inprogress}\n              getCount={({status}) => {\n                if (status.case === StatusCase.MATERIALIZING) {\n                  return status.numMaterializing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materializing\"\n            >\n              <Tag intent=\"primary\" icon=\"spinner\">\n                {statuses.inprogress.length}\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.successful.length ? (\n            <SelectOnHover\n              assets={statuses.successful}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MATERIALIZED) {\n                  return status.numMaterialized || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materialized\"\n            >\n              <Tag intent=\"success\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      backgroundColor: Colors.accentGreen(),\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.successful.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n      </RowGrid>\n    </Row>\n  );\n}\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    vertical-align: middle;\n  }\n`;\n\nconst Cell = ({children}: {children: React.ReactNode}) => {\n  return (\n    <RowCell style={{color: Colors.textDefault()}}>\n      <Box flex={{direction: 'row', alignItems: 'center', grow: 1}}>{children}</Box>\n    </RowCell>\n  );\n};\n\nconst RepositoryLinkWrapper = styled.div<{maxWidth?: number}>`\n  font-size: 12px;\n  pointer-events: none;\n  a {\n    color: ${Colors.textLight()};\n    pointer-events: none;\n    max-width: ${({maxWidth}) => (maxWidth ? 'unset' : `${maxWidth}px`)};\n  }\n`;\n\ntype AssetWithStatusType = {\n  asset: Assets[0];\n  status: ReturnType<typeof buildAssetNodeStatusContent>;\n};\nfunction SelectOnHover({\n  assets,\n  children,\n  getCount,\n  adjective,\n}: {\n  assets: AssetWithStatusType[];\n  children: React.ReactNode;\n  getCount: (asset: AssetWithStatusType) => number;\n  adjective: string;\n}) {\n  return (\n    <SelectWrapper>\n      <Select\n        items={assets}\n        itemPredicate={(query, item) =>\n          displayNameForAssetKey(item.asset.key)\n            .toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase())\n        }\n        itemRenderer={(item) => {\n          const count = getCount(item);\n          return (\n            <LinkWithNoUnderline to={assetDetailsPathForKey(item.asset.key)} target=\"_blank\">\n              <MenuItem\n                key={displayNameForAssetKey(item.asset.key)}\n                text={\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                    <div style={{paddingLeft: '4px'}}>\n                      <Icon name=\"asset\" />\n                    </div>\n                    <div\n                      style={{overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis'}}\n                    >\n                      {displayNameForAssetKey(item.asset.key)}\n                    </div>\n                    {count && count > 0 ? (\n                      <Caption style={{color: Colors.textLight()}}>\n                        {partitionCountString(count)} {adjective}\n                      </Caption>\n                    ) : null}\n                  </Box>\n                }\n              />\n            </LinkWithNoUnderline>\n          );\n        }}\n        onItemSelect={() => {}}\n      >\n        {children}\n      </Select>\n    </SelectWrapper>\n  );\n}\n\nconst SelectWrapper = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst LinkWithNoUnderline = styled(Link)`\n  &:hover {\n    text-decoration: none;\n  }\n`;\n","export const OverviewPageAlerts = () => null;\n","import {Box, Colors, Spinner, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {QueryResult} from '../apollo-client';\nimport {QueryRefreshCountdown, RefreshState} from '../app/QueryRefresh';\nimport {AssetFeatureContext} from '../assets/AssetFeatureContext';\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {useAutomaterializeDaemonStatus} from '../assets/useAutomaterializeDaemonStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: RefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  const {enableAssetHealthOverviewPreview} = useContext(AssetFeatureContext);\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"activity\" title=\"Timeline\" to=\"/overview/activity\" />\n        {enableAssetHealthOverviewPreview && (\n          <TabLink id=\"asset-health\" title=\"Asset health\" to=\"/overview/asset-health\" />\n        )}\n        {automaterializeSensorsFlagState === 'has-global-amp' ? (\n          <TabLink\n            id=\"amp\"\n            title={\n              <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                <div>Auto-materialize</div>\n                {automaterialize.loading ? (\n                  <Spinner purpose=\"body-text\" />\n                ) : (\n                  <div\n                    style={{\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                      backgroundColor:\n                        automaterialize.paused === false\n                          ? Colors.accentBlue()\n                          : Colors.accentGray(),\n                    }}\n                  />\n                )}\n              </Box>\n            }\n            to=\"/overview/automation\"\n          />\n        ) : null}\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box style={{alignSelf: 'center'}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {Box, PageHeader} from '@dagster-io/ui-components';\nimport React from 'react';\nimport {OverviewPageAlerts} from 'shared/overview/OverviewPageAlerts.oss';\n\nimport {OverviewTabs} from './OverviewTabs';\n\nexport const OverviewPageHeader = ({\n  tab,\n  queryData,\n  refreshState,\n  ...rest\n}: React.ComponentProps<typeof OverviewTabs> &\n  Omit<React.ComponentProps<typeof PageHeader>, 'title'>) => {\n  return (\n    <PageHeader\n      tabs={\n        <Box flex={{direction: 'column', gap: 8}}>\n          <OverviewTabs tab={tab} queryData={queryData} refreshState={refreshState} />\n          <OverviewPageAlerts />\n        </Box>\n      }\n      {...rest}\n    />\n  );\n};\n","import {Box, JoinedButtons} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect, Switch} from 'react-router-dom';\n\nimport {OverviewAssetsRoot} from './OverviewAssetsRoot';\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewTabs} from './OverviewTabs';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\nimport {Route} from '../app/Route';\nimport {AssetFeatureContext} from '../assets/AssetFeatureContext';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ActivatableButton} from '../runs/RunListTabs';\n\nexport const OverviewActivityRoot = () => {\n  useDocumentTitle('Overview | Activity');\n\n  const header = React.useCallback(\n    ({refreshState}: {refreshState: React.ComponentProps<typeof OverviewTabs>['refreshState']}) => (\n      <OverviewPageHeader tab=\"activity\" refreshState={refreshState} />\n    ),\n    [],\n  );\n\n  const [_defaultTab, setDefaultTab] = useStateWithStorage<'timeline' | 'assets'>(\n    'overview-activity-tab',\n    (json) => (['timeline', 'assets'].includes(json) ? json : 'timeline'),\n  );\n\n  const {enableAssetHealthOverviewPreview} = React.useContext(AssetFeatureContext);\n  const defaultTab = enableAssetHealthOverviewPreview ? 'timeline' : _defaultTab;\n\n  const tabButton = React.useCallback(\n    ({selected}: {selected: 'timeline' | 'assets'}) => {\n      if (enableAssetHealthOverviewPreview) {\n        return null;\n      }\n      if (defaultTab !== selected) {\n        setDefaultTab(selected);\n      }\n      return (\n        <JoinedButtons>\n          <ActivatableButton $active={selected === 'timeline'} to=\"/overview/activity/timeline\">\n            Timeline\n          </ActivatableButton>\n          <ActivatableButton $active={selected === 'assets'} to=\"/overview/activity/assets\">\n            Assets\n          </ActivatableButton>\n        </JoinedButtons>\n      );\n    },\n    [defaultTab, setDefaultTab, enableAssetHealthOverviewPreview],\n  );\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Switch>\n        {!enableAssetHealthOverviewPreview && (\n          <Route path=\"/overview/activity/assets\">\n            <OverviewAssetsRoot Header={header} TabButton={tabButton} />\n          </Route>\n        )}\n        <Route path=\"/overview/activity/timeline\">\n          <OverviewTimelineRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route\n          path=\"*\"\n          isNestingRoute\n          render={React.useCallback(\n            () =>\n              defaultTab === 'timeline' ? (\n                <Redirect to=\"/overview/activity/timeline\" />\n              ) : (\n                <Redirect to=\"/overview/activity/assets\" />\n              ),\n            [defaultTab],\n          )}\n        />\n      </Switch>\n    </Box>\n  );\n};\n","import {Box, Caption, Colors, Icon, MiddleTruncate, Mono, Tooltip} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {succinctType} from './ResourceRoot';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\nimport {ResourceEntryFragment} from './types/WorkspaceResourcesQuery.types';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 1fr';\n\ninterface ResourceRowProps extends ResourceEntryFragment {\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedResourceRow = (props: ResourceRowProps) => {\n  const {\n    name,\n    description,\n    repoAddress,\n    start,\n    height,\n    resourceType,\n    parentResources,\n    jobsOpsUsing,\n    assetKeysUsing,\n    schedulesUsing,\n    sensorsUsing,\n  } = props;\n  const resourceTypeSuccinct = succinctType(resourceType);\n  const uses =\n    parentResources.length +\n    jobsOpsUsing.length +\n    assetKeysUsing.length +\n    schedulesUsing.length +\n    sensorsUsing.length;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n              <Icon name=\"resource\" color={Colors.accentGray()} />\n\n              <span style={{fontWeight: 500}}>\n                <Link to={workspacePathFromAddress(repoAddress, `/resources/${name}`)}>\n                  <MiddleTruncate text={name} />\n                </Link>\n              </span>\n            </Box>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: Colors.textLight(),\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <Tooltip content={resourceType}>\n            <Mono>{resourceTypeSuccinct}</Mono>\n          </Tooltip>\n        </RowCell>\n        <RowCell>\n          <Link to={workspacePathFromAddress(repoAddress, `/resources/${name}/uses`)}>{uses}</Link>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedResourceHeader = () => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Uses</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesQuery.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedResourceHeader />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            return type === 'header' ? (\n              <RepoRow\n                repoAddress={row.repoAddress}\n                key={key}\n                height={size}\n                start={start}\n                onToggle={onToggle}\n                onToggleAll={onToggleAll}\n                expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                rightElement={\n                  <Tooltip\n                    content={\n                      row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                    }\n                    placement=\"top\"\n                  >\n                    <Tag>{row.resourceCount}</Tag>\n                  </Tooltip>\n                }\n              />\n            ) : (\n              <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","import {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesQuery';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesQuery.types';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, data, visibleRepos]);\n\n  const loading = !data && queryLoading && workspaceLoading;\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"resources\" refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? (\n              <SearchInputSpinner tooltipContent=\"Loading resources…\" />\n            ) : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<\n        OverviewResourcesQuery['workspaceOrError'],\n        {__typename: 'Workspace'}\n      >['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  id\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {gql} from '../../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\n\nexport const ASSET_DAEMON_TICK_FRAGMENT = gql`\n  fragment AssetDaemonTickFragment on InstigationTick {\n    id\n    timestamp\n    endTimestamp\n    status\n    instigationType\n    error {\n      ...PythonErrorFragment\n    }\n    requestedAssetKeys {\n      path\n    }\n    requestedAssetMaterializationCount\n    autoMaterializeAssetEvaluationId\n    requestedMaterializationsForAssets {\n      assetKey {\n        path\n      }\n      partitionKeys\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const ASSET_DAEMON_TICKS_QUERY = gql`\n  query AssetDaemonTicksQuery(\n    $dayRange: Int\n    $dayOffset: Int\n    $statuses: [InstigationTickStatus!]\n    $limit: Int\n    $cursor: String\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    autoMaterializeTicks(\n      dayRange: $dayRange\n      dayOffset: $dayOffset\n      statuses: $statuses\n      limit: $limit\n      cursor: $cursor\n      beforeTimestamp: $beforeTimestamp\n      afterTimestamp: $afterTimestamp\n    ) {\n      id\n      ...AssetDaemonTickFragment\n    }\n  }\n\n  ${ASSET_DAEMON_TICK_FRAGMENT}\n`;\n","import {Box, DialogHeader} from '@dagster-io/ui-components';\nimport {memo} from 'react';\n\nimport {AssetDaemonTickFragment} from './types/AssetDaemonTicksQuery.types';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {TickDetailSummary} from '../../instigation/TickDetailsDialog';\nimport {TickMaterializationsTable} from '../../instigation/TickMaterializationsTable';\nimport {AssetKeysDialog} from '../AutoMaterializePolicyPage/AssetKeysDialog';\n\nexport const AutomaterializationTickDetailDialog = memo(\n  ({\n    tick,\n    isOpen,\n    close,\n  }: {\n    tick: AssetDaemonTickFragment | null;\n    isOpen: boolean;\n    close: () => void;\n  }) => {\n    return (\n      <AssetKeysDialog\n        isOpen={isOpen}\n        setIsOpen={close}\n        height={400}\n        header={\n          <DialogHeader\n            label={\n              tick ? (\n                <div>\n                  <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n                </div>\n              ) : (\n                ''\n              )\n            }\n          />\n        }\n        content={\n          <div\n            style={{\n              display: 'grid',\n              gridTemplateRows: 'auto auto minmax(0, 1fr)',\n              height: '100%',\n            }}\n          >\n            <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n              {tick ? <TickDetailSummary tick={tick} tickResultType=\"materializations\" /> : null}\n            </Box>\n            {tick?.status === InstigationTickStatus.STARTED ? null : (\n              <TickMaterializationsTable tick={tick} />\n            )}\n          </div>\n        }\n      />\n    );\n  },\n);\n","import {Box, ButtonGroup, CursorHistoryControls} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {RunTable} from '../../runs/RunTable';\nimport {\n  RunsRootQuery,\n  RunsRootQueryVariables,\n} from '../../runs/types/usePaginatedRunsTableRuns.types';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\nimport {RUNS_ROOT_QUERY} from '../../runs/usePaginatedRunsTableRuns';\n\nconst PAGE_SIZE = 15;\n\nexport const AutomaterializeRunHistoryTable = ({\n  filterTags,\n  setTableView,\n}: {\n  filterTags?: {key: string; value: string}[];\n  setTableView: (view: 'evaluations' | 'runs') => void;\n}) => {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    RunsRootQuery,\n    RunsRootQueryVariables\n  >({\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    variables: {\n      filter: {\n        tags: [...(filterTags || []), {key: 'dagster/auto_materialize', value: 'true'}],\n      },\n    },\n    query: RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n\n  useQueryRefreshAtInterval(queryResult, 15 * 1000);\n\n  const runData = (queryResult.data || queryResult.previousData)?.pipelineRunsOrError;\n\n  return (\n    <Box>\n      <Wrapper>\n        <Box padding={{vertical: 12, horizontal: 24}} margin={{top: 32}} border=\"top\">\n          <ButtonGroup\n            activeItems={new Set(['runs'])}\n            buttons={[\n              {id: 'evaluations', label: 'Evaluations'},\n              {id: 'runs', label: 'Runs'},\n            ]}\n            onClick={(id: 'evaluations' | 'runs') => {\n              setTableView(id);\n            }}\n          />\n        </Box>\n        <RunTable runs={runData?.__typename === 'Runs' ? runData.results : []} />\n      </Wrapper>\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </Box>\n  );\n};\n\n// Super hacky but easiest solution to position the action button\nconst Wrapper = styled.div`\n  position: relative;\n  > *:nth-child(2) {\n    position: absolute;\n    right: 0;\n    top: 0;\n  }\n`;\n","import {\n  Body2,\n  Box,\n  Button,\n  ButtonLink,\n  CursorHistoryControls,\n  CursorPaginationProps,\n  Icon,\n  MenuItem,\n  Select,\n  Spinner,\n  Table,\n} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {AssetDaemonTickFragment} from './types/AssetDaemonTicksQuery.types';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {TimeElapsed} from '../../runs/TimeElapsed';\nimport {TickStatusTag} from '../../ticks/TickStatusTag';\n\ninterface Props {\n  loading: boolean;\n  ticks: AssetDaemonTickFragment[];\n  tickStatus: AutomaterializationTickStatusDisplay;\n  setTickStatus: (status: AutomaterializationTickStatusDisplay) => void;\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  paginationProps: CursorPaginationProps;\n  actionBarComponents?: React.ReactNode;\n}\n\nexport const AutomaterializationEvaluationHistoryTable = ({\n  loading,\n  ticks,\n  tickStatus,\n  setTickStatus,\n  setSelectedTick,\n  paginationProps,\n  actionBarComponents,\n}: Props) => {\n  return (\n    <Box>\n      <Box\n        flex={{justifyContent: 'space-between', alignItems: 'center'}}\n        padding={{vertical: 12, horizontal: 24}}\n        margin={{top: 32}}\n        border=\"top\"\n      >\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          {actionBarComponents}\n          {loading && !ticks?.length ? <Spinner purpose=\"body-text\" /> : null}\n        </Box>\n        <StatusFilter status={tickStatus} onChange={setTickStatus} />\n      </Box>\n      <TableWrapper>\n        <thead>\n          <tr>\n            <th style={{width: 120}}>Timestamp</th>\n            <th style={{width: 90}}>Status</th>\n            <th style={{width: 90}}>Duration</th>\n            <th style={{width: 180}}>Result</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* Use previous data to stop page from jumping while new data loads */}\n          {ticks.map((tick, index) => {\n            // This is a hack for ticks that get stuck in started\n            const isTickStuckInStartedState =\n              index !== 0 &&\n              tick.status === InstigationTickStatus.STARTED &&\n              !paginationProps.hasPrevCursor;\n\n            return (\n              <tr key={tick.id}>\n                <td>\n                  <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n                </td>\n                <td>\n                  <TickStatusTag\n                    tick={tick}\n                    tickResultType=\"materializations\"\n                    isStuckStarted={isTickStuckInStartedState}\n                  />\n                </td>\n                <td>\n                  {isTickStuckInStartedState ? (\n                    ' - '\n                  ) : (\n                    <TimeElapsed startUnix={tick.timestamp} endUnix={tick.endTimestamp} />\n                  )}\n                </td>\n                <td>\n                  {[InstigationTickStatus.SKIPPED, InstigationTickStatus.SUCCESS].includes(\n                    tick.status,\n                  ) ? (\n                    <ButtonLink\n                      onClick={() => {\n                        setSelectedTick(tick);\n                      }}\n                    >\n                      <Body2>\n                        {tick.requestedAssetMaterializationCount} materializations requested\n                      </Body2>\n                    </ButtonLink>\n                  ) : (\n                    ' - '\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </TableWrapper>\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </Box>\n  );\n};\n\nexport enum AutomaterializationTickStatusDisplay {\n  ALL = 'all',\n  FAILED = 'failed',\n  SUCCESS = 'success',\n}\nexport const AutomaterializationTickStatusDisplayMappings = {\n  [AutomaterializationTickStatusDisplay.ALL]: [\n    InstigationTickStatus.SUCCESS,\n    InstigationTickStatus.FAILURE,\n    InstigationTickStatus.STARTED,\n    InstigationTickStatus.SKIPPED,\n  ],\n  [AutomaterializationTickStatusDisplay.FAILED]: [InstigationTickStatus.FAILURE],\n  [AutomaterializationTickStatusDisplay.SUCCESS]: [InstigationTickStatus.SUCCESS],\n};\n\nconst StatusFilterItems = [\n  {key: AutomaterializationTickStatusDisplay.ALL, label: 'All ticks'},\n  {key: AutomaterializationTickStatusDisplay.SUCCESS, label: 'Requested'},\n  {key: AutomaterializationTickStatusDisplay.FAILED, label: 'Failed'},\n];\nconst StatusFilter = ({\n  status,\n  onChange,\n}: {\n  status: AutomaterializationTickStatusDisplay;\n  onChange: (value: AutomaterializationTickStatusDisplay) => void;\n}) => {\n  const activeItem = StatusFilterItems.find(({key}) => key === status);\n  return (\n    <Select<(typeof StatusFilterItems)[0]>\n      popoverProps={{position: 'bottom-right'}}\n      filterable={false}\n      activeItem={activeItem}\n      items={StatusFilterItems}\n      itemRenderer={(item, props) => {\n        return (\n          <MenuItem\n            active={props.modifiers.active}\n            onClick={props.handleClick}\n            key={item.key}\n            text={item.label}\n            style={{width: '300px'}}\n          />\n        );\n      }}\n      onItemSelect={(item) => onChange(item.key)}\n    >\n      <Button\n        rightIcon={<Icon name=\"arrow_drop_down\" />}\n        style={{minWidth: '200px', display: 'flex', justifyContent: 'space-between'}}\n      >\n        {activeItem?.label}\n      </Button>\n    </Select>\n  );\n};\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {useEffect, useMemo} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {\n  AutomaterializationEvaluationHistoryTable,\n  AutomaterializationTickStatusDisplay,\n  AutomaterializationTickStatusDisplayMappings,\n} from './AutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 15;\n\ninterface Props {\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n  actionBarComponents?: React.ReactNode;\n}\n\nexport const InstanceAutomaterializationEvaluationHistoryTable = ({\n  setSelectedTick,\n  setTimerange,\n  setParentStatuses,\n  actionBarComponents,\n}: Props) => {\n  const [tickStatus, setTickStatus] = useQueryPersistedState<AutomaterializationTickStatusDisplay>({\n    queryKey: 'status',\n    defaults: {status: AutomaterializationTickStatusDisplay.ALL},\n  });\n\n  const statuses = useMemo(\n    () =>\n      AutomaterializationTickStatusDisplayMappings[tickStatus] ||\n      AutomaterializationTickStatusDisplayMappings[AutomaterializationTickStatusDisplay.ALL],\n    [tickStatus],\n  );\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetDaemonTicksQuery,\n    AssetDaemonTicksQueryVariables\n  >({\n    query: ASSET_DAEMON_TICKS_QUERY,\n    variables: {\n      statuses: useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      const ticks = data.autoMaterializeTicks;\n      if (!ticks.length) {\n        return undefined;\n      }\n      return ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data?.autoMaterializeTicks) {\n        return [];\n      }\n      return data.autoMaterializeTicks;\n    },\n    pageSize: PAGE_SIZE,\n  });\n\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      const ticks = queryResult.data?.autoMaterializeTicks;\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, queryResult.data?.autoMaterializeTicks, setTimerange]);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <AutomaterializationEvaluationHistoryTable\n      loading={queryResult.loading}\n      ticks={queryResult.data?.autoMaterializeTicks || []}\n      paginationProps={paginationProps}\n      setSelectedTick={setSelectedTick}\n      tickStatus={tickStatus}\n      setTickStatus={setTickStatus}\n      actionBarComponents={actionBarComponents}\n    />\n  );\n};\n","import {\n  Box,\n  ButtonGroup,\n  Checkbox,\n  Colors,\n  Spinner,\n  Subtitle2,\n  Table,\n} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationTickDetailDialog} from './AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from './AutomaterializeRunHistoryTable';\nimport {InstanceAutomaterializationEvaluationHistoryTable} from './InstanceAutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useLazyQuery} from '../../apollo-client';\nimport {useConfirmation} from '../../app/CustomConfirmationProvider';\nimport {useFeatureFlags} from '../../app/Flags';\nimport {useUnscopedPermissions} from '../../app/Permissions';\nimport {useRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus, RunsFilter} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../../instigation/LiveTickTimeline2';\nimport {isStuckStartedTick} from '../../instigation/util';\nimport {RunsFeedTableWithFilters} from '../../runs/RunsFeedTable';\nimport {useAutomaterializeDaemonStatus} from '../useAutomaterializeDaemonStatus';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\nconst RUNS_FILTER: RunsFilter = {tags: [{key: 'dagster/auto_materialize', value: 'true'}]};\n\nexport const GlobalAutomaterializationContent = () => {\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const {flagLegacyRunsPage} = useFeatureFlags();\n  const confirm = useConfirmation();\n\n  const {permissions: {canToggleAutoMaterialize} = {}} = useUnscopedPermissions();\n\n  const [isPaused, setIsPaused] = useState(false);\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const getVariables = useCallback(\n    (now = Date.now()) => {\n      if (timeRange || statuses) {\n        return {\n          afterTimestamp: timeRange?.[0],\n          beforeTimestamp: timeRange?.[1],\n          statuses,\n        };\n      }\n      return {\n        afterTimestamp: (now - TWENTY_MINUTES) / 1000,\n      };\n    },\n    [statuses, timeRange],\n  );\n\n  const [fetch, queryResult] = useLazyQuery<AssetDaemonTicksQuery, AssetDaemonTicksQueryVariables>(\n    ASSET_DAEMON_TICKS_QUERY,\n  );\n\n  const refresh = useCallback(\n    async () => await fetch({variables: getVariables()}),\n    [fetch, getVariables],\n  );\n\n  useRefreshAtInterval({\n    refresh,\n    enabled: !isPaused && !timeRange && !statuses,\n    intervalMs: 2 * 1000,\n    leading: true,\n  });\n\n  const [selectedTick, setSelectedTick] = useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const allTicks = useMemo(() => {\n    return data?.autoMaterializeTicks || [];\n  }, [data]);\n\n  const ticks = useMemo(\n    () => {\n      return (\n        allTicks?.map((tick, index) => {\n          const nextTick = allTicks[index - 1];\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (nextTick && isStuckStartedTick(tick, index)) {\n            const copy = {...tick};\n            copy.endTimestamp = nextTick.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // The allTicks array changes every 2 seconds because we query every 2 seconds.\n    // This would cause everything to re-render, to avoid that we memoize the ticks array that we pass around\n    // using the ID and status of the ticks.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(allTicks.map((tick) => `${tick.id}:${tick.status}`))],\n  );\n\n  const onHoverTick = useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  const tableViewSwitch = (\n    <ButtonGroup\n      activeItems={new Set([tableView])}\n      buttons={[\n        {id: 'evaluations', label: 'Evaluations'},\n        {id: 'runs', label: 'Runs'},\n      ]}\n      onClick={(id: 'evaluations' | 'runs') => {\n        setTableView(id);\n      }}\n    />\n  );\n\n  return (\n    <>\n      <Table>\n        <tbody>\n          <tr>\n            <td>Running</td>\n            <td>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <Checkbox\n                  format=\"switch\"\n                  checked={!automaterialize.paused}\n                  disabled={!canToggleAutoMaterialize}\n                  onChange={async (e) => {\n                    const checked = e.target.checked;\n                    if (!checked) {\n                      await confirm({\n                        title: 'Pause Auto-materializing?',\n                        description:\n                          'Pausing Auto-materializing will prevent new materializations triggered by an Auto-materializing policy.',\n                      });\n                    }\n                    automaterialize.setPaused(!checked);\n                  }}\n                />\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Evaluation frequency</td>\n            <td>~30s</td>\n          </tr>\n        </tbody>\n      </Table>\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!data ? (\n        <Box\n          padding={{vertical: 48}}\n          flex={{direction: 'row', justifyContent: 'center', gap: 12, alignItems: 'center'}}\n        >\n          <Spinner purpose=\"body-text\" />\n          <div style={{color: Colors.textLight()}}>Loading evaluations…</div>\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            tickResultType=\"materializations\"\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <InstanceAutomaterializationEvaluationHistoryTable\n              setSelectedTick={setSelectedTick}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n              actionBarComponents={tableViewSwitch}\n            />\n          ) : flagLegacyRunsPage ? (\n            <AutomaterializeRunHistoryTable setTableView={setTableView} />\n          ) : (\n            <Box margin={{top: 32}} border=\"top\">\n              <RunsFeedTableWithFilters\n                filter={RUNS_FILTER}\n                actionBarComponents={tableViewSwitch}\n              />\n            </Box>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import {Page} from '@dagster-io/ui-components';\nimport {Redirect} from 'react-router-dom';\n\nimport {GlobalAutomaterializationContent} from './GlobalAutomaterializationContent';\nimport {assertUnreachable} from '../../app/Util';\nimport {useTrackPageView} from '../../app/analytics';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {OverviewPageHeader} from '../../overview/OverviewPageHeader';\nimport {useAutoMaterializeSensorFlag} from '../AutoMaterializeSensorFlag';\n\n// Determine whether the user is flagged to see automaterialize policies as\n// sensors. If so, redirect to either the merged Automations page or the Sensors overview,\n// depending on their nav flag state.\nexport const AutomaterializationRoot = () => {\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  switch (automaterializeSensorsFlagState) {\n    case 'unknown':\n      return <div />; // Waiting for result\n    case 'has-global-amp':\n      return <GlobalAutomaterializationRoot />;\n    case 'has-sensor-amp':\n      return <Redirect to=\"/automation\" />;\n    default:\n      assertUnreachable(automaterializeSensorsFlagState);\n  }\n};\n\nconst GlobalAutomaterializationRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Auto-materialize');\n  return (\n    <Page>\n      <OverviewPageHeader tab=\"amp\" />\n      <GlobalAutomaterializationContent />\n    </Page>\n  );\n};\n","import {\n  Alert,\n  Box,\n  Colors,\n  CursorPaginationControls,\n  NonIdealState,\n  Spinner,\n} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\n\nimport {gql} from '../apollo-client';\nimport {BACKFILL_TABLE_FRAGMENT, BackfillTable} from './backfill/BackfillTable';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {BulkActionStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {DaemonNotRunningAlert, useIsBackfillDaemonHealthy} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {useFilters} from '../ui/BaseFilters';\nimport {useStaticSetFilter} from '../ui/BaseFilters/useStaticSetFilter';\n\nconst PAGE_SIZE = 10;\n\nconst labelForBackfillStatus = (key: BulkActionStatus) => {\n  switch (key) {\n    case BulkActionStatus.CANCELED:\n      return 'Canceled';\n    case BulkActionStatus.CANCELING:\n      return 'Canceling';\n    case BulkActionStatus.COMPLETED:\n      return 'Completed';\n    case BulkActionStatus.FAILED:\n      return 'Failed';\n    case BulkActionStatus.REQUESTED:\n      return 'In progress';\n    case BulkActionStatus.COMPLETED_SUCCESS:\n      return 'Success';\n    case BulkActionStatus.COMPLETED_FAILED:\n      return 'Failed';\n  }\n};\n\nconst backfillStatusValues = Object.keys(BulkActionStatus).map((key) => {\n  const status = key as BulkActionStatus;\n  const label = labelForBackfillStatus(status);\n  return {\n    label,\n    value: status,\n    match: [status, label],\n  };\n});\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const [statusState, setStatusState] = useQueryPersistedState<Set<BulkActionStatus>>({\n    encode: (vals) => ({status: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.status?.split(',') as BulkActionStatus[]) || []),\n  });\n  const statusFilter = useStaticSetFilter<BulkActionStatus>({\n    name: 'Status',\n    icon: 'status',\n    allValues: backfillStatusValues,\n    allowMultipleSelections: false,\n    closeOnSelect: true,\n    renderLabel: ({value}) => <div>{labelForBackfillStatus(value)}</div>,\n    getStringValue: (status) => labelForBackfillStatus(status),\n    state: statusState,\n    onStateChanged: setStatusState,\n  });\n\n  const {button, activeFiltersJsx} = useFilters({filters: [statusFilter]});\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {\n      status: statusState.size > 0 ? Array.from(statusState)[0]! : undefined,\n    },\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n\n  const isDaemonHealthy = useIsBackfillDaemonHealthy();\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {loading, data} = queryResult;\n  const [didDismissBackfillPageAlert, setDidDismissBackfillPageAlert] =\n    useStateWithStorage<boolean>('new_backfill_location_alert', (json) => !!json);\n\n  interface AlertProps {\n    setDidDismissBackfillPageAlert: (didDismissBackfillPageAlert: boolean) => void;\n  }\n\n  const BackfillPageDeprecationAlert = (props: AlertProps) => {\n    const {setDidDismissBackfillPageAlert} = props;\n\n    return (\n      <Box padding={8} border=\"top-and-bottom\">\n        <Alert\n          title={\n            <>\n              <span>Backfills are moving:</span>\n              <span style={{fontWeight: 'normal'}}>\n                {' '}\n                We&apos;re incorporating backfills into the <Link to=\"/runs/\">Runs</Link> page to\n                unify the UI and provide one page to see all of your executions. The Backfills page\n                will be removed in a future release.{' '}\n                <a\n                  href=\"https://github.com/dagster-io/dagster/discussions/24898\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Share feedback\n                </a>{' '}\n              </span>\n            </>\n          }\n          onClose={() => setDidDismissBackfillPageAlert(true)}\n        />\n      </Box>\n    );\n  };\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box padding={{vertical: 64}} flex={{direction: 'column', alignItems: 'center'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading backfills…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const partitionBackfillsOrError = data?.partitionBackfillsOrError;\n    if (partitionBackfillsOrError?.__typename === 'PythonError') {\n      return <PythonErrorInfo error={partitionBackfillsOrError} />;\n    }\n\n    if (!partitionBackfillsOrError || !partitionBackfillsOrError?.results.length) {\n      if (statusState.size > 0) {\n        return (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"no-results\"\n              title=\"No matching backfills\"\n              description=\"No backfills were found for this filter.\"\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"No backfills found\"\n            description=\"This instance does not have any backfill jobs.\"\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <div>\n        {isDaemonHealthy ? null : (\n          <Box padding={{horizontal: 24, bottom: 16}}>\n            <DaemonNotRunningAlert />\n          </Box>\n        )}\n        <BackfillTable\n          backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n          refetch={queryResult.refetch}\n        />\n        {partitionBackfillsOrError.results.length > 0 ? (\n          <Box margin={{top: 16}}>\n            <CursorPaginationControls {...paginationProps} />\n          </Box>\n        ) : null}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {!didDismissBackfillPageAlert ? (\n        <BackfillPageDeprecationAlert\n          setDidDismissBackfillPageAlert={setDidDismissBackfillPageAlert}\n        />\n      ) : null}\n      <Box\n        padding={{vertical: 12, horizontal: 20}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>{button}</div>\n          {activeFiltersJsx}\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {content()}\n    </>\n  );\n};\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($status: BulkActionStatus, $cursor: String, $limit: Int) {\n    partitionBackfillsOrError(status: $status, cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {Page} from '@dagster-io/ui-components';\n\nimport {InstanceBackfills} from './InstanceBackfills';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewPageHeader} from '../overview/OverviewPageHeader';\n\nexport const InstanceBackfillsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  return (\n    <Page>\n      <OverviewPageHeader tab=\"backfills\" />\n      <InstanceBackfills />\n    </Page>\n  );\n};\n","import {\n  Alert,\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  Tab,\n  Tabs,\n} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\nimport {Link, useParams} from 'react-router-dom';\n\nimport {BackfillActionsMenu} from './BackfillActionsMenu';\nimport {BackfillAssetPartitionsTable} from './BackfillAssetPartitionsTable';\nimport {BackfillLogsTab} from './BackfillLogsTab';\nimport {BackfillOverviewDetails} from './BackfillOverviewDetails';\nimport {BackfillRunsTab} from './BackfillRunsTab';\nimport {useBackfillDetailsQuery} from './useBackfillDetailsQuery';\nimport {CloudOSSContext} from '../../app/CloudOSSContext';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {BulkActionStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {\n  DaemonNotRunningAlert,\n  useIsBackfillDaemonHealthy,\n} from '../../partitions/BackfillMessaging';\nimport {testId} from '../../testing/testId';\n\nexport const BackfillPage = () => {\n  const {featureContext} = useContext(CloudOSSContext);\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const [selectedTab, setSelectedTab] = useQueryPersistedState<'partitions' | 'logs' | 'runs'>({\n    queryKey: 'tab',\n    defaults: {tab: 'partitions'},\n  });\n\n  const queryResult = useBackfillDetailsQuery(backfillId);\n  const isDaemonHealthy = useIsBackfillDaemonHealthy();\n  const {data, error} = queryResult;\n\n  const backfill =\n    data?.partitionBackfillOrError.__typename === 'PartitionBackfill'\n      ? data.partitionBackfillOrError\n      : null;\n\n  // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n  const isInProgress = backfill\n    ? [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(backfill.status)\n    : true;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!data || !data.partitionBackfillOrError) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return <PythonErrorInfo error={data.partitionBackfillOrError} />;\n    }\n    if (data.partitionBackfillOrError.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={data.partitionBackfillOrError.message} />;\n    }\n\n    const backfill = data.partitionBackfillOrError;\n\n    return (\n      <>\n        <BackfillOverviewDetails backfill={backfill} />\n\n        {isDaemonHealthy ? null : (\n          <Box padding={{horizontal: 24, bottom: 16}}>\n            <DaemonNotRunningAlert />\n          </Box>\n        )}\n\n        <Box padding={{left: 24}} border=\"bottom\">\n          <Tabs size=\"large\" selectedTabId={selectedTab}>\n            <Tab id=\"partitions\" title=\"Partitions\" onClick={() => setSelectedTab('partitions')} />\n            <Tab id=\"runs\" title=\"Runs\" onClick={() => setSelectedTab('runs')} />\n            {featureContext.canSeeBackfillCoordinatorLogs ? (\n              <Tab id=\"logs\" title=\"Coordinator logs\" onClick={() => setSelectedTab('logs')} />\n            ) : null}\n          </Tabs>\n        </Box>\n\n        {error?.graphQLErrors && (\n          <Alert intent=\"error\" title={error.graphQLErrors.map((err) => err.message)} />\n        )}\n        <Box flex={{direction: 'column'}} style={{flex: 1, position: 'relative', minHeight: 0}}>\n          {selectedTab === 'partitions' && <BackfillAssetPartitionsTable backfill={backfill} />}\n          {selectedTab === 'runs' && <BackfillRunsTab backfill={backfill} view=\"both\" />}\n          {selectedTab === 'logs' && <BackfillLogsTab backfill={backfill} />}\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={\n          <Heading>\n            <Link to=\"/overview/backfills\" style={{color: Colors.textLight()}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </Heading>\n        }\n        right={\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            {isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n            {backfill ? (\n              <BackfillActionsMenu\n                backfill={backfill}\n                refetch={queryResult.refetch}\n                canCancelRuns={backfill.status === BulkActionStatus.REQUESTED}\n              />\n            ) : null}\n          </Box>\n        }\n      />\n      {content()}\n    </Box>\n  );\n};\n","import {Redirect, Switch} from 'react-router-dom';\n\nimport {OverviewActivityRoot} from './OverviewActivityRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {Route} from '../app/Route';\nimport {AutomaterializationRoot} from '../assets/auto-materialization/AutomaterializationRoot';\nimport {InstanceBackfillsRoot} from '../instance/InstanceBackfillsRoot';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nexport const OverviewRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/overview/activity\" isNestingRoute>\n        <OverviewActivityRoot />\n      </Route>\n      <Route path=\"/overview/jobs\" render={() => <Redirect to=\"/jobs\" />} />\n      <Route path=\"/overview/schedules\" render={() => <Redirect to=\"/automation\" />} />\n      <Route path=\"/overview/sensors\" render={() => <Redirect to=\"/automation\" />} />\n      <Route path=\"/overview/automation\" render={() => <AutomaterializationRoot />} />\n      <Route path=\"/overview/backfills/:backfillId\" render={() => <BackfillPage />} />\n      <Route path=\"/overview/backfills\" exact render={() => <InstanceBackfillsRoot />} />\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" isNestingRoute render={() => <Redirect to=\"/overview/activity\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {\n  BaseTag,\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Tag,\n  Tooltip,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {HistoryTickFragment} from '../instigation/types/InstigationUtils.types';\n\nexport type TickResultType = 'runs' | 'materializations';\n\ntype PropsForMaterializations = {\n  tick: Pick<HistoryTickFragment, 'status' | 'requestedAssetMaterializationCount' | 'error'>;\n  tickResultType: 'materializations';\n  isStuckStarted?: boolean;\n};\n\ntype PropsForRuns = {\n  tick: Pick<HistoryTickFragment, 'status' | 'skipReason' | 'runIds' | 'runKeys' | 'error'>;\n  tickResultType: 'runs';\n  isStuckStarted?: boolean;\n};\n\nexport const TickStatusTag = ({\n  tick,\n  tickResultType,\n  isStuckStarted,\n}: PropsForMaterializations | PropsForRuns) => {\n  const [showErrors, setShowErrors] = useState(false);\n  const tag = useMemo(() => {\n    const requestedItem = tickResultType === 'materializations' ? 'materialization' : 'run';\n    switch (tick.status) {\n      case InstigationTickStatus.STARTED:\n        return (\n          <Tag intent=\"primary\" icon={isStuckStarted ? undefined : 'spinner'}>\n            {isStuckStarted ? 'In progress' : 'Evaluating'}\n          </Tag>\n        );\n      case InstigationTickStatus.SKIPPED:\n        const tag = (\n          <BaseTag\n            fillColor={Colors.backgroundLighter()}\n            label={\n              tickResultType === 'materializations'\n                ? '0 materializations requested'\n                : '0 runs requested'\n            }\n          />\n        );\n        if ('runKeys' in tick && tick.runKeys.length) {\n          const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {tag}\n            </Tooltip>\n          );\n        }\n        if ('skipReason' in tick && tick.skipReason) {\n          return (\n            <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n              {tag}\n            </Tooltip>\n          );\n        }\n        return tag;\n      case InstigationTickStatus.FAILURE:\n        return (\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n            <Tag intent=\"danger\">Failure</Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  setShowErrors(true);\n                }}\n              >\n                View\n              </ButtonLink>\n            ) : null}\n          </Box>\n        );\n      case InstigationTickStatus.SUCCESS:\n        const count =\n          tickResultType === 'materializations'\n            ? tick.requestedAssetMaterializationCount\n            : tick.runIds.length;\n        const successTag = (\n          <Tag intent=\"success\">\n            {count} {requestedItem}\n            {ifPlural(count, '', 's')} requested\n          </Tag>\n        );\n        if ('runKeys' in tick && tick.runKeys.length > tick.runIds.length) {\n          const message = `${tick.runKeys.length} runs requested, but ${\n            tick.runKeys.length - tick.runIds.length\n          } skipped because the runs already exist for those requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {successTag}\n            </Tooltip>\n          );\n        }\n        return successTag;\n    }\n  }, [isStuckStarted, tick, tickResultType]);\n\n  return (\n    <>\n      {tag}\n      {tick.error ? (\n        <Dialog isOpen={showErrors} title=\"Error\" style={{width: '80vw'}}>\n          <DialogBody>\n            <PythonErrorInfo error={tick.error} />\n          </DialogBody>\n          <DialogFooter topBorder>\n            <Button\n              intent=\"primary\"\n              onClick={() => {\n                setShowErrors(false);\n              }}\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </Dialog>\n      ) : null}\n    </>\n  );\n};\n"],"names":["dayjs","relativeTime","COLOR_MAP","InstigationTickStatus","SUCCESS","Colors","FAILURE","STARTED","SKIPPED","HoverColorMap","timestampFormat","memoize","Intl","DateTimeFormat","navigator","language","hour","minute","second","hourCycle","timeZone","timezone","browserTimezone","timeZoneName","LiveTickTimeline","ticks","tickResultType","onHoverTick","onSelectTick","exactRange","timeRange","MINUTE","tickGrid","timeAfter","param","now","setNow","useState","Date","isPaused","setPaused","useEffect","interval","setInterval","clearInterval","maxX","minX","fullRange","viewport","containerProps","useViewport","ticksReversed","useMemo","filter","tick","endTimestamp","reverse","ticksToDisplay","map","i","timestamp","startX","viewportWidth","width","endX","isStuckStartedTick","length","Math","max","timeTickGridDelta","tickGridDelta","startTickGridX","ceil","gridTicks","push","time","x","showLabel","useContext","TimeContext","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","style","marginRight","jsxs","TicksWrapper","GridTick","transform","concat","GridTickLine","GridTickTime","Caption","format","count","runIds","requestedAssetMaterializationCount","Tick","status","onMouseEnter","onMouseLeave","onClick","Tooltip","content","TickTooltip","height","id","NowIndicator","TimeAxisWrapper","memo","ifPlural","runs","startTime","endTime","elapsedTime","to","as","color","styled","withConfig","truncate","str","slice","TRUNCATION_THRESHOLD","index","THREE_DAYS","countPartitionsAddedOrDeleted","requests","type","reduce","sum","request","partitionKeys","AutomaterializationTickStatusDisplay","OverviewAssetsRoot","Header","TabButton","useTrackPageView","useDocumentTitle","assets","query","error","loading","useAllAssets","refreshState","useRefreshAtInterval","refresh","intervalMs","FIFTEEN_SECONDS","leading","groupedAssetsUnfiltered","React","groupAssets","groups","forEach","asset","definition","groupName","repositoryName","repository","name","key","target","Object","values","searchValue","setSearchValue","useQueryPersistedState","queryKey","decode","qs","searchQuery","JSON","parse","encode","stringify","undefined","groupedAssets","group","UNGROUPED_ASSETS","toLowerCase","includes","orderedAssets","flatMap","useAssetsBaseData","parentRef","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","jsx_runtime","Fragment","position","top","zIndex","Box","padding","horizontal","vertical","flex","alignItems","gap","grow","selected","TextInput","value","onChange","e","placeholder","border","Alert","intent","title","description","Link","justifyContent","direction","Spinner","purpose","PythonErrorInfo","overflow","Container","ref","VirtualHeaderRow","Inner","$totalHeight","size","start","VirtualRow","TEMPLATE_COLUMNS","HeaderRow","templateColumns","sticky","HeaderCell","assetKeys","path","liveDataByNode","statuses","groupAssetsByStatus","repo","find","repoAddress","buildRepoAddress","location","isBatchStillLoading","keys","zeroOrBlank","Row","$height","$start","RowGrid","Cell","Icon","fontWeight","workspacePathFromAddress","RepositoryLinkWrapper","maxWidth","RepositoryLink","showRefresh","missing","SelectOnHover","getCount","case","StatusCase","PARTITIONS_MISSING","numMissing","adjective","Tag","borderRadius","failed","PARTITIONS_FAILED","numFailed","borderLeft","borderRight","borderBottom","display","inprogress","MATERIALIZING","numMaterializing","icon","successful","PARTITIONS_MATERIALIZED","numMaterialized","backgroundColor","children","RowCell","SelectWrapper","Select","itemPredicate","item","displayNameForAssetKey","toLocaleLowerCase","itemRenderer","LinkWithNoUnderline","assetDetailsPathForKey","MenuItem","text","paddingLeft","whiteSpace","textOverflow","partitionCountString","onItemSelect","OverviewPageAlerts","OverviewTabs","tab","props","automaterialize","useAutomaterializeDaemonStatus","automaterializeSensorsFlagState","useAutoMaterializeSensorFlag","enableAssetHealthOverviewPreview","AssetFeatureContext","Tabs","selectedTabId","TabLink","paused","alignSelf","QueryRefreshCountdown","OverviewPageHeader","queryData","rest","PageHeader","tabs","OverviewActivityRoot","header","_defaultTab","setDefaultTab","useStateWithStorage","json","defaultTab","tabButton","JoinedButtons","ActivatableButton","$active","Switch","Route","OverviewTimelineRoot","isNestingRoute","render","Redirect","VirtualizedResourceRow","resourceType","parentResources","jobsOpsUsing","assetKeysUsing","schedulesUsing","sensorsUsing","resourceTypeSuccinct","succinctType","uses","span","MiddleTruncate","Mono","VirtualizedResourceHeader","OverviewResourcesTable","repos","useRef","allKeys","repoAddressAsHumanString","expandedKeys","onToggle","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","resources","resourceCount","repoKey","resource","duplicateRepoNames","findDuplicateRepoNames","row","ii","RepoRow","expanded","showLocation","has","rightElement","placement","SearchInputSpinner","tooltipContent","useDelayedState","margin","canShow","OverviewResourcesRoot","allRepos","visibleRepos","workspaceLoading","data","cachedData","WorkspaceContext","defaults","search","repoCount","queryResultOverview","useQuery","OVERVIEW_RESOURCES_QUERY","fetchPolicy","notifyOnNetworkStatusChange","queryLoading","useQueryRefreshAtInterval","repoBuckets","visibleKeys","visibleRepoKeys","cachedEntries","__typename","workspaceOrError","buildBuckets","locationEntries","sanitizedSearch","trim","anySearch","filteredBySearch","searchToLower","showSearchSpinner","RepoFilterButton","paddingTop","anyReposHidden","NonIdealState","strong","entries","entry","locationOrLoadError","buckets","repositories","allTopLevelResourceDetails","sortRepoBuckets","gql","PYTHON_ERROR_FRAGMENT","RESOURCE_ENTRY_FRAGMENT","ASSET_DAEMON_TICK_FRAGMENT","ASSET_DAEMON_TICKS_QUERY","AutomaterializationTickDetailDialog","isOpen","close","AssetKeysDialog","setIsOpen","DialogHeader","label","Timestamp","unix","timeFormat","showTimezone","gridTemplateRows","TickDetailSummary","TickMaterializationsTable","AutomaterializeRunHistoryTable","queryResult","filterTags","setTableView","paginationProps","useCursorPaginatedQuery","nextCursorForResult","pipelineRunsOrError","results","PAGE_SIZE","getResultArray","variables","tags","RUNS_ROOT_QUERY","pageSize","runData","previousData","_this","Wrapper","ButtonGroup","activeItems","Set","buttons","RunTable","paddingBottom","CursorHistoryControls","AutomaterializationEvaluationHistoryTable","tickStatus","setTickStatus","setSelectedTick","actionBarComponents","StatusFilter","TableWrapper","thead","tr","th","tbody","isTickStuckInStartedState","hasPrevCursor","td","TickStatusTag","isStuckStarted","TimeElapsed","startUnix","endUnix","ButtonLink","Body2","AutomaterializationTickStatusDisplayMappings","StatusFilterItems","activeItem","popoverProps","filterable","active","modifiers","handleClick","Button","rightIcon","minWidth","Table","InstanceAutomaterializationEvaluationHistoryTable","setTimerange","setParentStatuses","ALL","Array","from","autoMaterializeTicks","end","RUNS_FILTER","GlobalAutomaterializationContent","flagLegacyRunsPage","useFeatureFlags","confirm","useConfirmation","permissions","canToggleAutoMaterialize","useUnscopedPermissions","setIsPaused","setStatuses","getVariables","useCallback","afterTimestamp","beforeTimestamp","TWENTY_MINUTES","fetch","useLazyQuery","enabled","selectedTick","tableView","view","raw","cursor","allTicks","nextTick","copy","tableViewSwitch","Checkbox","checked","disabled","Subtitle2","RunsFeedTableWithFilters","AutomaterializationRoot","GlobalAutomaterializationRoot","assertUnreachable","Page","labelForBackfillStatus","BulkActionStatus","CANCELED","CANCELING","COMPLETED","FAILED","REQUESTED","COMPLETED_SUCCESS","COMPLETED_FAILED","backfillStatusValues","match","InstanceBackfills","statusState","setStatusState","vals","join","split","statusFilter","useStaticSetFilter","allValues","allowMultipleSelections","closeOnSelect","renderLabel","getStringValue","state","onStateChanged","button","activeFiltersJsx","useFilters","filters","BACKFILLS_QUERY","result","partitionBackfillsOrError","isDaemonHealthy","useIsBackfillDaemonHealthy","didDismissBackfillPageAlert","setDidDismissBackfillPageAlert","a","href","rel","onClose","BackfillPageDeprecationAlert","bottom","DaemonNotRunningAlert","BackfillTable","backfills","refetch","CursorPaginationControls","BACKFILL_TABLE_FRAGMENT","InstanceBackfillsRoot","BackfillPage","featureContext","CloudOSSContext","backfillId","useParams","selectedTab","setSelectedTab","useBackfillDetailsQuery","backfill","partitionBackfillOrError","isInProgress","Heading","right","BackfillActionsMenu","canCancelRuns","data-testid","testId","message","BackfillOverviewDetails","left","Tab","canSeeBackfillCoordinatorLogs","graphQLErrors","err","minHeight","BackfillAssetPartitionsTable","BackfillRunsTab","BackfillLogsTab","OverviewRoot","exact","overview_OverviewRoot","sort","b","aString","bString","localeCompare","option","repositoryLocation","showErrors","setShowErrors","tag","requestedItem","BaseTag","fillColor","runKeys","skipReason","targetTagName","successTag","Dialog","DialogBody","DialogFooter","topBorder"],"sourceRoot":""}